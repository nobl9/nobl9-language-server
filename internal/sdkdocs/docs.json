[{"Kind":"Project","Version":"n9/v1alpha","Properties":[{"path":"$","type":"Project","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/project","Doc":"Project is the primary grouping of resources in Nobl9.\nMost objects are scoped to a certain Project.\nFor more details, see [projects in the Nobl9 platform].\n\n[projects in the Nobl9 platform]: https://docs.nobl9.com/getting-started/rbac/#projects-in-the-nobl9-platform","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["Project"],"rules":[{"description":"should be equal to 'Project'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/project","Doc":"Metadata provides identity information for Project.","childrenPaths":["$.metadata.name","$.metadata.displayName","$.metadata.labels","$.metadata.annotations"]},{"path":"$.metadata.name","type":"string","Doc":"Name is used to uniquely identify the Project.","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.displayName","type":"string","Doc":"DisplayName allows defining a more human-readable name for the Project.","isOptional":true,"rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.metadata.labels","type":"map[string][]string","Doc":"Labels are key-value pairs that can be attached to certain objects.\nLabels are used to select and filter these objects.","examples":["area:\n- latency\n- slow-check\nenv:\n- prod\n- dev\nregion:\n- us\n- eu\nteam:\n- green\n- sales\n"],"childrenPaths":["$.metadata.labels.~","$.metadata.labels.*","$.metadata.labels.*[*]"]},{"path":"$.metadata.labels.~","type":"string","Doc":"","rules":[{"description":"length must be between 1 and 63","errorCode":"string_length"},{"description":"string must match regular expression: '^\\p{Ll}([_\\-0-9\\p{Ll}]*[0-9\\p{Ll}])?$'","errorCode":"string_match_regexp"}]},{"path":"$.metadata.labels.*","type":"[]string","Doc":"","rules":[{"description":"elements must be unique","errorCode":"slice_unique"}]},{"path":"$.metadata.labels.*[*]","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 200","errorCode":"string_max_length"}]},{"path":"$.metadata.annotations","type":"map[string]string","Doc":"MetadataAnnotations are non-identifiable key-value pairs that can be attached to\nSLOs, services, projects, and alert policies.\nMetadata annotations are used for descriptive purposes only.","examples":["area: latency\nenv: prod\nregion: us\nteam: sales\n"],"childrenPaths":["$.metadata.annotations.~","$.metadata.annotations.*"]},{"path":"$.metadata.annotations.~","type":"string","Doc":"","rules":[{"description":"length must be between 1 and 63","errorCode":"string_length"},{"description":"string must match regular expression: '^\\p{Ll}([_\\-0-9\\p{Ll}]*[0-9\\p{Ll}])?$'","errorCode":"string_match_regexp"}]},{"path":"$.metadata.annotations.*","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 1050","errorCode":"string_max_length"}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/project","Doc":"Spec holds detailed specification of the Project.","childrenPaths":["$.spec.createdAt","$.spec.createdBy","$.spec.description"]},{"path":"$.spec.createdAt","type":"string","Doc":""},{"path":"$.spec.createdBy","type":"string","Doc":""},{"path":"$.spec.description","type":"string","Doc":"Description allows for a more detailed description of the Project.","rules":[{"description":"length must be between 0 and 1050","errorCode":"string_description"}]},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["apiVersion: n9/v1alpha\nkind: Project\nmetadata:\n  name: default\n  labels:\n    area:\n    - latency\n    - slow-check\n    env:\n    - prod\n    - dev\n    region:\n    - us\n    - eu\n    team:\n    - green\n    - sales\n  annotations:\n    area: latency\n    env: prod\n    region: us\n    team: sales\nspec:\n  description: Example Project\n"]},{"Kind":"Service","Version":"n9/v1alpha","Properties":[{"path":"$","type":"Service","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/service","Doc":"Service in Nobl9 is a high-level grouping of service level objectives (SLOs).\nA service can represent a logical service endpoint like an API, a database, an application,\nor anything else you care about setting an SLO for.\nEvery SLO in Nobl9 is tied to a service, and service can have one or more SLOs.","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.status","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["Service"],"rules":[{"description":"should be equal to 'Service'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/service","Doc":"Metadata provides identity information for Service.","childrenPaths":["$.metadata.name","$.metadata.displayName","$.metadata.project","$.metadata.labels","$.metadata.annotations"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.displayName","type":"string","Doc":"","isOptional":true,"rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.metadata.project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.labels","type":"map[string][]string","Doc":"Labels are key-value pairs that can be attached to certain objects.\nLabels are used to select and filter these objects.","examples":["area:\n- latency\n- slow-check\nenv:\n- prod\n- dev\nregion:\n- us\n- eu\nteam:\n- green\n- sales\n"],"childrenPaths":["$.metadata.labels.~","$.metadata.labels.*","$.metadata.labels.*[*]"]},{"path":"$.metadata.labels.~","type":"string","Doc":"","rules":[{"description":"length must be between 1 and 63","errorCode":"string_length"},{"description":"string must match regular expression: '^\\p{Ll}([_\\-0-9\\p{Ll}]*[0-9\\p{Ll}])?$'","errorCode":"string_match_regexp"}]},{"path":"$.metadata.labels.*","type":"[]string","Doc":"","rules":[{"description":"elements must be unique","errorCode":"slice_unique"}]},{"path":"$.metadata.labels.*[*]","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 200","errorCode":"string_max_length"}]},{"path":"$.metadata.annotations","type":"map[string]string","Doc":"MetadataAnnotations are non-identifiable key-value pairs that can be attached to\nSLOs, services, projects, and alert policies.\nMetadata annotations are used for descriptive purposes only.","examples":["area: latency\nenv: prod\nregion: us\nteam: sales\n"],"childrenPaths":["$.metadata.annotations.~","$.metadata.annotations.*"]},{"path":"$.metadata.annotations.~","type":"string","Doc":"","rules":[{"description":"length must be between 1 and 63","errorCode":"string_length"},{"description":"string must match regular expression: '^\\p{Ll}([_\\-0-9\\p{Ll}]*[0-9\\p{Ll}])?$'","errorCode":"string_match_regexp"}]},{"path":"$.metadata.annotations.*","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 1050","errorCode":"string_max_length"}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/service","Doc":"Spec holds detailed information specific to Service.","childrenPaths":["$.spec.description"]},{"path":"$.spec.description","type":"string","Doc":"","rules":[{"description":"length must be between 0 and 1050","errorCode":"string_description"}]},{"path":"$.status","type":"Status","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/service","Doc":"Status holds dynamic fields returned when the Service is fetched from Nobl9 platform.\nStatus is not part of the static object definition.","childrenPaths":["$.status.sloCount"]},{"path":"$.status.sloCount","type":"int","Doc":""},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["apiVersion: n9/v1alpha\nkind: Service\nmetadata:\n  name: prometheus\n  project: default\n  labels:\n    area:\n    - latency\n    - slow-check\n    env:\n    - prod\n    - dev\n    region:\n    - us\n    - eu\n    team:\n    - green\n    - sales\n  annotations:\n    area: latency\n    env: prod\n    region: us\n    team: sales\nspec:\n  description: Example Service\n"]},{"Kind":"SLO","Version":"n9/v1alpha","Properties":[{"path":"$","type":"SLO","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SLO struct which mapped one to one with kind: slo yaml definition, external usage.","rules":[{"description":"","errorCode":"forbidden","conditions":["at least one composite objective is defined"]},{"description":"","errorCode":"forbidden","conditions":["at least one composite objective is defined"]}],"childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.status","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["SLO"],"rules":[{"description":"should be equal to 'SLO'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"Metadata provides identity information for SLO.","childrenPaths":["$.metadata.name","$.metadata.displayName","$.metadata.project","$.metadata.labels","$.metadata.annotations"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.displayName","type":"string","Doc":"","isOptional":true,"rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.metadata.project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.labels","type":"map[string][]string","Doc":"Labels are key-value pairs that can be attached to certain objects.\nLabels are used to select and filter these objects.","examples":["area:\n- latency\n- slow-check\nenv:\n- prod\n- dev\nregion:\n- us\n- eu\nteam:\n- green\n- sales\n"],"childrenPaths":["$.metadata.labels.~","$.metadata.labels.*","$.metadata.labels.*[*]"]},{"path":"$.metadata.labels.~","type":"string","Doc":"","rules":[{"description":"length must be between 1 and 63","errorCode":"string_length"},{"description":"string must match regular expression: '^\\p{Ll}([_\\-0-9\\p{Ll}]*[0-9\\p{Ll}])?$'","errorCode":"string_match_regexp"}]},{"path":"$.metadata.labels.*","type":"[]string","Doc":"","rules":[{"description":"elements must be unique","errorCode":"slice_unique"}]},{"path":"$.metadata.labels.*[*]","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 200","errorCode":"string_max_length"}]},{"path":"$.metadata.annotations","type":"map[string]string","Doc":"MetadataAnnotations are non-identifiable key-value pairs that can be attached to\nSLOs, services, projects, and alert policies.\nMetadata annotations are used for descriptive purposes only.","examples":["area: latency\nenv: prod\nregion: us\nteam: sales\n"],"childrenPaths":["$.metadata.annotations.~","$.metadata.annotations.*"]},{"path":"$.metadata.annotations.~","type":"string","Doc":"","rules":[{"description":"length must be between 1 and 63","errorCode":"string_length"},{"description":"string must match regular expression: '^\\p{Ll}([_\\-0-9\\p{Ll}]*[0-9\\p{Ll}])?$'","errorCode":"string_match_regexp"}]},{"path":"$.metadata.annotations.*","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 1050","errorCode":"string_max_length"}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"Spec holds detailed information specific to SLO.","rules":[{"description":"properties are mutually exclusive: composite, countMetrics, rawMetrics","errorCode":"mutually_exclusive"},{"description":"","errorCode":"exactly_one_metric_spec_type"},{"description":"","errorCode":"time_slice_target"}],"childrenPaths":["$.spec.description","$.spec.indicator","$.spec.budgetingMethod","$.spec.objectives","$.spec.objectives[*]","$.spec.service","$.spec.timeWindows","$.spec.timeWindows[*]","$.spec.alertPolicies","$.spec.alertPolicies[*]","$.spec.attachments","$.spec.attachments[*]","$.spec.createdAt","$.spec.createdBy","$.spec.composite","$.spec.anomalyConfig","$.spec.tier"]},{"path":"$.spec.description","type":"string","Doc":"","rules":[{"description":"length must be between 0 and 1050","errorCode":"string_description"}]},{"path":"$.spec.indicator","type":"Indicator","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"Indicator represents integration with metric source can be. e.g. Prometheus, Datadog, for internal usage.","isOptional":true,"rules":[{"description":"property is forbidden","details":"indicator section is forbidden when spec.objectives[0].composite is provided","errorCode":"forbidden","conditions":["at least one composite objective is defined"]}],"childrenPaths":["$.spec.indicator.metricSource","$.spec.indicator.rawMetric"]},{"path":"$.spec.indicator.metricSource","type":"MetricSourceSpec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.indicator.metricSource.name","$.spec.indicator.metricSource.project","$.spec.indicator.metricSource.kind"]},{"path":"$.spec.indicator.metricSource.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","conditions":["none of the objectives is of composite type"],"examples":["my-name","123-abc"]}]},{"path":"$.spec.indicator.metricSource.project","type":"string","Doc":"","isOptional":true,"rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","conditions":["none of the objectives is of composite type"],"examples":["my-name","123-abc"]}]},{"path":"$.spec.indicator.metricSource.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","isOptional":true,"values":["Agent","Direct"],"rules":[{"description":"must be one of: Agent, Direct","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric","type":"MetricSpec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"MetricSpec defines single time series obtained from data source","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}],"childrenPaths":["$.spec.indicator.rawMetric.prometheus","$.spec.indicator.rawMetric.datadog","$.spec.indicator.rawMetric.newRelic","$.spec.indicator.rawMetric.appDynamics","$.spec.indicator.rawMetric.splunk","$.spec.indicator.rawMetric.lightstep","$.spec.indicator.rawMetric.splunkObservability","$.spec.indicator.rawMetric.dynatrace","$.spec.indicator.rawMetric.elasticsearch","$.spec.indicator.rawMetric.thousandEyes","$.spec.indicator.rawMetric.graphite","$.spec.indicator.rawMetric.bigQuery","$.spec.indicator.rawMetric.opentsdb","$.spec.indicator.rawMetric.grafanaLoki","$.spec.indicator.rawMetric.cloudWatch","$.spec.indicator.rawMetric.pingdom","$.spec.indicator.rawMetric.amazonPrometheus","$.spec.indicator.rawMetric.redshift","$.spec.indicator.rawMetric.sumoLogic","$.spec.indicator.rawMetric.instana","$.spec.indicator.rawMetric.influxdb","$.spec.indicator.rawMetric.gcm","$.spec.indicator.rawMetric.azureMonitor","$.spec.indicator.rawMetric.generic","$.spec.indicator.rawMetric.honeycomb","$.spec.indicator.rawMetric.logicMonitor","$.spec.indicator.rawMetric.azurePrometheus"]},{"path":"$.spec.indicator.rawMetric.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.spec.indicator.rawMetric.prometheus.promql"]},{"path":"$.spec.indicator.rawMetric.prometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.spec.indicator.rawMetric.datadog.query"]},{"path":"$.spec.indicator.rawMetric.datadog.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.spec.indicator.rawMetric.newRelic.nrql"]},{"path":"$.spec.indicator.rawMetric.newRelic.nrql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]},{"description":"string must not match regular expression: '(?i)[\\n\\s](since|until)([\\n\\s]|$)'","details":"query must not contain 'since' or 'until' keywords (case insensitive)","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.spec.indicator.rawMetric.appDynamics.applicationName","$.spec.indicator.rawMetric.appDynamics.metricPath"]},{"path":"$.spec.indicator.rawMetric.appDynamics.applicationName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.appDynamics.metricPath","type":"string","Doc":"","rules":[{"description":"","errorCode":"app_dynamics_wildcard_not_supported","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.spec.indicator.rawMetric.splunk.query"]},{"path":"$.spec.indicator.rawMetric.splunk.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]},{"description":"string must contain the following substrings: 'n9time', 'n9value'","errorCode":"string_contains","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: '(\\bindex\\s*=.+)|(\"\\bindex\"\\s*=.+)'","details":"query has to contain index=\u003cNAME\u003e or \"index\"=\u003cNAME\u003e","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"],"examples":["index=svc-events","\"index\"=svc-events"]}]},{"path":"$.spec.indicator.rawMetric.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.spec.indicator.rawMetric.lightstep.streamId","$.spec.indicator.rawMetric.lightstep.typeOfData","$.spec.indicator.rawMetric.lightstep.percentile","$.spec.indicator.rawMetric.lightstep.uql"]},{"path":"$.spec.indicator.rawMetric.lightstep.streamId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","typeOfData is 'latency'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is 'metric'"]},{"description":"","conditions":["none of the objectives is of composite type","typeOfData is either 'good' or 'total'"]},{"description":"","conditions":["none of the objectives is of composite type","typeOfData is 'error_rate'"]}]},{"path":"$.spec.indicator.rawMetric.lightstep.typeOfData","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.lightstep.percentile","type":"float64","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type","typeOfData is 'latency'"]},{"description":"should be less than or equal to '99.99'","errorCode":"less_than_or_equal_to","conditions":["none of the objectives is of composite type","typeOfData is 'latency'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is 'metric'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is either 'good' or 'total'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is 'error_rate'"]}]},{"path":"$.spec.indicator.rawMetric.lightstep.uql","type":"string","Doc":"","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is 'latency'"]},{"description":"string must not match regular expression: '((spans_sample|assemble)\\s+[a-z\\d.])'","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","typeOfData is 'metric'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is either 'good' or 'total'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is 'error_rate'"]}]},{"path":"$.spec.indicator.rawMetric.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.spec.indicator.rawMetric.splunkObservability.program"]},{"path":"$.spec.indicator.rawMetric.splunkObservability.program","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.spec.indicator.rawMetric.dynatrace.metricSelector"]},{"path":"$.spec.indicator.rawMetric.dynatrace.metricSelector","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.spec.indicator.rawMetric.elasticsearch.index","$.spec.indicator.rawMetric.elasticsearch.query"]},{"path":"$.spec.indicator.rawMetric.elasticsearch.index","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.elasticsearch.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]},{"description":"string must contain the following substrings: '{{.BeginTime}}', '{{.EndTime}}'","errorCode":"string_contains","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","childrenPaths":["$.spec.indicator.rawMetric.thousandEyes.testID","$.spec.indicator.rawMetric.thousandEyes.testType"]},{"path":"$.spec.indicator.rawMetric.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.spec.indicator.rawMetric.thousandEyes.testType","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.spec.indicator.rawMetric.graphite.metricPath"]},{"path":"$.spec.indicator.rawMetric.graphite.metricPath","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]},{"description":"string must not match regular expression: '\\*'","details":"wildcards are not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must not match regular expression: '\\[[^.]*\\]'","details":"character list or range is not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type"],"examples":["[a-z0-9]"]},{"description":"string must not match regular expression: '{[^.]*}'","details":"value list is not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type"],"examples":["{user,system,iowait}"]}]},{"path":"$.spec.indicator.rawMetric.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.spec.indicator.rawMetric.bigQuery.query","$.spec.indicator.rawMetric.bigQuery.projectId","$.spec.indicator.rawMetric.bigQuery.location"]},{"path":"$.spec.indicator.rawMetric.bigQuery.query","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '\\bn9date\\b'","details":"must contain 'n9date'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: '\\bn9value\\b'","details":"must contain 'n9value'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: 'DATETIME\\(\\s*@n9date_from\\s*\\)'","details":"must have DATETIME placeholder with '@n9date_from'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: 'DATETIME\\(\\s*@n9date_to\\s*\\)'","details":"must have DATETIME placeholder with '@n9date_to'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.bigQuery.projectId","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.bigQuery.location","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.spec.indicator.rawMetric.opentsdb.query"]},{"path":"$.spec.indicator.rawMetric.opentsdb.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.spec.indicator.rawMetric.grafanaLoki.logql"]},{"path":"$.spec.indicator.rawMetric.grafanaLoki.logql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","rules":[{"description":"","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}],"childrenPaths":["$.spec.indicator.rawMetric.cloudWatch.region","$.spec.indicator.rawMetric.cloudWatch.namespace","$.spec.indicator.rawMetric.cloudWatch.metricName","$.spec.indicator.rawMetric.cloudWatch.stat","$.spec.indicator.rawMetric.cloudWatch.dimensions","$.spec.indicator.rawMetric.cloudWatch.dimensions[*]","$.spec.indicator.rawMetric.cloudWatch.accountId","$.spec.indicator.rawMetric.cloudWatch.sql","$.spec.indicator.rawMetric.cloudWatch.json"]},{"path":"$.spec.indicator.rawMetric.cloudWatch.region","type":"string","Doc":"","values":["us-east-2","us-east-1","us-west-1","us-west-2","af-south-1","ap-east-1","ap-south-1","ap-northeast-3","ap-northeast-2","ap-southeast-1","ap-southeast-2","ap-northeast-1","ca-central-1","cn-north-1","cn-northwest-1","eu-central-1","eu-west-1","eu-west-2","eu-south-1","eu-west-3","eu-north-1","me-south-1","sa-east-1"],"rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type"]},{"description":"must be one of: us-east-2, us-east-1, us-west-1, us-west-2, af-south-1, ap-east-1, ap-south-1, ap-northeast-3, ap-northeast-2, ap-southeast-1, ap-southeast-2, ap-northeast-1, ca-central-1, cn-north-1, cn-northwest-1, eu-central-1, eu-west-1, eu-west-2, eu-south-1, eu-west-3, eu-north-1, me-south-1, sa-east-1","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.cloudWatch.namespace","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^[0-9A-Za-z.\\-_/#:]{1,255}$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.indicator.rawMetric.cloudWatch.metricName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.indicator.rawMetric.cloudWatch.stat","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^((SampleCount)|(Sum)|(Average)|(Minimum)|(Maximum)|(IQM)|((((p)|(tm)|(wm)|(tc)|(ts)))((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?))|((((TM)|(WM)|(TC)|(TS)))\\(((((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%):((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%))|(((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%):)|(:((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):)|(:(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?)))\\))|((((PR)))\\((((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):)|(:(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?)))\\)))$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"],"examples":["SampleCount","Sum","Average","Minimum","Maximum","IQM","p10","p99","tm98","wm99","tc10","ts30","TM(10%:98%)","WM(10%:15%)","TC(10%:20%)","TS(10%:90%)"]}]},{"path":"$.spec.indicator.rawMetric.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"length must be less than or equal to 10","errorCode":"slice_max_length","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"elements must be unique","details":"dimension 'name' must be unique for all dimensions","errorCode":"slice_unique","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.indicator.rawMetric.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.spec.indicator.rawMetric.cloudWatch.dimensions[*].name","$.spec.indicator.rawMetric.cloudWatch.dimensions[*].value"]},{"path":"$.spec.indicator.rawMetric.cloudWatch.dimensions[*].name","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.indicator.rawMetric.cloudWatch.dimensions[*].value","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.indicator.rawMetric.cloudWatch.accountId","type":"string","Doc":"","isOptional":true,"rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^\\d{12}$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"],"examples":["123456789012"]}]},{"path":"$.spec.indicator.rawMetric.cloudWatch.sql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","sql is provided"]}]},{"path":"$.spec.indicator.rawMetric.cloudWatch.json","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","json is provided"]}]},{"path":"$.spec.indicator.rawMetric.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.spec.indicator.rawMetric.pingdom.checkId","$.spec.indicator.rawMetric.pingdom.checkType","$.spec.indicator.rawMetric.pingdom.status"]},{"path":"$.spec.indicator.rawMetric.pingdom.checkId","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: '^(?:|\\d+)$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.pingdom.checkType","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.pingdom.status","type":"string","Doc":"","isOptional":true,"rules":[{"description":"","conditions":["none of the objectives is of composite type","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","checkType is equal to 'transaction'"]}]},{"path":"$.spec.indicator.rawMetric.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.spec.indicator.rawMetric.amazonPrometheus.promql"]},{"path":"$.spec.indicator.rawMetric.amazonPrometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.spec.indicator.rawMetric.redshift.region","$.spec.indicator.rawMetric.redshift.clusterId","$.spec.indicator.rawMetric.redshift.databaseName","$.spec.indicator.rawMetric.redshift.query"]},{"path":"$.spec.indicator.rawMetric.redshift.region","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.redshift.clusterId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.redshift.databaseName","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.redshift.query","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^SELECT[\\s\\S]*\\bn9date\\b[\\s\\S]*FROM'","details":"must contain 'n9date' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: '^SELECT\\s[\\s\\S]*\\bn9value\\b[\\s\\S]*\\sFROM'","details":"must contain 'n9value' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: 'WHERE[\\s\\S]*\\W:n9date_from\\b[\\s\\S]*'","details":"must filter by ':n9date_from' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: 'WHERE[\\s\\S]*\\W:n9date_to\\b[\\s\\S]*'","details":"must filter by ':n9date_to' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.spec.indicator.rawMetric.sumoLogic.type","$.spec.indicator.rawMetric.sumoLogic.query","$.spec.indicator.rawMetric.sumoLogic.quantization","$.spec.indicator.rawMetric.sumoLogic.rollup"]},{"path":"$.spec.indicator.rawMetric.sumoLogic.type","type":"string","Doc":"","values":["logs","metrics"],"rules":[{"description":"must be one of: logs, metrics","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.sumoLogic.query","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","type is 'metrics'"]},{"description":"","conditions":["none of the objectives is of composite type","type is 'logs'"]},{"description":"string must match regular expression: '(?m)\\bn9_value\\b'","details":"n9_value is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","type is 'logs'"]},{"description":"string must match regular expression: '(?m)\\bby\\b'","details":"aggregation function is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","type is 'logs'"]}]},{"path":"$.spec.indicator.rawMetric.sumoLogic.quantization","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","type is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","type is 'logs'"]}]},{"path":"$.spec.indicator.rawMetric.sumoLogic.rollup","type":"string","Doc":"","values":["Avg","Sum","Min","Max","Count","None"],"rules":[{"description":"must be one of: Avg, Sum, Min, Max, Count, None","errorCode":"one_of","conditions":["none of the objectives is of composite type","type is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","type is 'logs'"]}]},{"path":"$.spec.indicator.rawMetric.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","childrenPaths":["$.spec.indicator.rawMetric.instana.metricType","$.spec.indicator.rawMetric.instana.infrastructure","$.spec.indicator.rawMetric.instana.application"]},{"path":"$.spec.indicator.rawMetric.instana.metricType","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.indicator.rawMetric.instana.infrastructure.metricRetrievalMethod","$.spec.indicator.rawMetric.instana.infrastructure.query","$.spec.indicator.rawMetric.instana.infrastructure.snapshotId","$.spec.indicator.rawMetric.instana.infrastructure.metricId","$.spec.indicator.rawMetric.instana.infrastructure.pluginId"]},{"path":"$.spec.indicator.rawMetric.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.infrastructure.metricId","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.infrastructure.pluginId","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.indicator.rawMetric.instana.application.metricId","$.spec.indicator.rawMetric.instana.application.aggregation","$.spec.indicator.rawMetric.instana.application.groupBy","$.spec.indicator.rawMetric.instana.application.apiQuery","$.spec.indicator.rawMetric.instana.application.includeInternal","$.spec.indicator.rawMetric.instana.application.includeSynthetic"]},{"path":"$.spec.indicator.rawMetric.instana.application.metricId","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.application.aggregation","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.indicator.rawMetric.instana.application.groupBy.tag","$.spec.indicator.rawMetric.instana.application.groupBy.tagEntity","$.spec.indicator.rawMetric.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.spec.indicator.rawMetric.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.spec.indicator.rawMetric.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.spec.indicator.rawMetric.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.spec.indicator.rawMetric.influxdb.query"]},{"path":"$.spec.indicator.rawMetric.influxdb.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: '\\s*bucket\\s*:\\s*\".+\"\\s*'","details":"must contain a bucket name","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: '\\s*range\\s*\\(\\s*start\\s*:\\s*time\\s*\\(\\s*v\\s*:\\s*params\\.n9time_start\\s*\\)\\s*,\\s*stop\\s*:\\s*time\\s*\\(\\s*v\\s*:\\s*params\\.n9time_stop\\s*\\)\\s*\\)'","details":"must contain both 'params.n9time_start' and 'params.n9time_stop'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","rules":[{"description":"","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}],"childrenPaths":["$.spec.indicator.rawMetric.gcm.query","$.spec.indicator.rawMetric.gcm.projectId","$.spec.indicator.rawMetric.gcm.promql"]},{"path":"$.spec.indicator.rawMetric.gcm.query","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.gcm.projectId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.gcm.promql","type":"string","Doc":""},{"path":"$.spec.indicator.rawMetric.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.spec.indicator.rawMetric.azureMonitor.dataType","$.spec.indicator.rawMetric.azureMonitor.resourceId","$.spec.indicator.rawMetric.azureMonitor.metricName","$.spec.indicator.rawMetric.azureMonitor.aggregation","$.spec.indicator.rawMetric.azureMonitor.dimensions","$.spec.indicator.rawMetric.azureMonitor.dimensions[*]","$.spec.indicator.rawMetric.azureMonitor.metricNamespace","$.spec.indicator.rawMetric.azureMonitor.workspace","$.spec.indicator.rawMetric.azureMonitor.kqlQuery"]},{"path":"$.spec.indicator.rawMetric.azureMonitor.dataType","type":"string","Doc":"","values":["metrics","logs"],"rules":[{"description":"must be one of: metrics, logs","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.azureMonitor.resourceId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^/subscriptions/[a-zA-Z0-9-]+/resourceGroups/[a-zA-Z0-9-._()]+/providers/[a-zA-Z0-9-.()_]+/[a-zA-Z0-9-_()]+/[a-zA-Z0-9-_()]+$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.indicator.rawMetric.azureMonitor.metricName","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.indicator.rawMetric.azureMonitor.aggregation","type":"string","Doc":"","values":["Avg","Min","Max","Count","Sum"],"rules":[{"description":"must be one of: Avg, Min, Max, Count, Sum","errorCode":"one_of","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.indicator.rawMetric.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"elements must be unique","details":"dimension 'name' must be unique for all dimensions","errorCode":"slice_unique","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.indicator.rawMetric.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.spec.indicator.rawMetric.azureMonitor.dimensions[*].name","$.spec.indicator.rawMetric.azureMonitor.dimensions[*].value"]},{"path":"$.spec.indicator.rawMetric.azureMonitor.dimensions[*].name","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]}]},{"path":"$.spec.indicator.rawMetric.azureMonitor.dimensions[*].value","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]}]},{"path":"$.spec.indicator.rawMetric.azureMonitor.metricNamespace","type":"string","Doc":"","rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.indicator.rawMetric.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]}],"childrenPaths":["$.spec.indicator.rawMetric.azureMonitor.workspace.subscriptionId","$.spec.indicator.rawMetric.azureMonitor.workspace.resourceGroup","$.spec.indicator.rawMetric.azureMonitor.workspace.workspaceId"]},{"path":"$.spec.indicator.rawMetric.azureMonitor.workspace.subscriptionId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","conditions":["none of the objectives is of composite type","dataType is 'logs'"],"examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.indicator.rawMetric.azureMonitor.workspace.resourceGroup","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-zA-Z0-9-._()]+$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.indicator.rawMetric.azureMonitor.workspace.workspaceId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","conditions":["none of the objectives is of composite type","dataType is 'logs'"],"examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.indicator.rawMetric.azureMonitor.kqlQuery","type":"string","Doc":"","rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"string must match regular expression: '(?m)\\bn9_time\\b'","details":"n9_time is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","dataType is 'logs'"]},{"description":"string must match regular expression: '(?m)\\bn9_value\\b'","details":"n9_value is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.indicator.rawMetric.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.indicator.rawMetric.generic.query"]},{"path":"$.spec.indicator.rawMetric.generic.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.spec.indicator.rawMetric.honeycomb.calculation","$.spec.indicator.rawMetric.honeycomb.attribute"]},{"path":"$.spec.indicator.rawMetric.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true,"values":["CONCURRENCY","COUNT","SUM","AVG","COUNT_DISTINCT","MAX","MIN","P001","P01","P05","P10","P25","P50","P75","P90","P95","P99","P999","RATE_AVG","RATE_SUM","RATE_MAX"],"rules":[{"description":"must be one of: CONCURRENCY, COUNT, SUM, AVG, COUNT_DISTINCT, MAX, MIN, P001, P01, P05, P10, P25, P50, P75, P90, P95, P99, P999, RATE_AVG, RATE_SUM, RATE_MAX","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.honeycomb.attribute","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type"]},{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","rules":[{"description":"","conditions":["none of the objectives is of composite type",""]},{"description":"","conditions":["none of the objectives is of composite type",""]}],"childrenPaths":["$.spec.indicator.rawMetric.logicMonitor.queryType","$.spec.indicator.rawMetric.logicMonitor.line","$.spec.indicator.rawMetric.logicMonitor.deviceDataSourceInstanceId","$.spec.indicator.rawMetric.logicMonitor.graphId","$.spec.indicator.rawMetric.logicMonitor.websiteId","$.spec.indicator.rawMetric.logicMonitor.checkpointId","$.spec.indicator.rawMetric.logicMonitor.graphName"]},{"path":"$.spec.indicator.rawMetric.logicMonitor.queryType","type":"string","Doc":"","values":["device_metrics","website_metrics"],"rules":[{"description":"must be one of: device_metrics, website_metrics","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.logicMonitor.line","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.indicator.rawMetric.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.indicator.rawMetric.logicMonitor.graphId","type":"int","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.indicator.rawMetric.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.indicator.rawMetric.logicMonitor.checkpointId","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.indicator.rawMetric.logicMonitor.graphName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.indicator.rawMetric.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.spec.indicator.rawMetric.azurePrometheus.promql"]},{"path":"$.spec.indicator.rawMetric.azurePrometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.budgetingMethod","type":"string","Doc":"","values":["Occurrences","Timeslices"],"rules":[{"description":"must be one of: Occurrences, Timeslices","errorCode":"one_of"}]},{"path":"$.spec.objectives","type":"[]Objective","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"length must be between 1 and 1","errorCode":"slice_length","conditions":["at least one composite objective is defined"]},{"description":"length must be greater than or equal to 1","errorCode":"slice_min_length","conditions":["none of the objectives is of composite type"]},{"description":"elements must be unique according to the following constraints: objectives[*].value must be different for each objective","errorCode":"slice_unique","conditions":["none of the objectives is of composite type"]},{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*]","type":"Objective","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"Objective represents single objective for SLO, for internal usage.","childrenPaths":["$.spec.objectives[*].displayName","$.spec.objectives[*].value","$.spec.objectives[*].name","$.spec.objectives[*].target","$.spec.objectives[*].timeSliceTarget","$.spec.objectives[*].countMetrics","$.spec.objectives[*].rawMetric","$.spec.objectives[*].composite","$.spec.objectives[*].op","$.spec.objectives[*].primary"]},{"path":"$.spec.objectives[*].displayName","type":"string","Doc":"","isOptional":true,"rules":[{"description":"length must be less than or equal to 63","errorCode":"string_max_length","conditions":["at least one composite objective is defined"]},{"description":"length must be less than or equal to 63","errorCode":"string_max_length","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].value","type":"float64","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","rawMetric is defined"]}]},{"path":"$.spec.objectives[*].name","type":"string","Doc":"","isOptional":true,"rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","conditions":["at least one composite objective is defined"],"examples":["my-name","123-abc"]},{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","conditions":["none of the objectives is of composite type"],"examples":["my-name","123-abc"]}]},{"path":"$.spec.objectives[*].target","type":"float64","Doc":"\u003c!-- Go struct field and type names renaming budgetTarget to target has been postponed after GA as requested\nin PC-1240. --\u003e","rules":[{"description":"should be greater than or equal to '0'","errorCode":"greater_than_or_equal_to","conditions":["none of the objectives is of composite type"]},{"description":"should be less than '1'","errorCode":"less_than","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].timeSliceTarget","type":"float64","Doc":"","isOptional":true,"rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type"]},{"description":"should be less than or equal to '1'","errorCode":"less_than_or_equal_to","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].countMetrics","type":"CountMetricsSpec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CountMetricsSpec represents set of two time series of good and total counts","rules":[{"description":"properties are mutually exclusive: goodTotal, total","errorCode":"mutually_exclusive","conditions":["none of the objectives is of composite type"]},{"description":"properties are mutually exclusive: bad, good","errorCode":"mutually_exclusive","conditions":["none of the objectives is of composite type",""]},{"description":"","errorCode":"not_equal_to","conditions":["none of the objectives is of composite type","","countMetrics is azureMonitor"]},{"description":"","errorCode":"not_equal_to","conditions":["none of the objectives is of composite type","","countMetric is appDynamics"]},{"description":"","errorCode":"equal_to","conditions":["none of the objectives is of composite type","","countMetrics is lightstep"]},{"description":"","errorCode":"equal_to","conditions":["none of the objectives is of composite type","","countMetrics is pingdom"]},{"description":"","errorCode":"equal_to","conditions":["none of the objectives is of composite type","","countMetrics is pingdom"]},{"description":"","errorCode":"equal_to","conditions":["none of the objectives is of composite type","","countMetrics is sumoLogic"]},{"description":"","errorCode":"equal_to","conditions":["none of the objectives is of composite type","","countMetrics is sumoLogic"]},{"description":"","errorCode":"equal_to","conditions":["none of the objectives is of composite type","","countMetrics is instana"]},{"description":"","errorCode":"equal_to","conditions":["none of the objectives is of composite type","","countMetrics is redshift"]},{"description":"","errorCode":"equal_to","conditions":["none of the objectives is of composite type","","countMetrics is bigQuery"]},{"description":"","errorCode":"not_equal_to","conditions":["none of the objectives is of composite type","","countMetrics is GCM"]},{"description":"","errorCode":"not_equal_to","conditions":["none of the objectives is of composite type","","countMetrics is logicMonitor"]},{"description":"properties are mutually exclusive: bad, good, goodTotal","errorCode":"mutually_exclusive","conditions":["none of the objectives is of composite type",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.incremental","$.spec.objectives[*].countMetrics.good","$.spec.objectives[*].countMetrics.bad","$.spec.objectives[*].countMetrics.total","$.spec.objectives[*].countMetrics.goodTotal"]},{"path":"$.spec.objectives[*].countMetrics.incremental","type":"bool","Doc":"","isOptional":true,"values":["false"],"rules":[{"description":"should be equal to 'false'","errorCode":"equal_to","conditions":["none of the objectives is of composite type","","countMetrics is lightstep"]},{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].countMetrics.good","type":"MetricSpec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"MetricSpec defines single time series obtained from data source","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.good.prometheus","$.spec.objectives[*].countMetrics.good.datadog","$.spec.objectives[*].countMetrics.good.newRelic","$.spec.objectives[*].countMetrics.good.appDynamics","$.spec.objectives[*].countMetrics.good.splunk","$.spec.objectives[*].countMetrics.good.lightstep","$.spec.objectives[*].countMetrics.good.splunkObservability","$.spec.objectives[*].countMetrics.good.dynatrace","$.spec.objectives[*].countMetrics.good.elasticsearch","$.spec.objectives[*].countMetrics.good.thousandEyes","$.spec.objectives[*].countMetrics.good.graphite","$.spec.objectives[*].countMetrics.good.bigQuery","$.spec.objectives[*].countMetrics.good.opentsdb","$.spec.objectives[*].countMetrics.good.grafanaLoki","$.spec.objectives[*].countMetrics.good.cloudWatch","$.spec.objectives[*].countMetrics.good.pingdom","$.spec.objectives[*].countMetrics.good.amazonPrometheus","$.spec.objectives[*].countMetrics.good.redshift","$.spec.objectives[*].countMetrics.good.sumoLogic","$.spec.objectives[*].countMetrics.good.instana","$.spec.objectives[*].countMetrics.good.influxdb","$.spec.objectives[*].countMetrics.good.gcm","$.spec.objectives[*].countMetrics.good.azureMonitor","$.spec.objectives[*].countMetrics.good.generic","$.spec.objectives[*].countMetrics.good.honeycomb","$.spec.objectives[*].countMetrics.good.logicMonitor","$.spec.objectives[*].countMetrics.good.azurePrometheus"]},{"path":"$.spec.objectives[*].countMetrics.good.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.spec.objectives[*].countMetrics.good.prometheus.promql"]},{"path":"$.spec.objectives[*].countMetrics.good.prometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.spec.objectives[*].countMetrics.good.datadog.query"]},{"path":"$.spec.objectives[*].countMetrics.good.datadog.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.spec.objectives[*].countMetrics.good.newRelic.nrql"]},{"path":"$.spec.objectives[*].countMetrics.good.newRelic.nrql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]},{"description":"string must not match regular expression: '(?i)[\\n\\s](since|until)([\\n\\s]|$)'","details":"query must not contain 'since' or 'until' keywords (case insensitive)","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.spec.objectives[*].countMetrics.good.appDynamics.applicationName","$.spec.objectives[*].countMetrics.good.appDynamics.metricPath"]},{"path":"$.spec.objectives[*].countMetrics.good.appDynamics.applicationName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.appDynamics.metricPath","type":"string","Doc":"","rules":[{"description":"","errorCode":"app_dynamics_wildcard_not_supported","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.spec.objectives[*].countMetrics.good.splunk.query"]},{"path":"$.spec.objectives[*].countMetrics.good.splunk.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]},{"description":"string must contain the following substrings: 'n9time', 'n9value'","errorCode":"string_contains","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: '(\\bindex\\s*=.+)|(\"\\bindex\"\\s*=.+)'","details":"query has to contain index=\u003cNAME\u003e or \"index\"=\u003cNAME\u003e","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""],"examples":["index=svc-events","\"index\"=svc-events"]}]},{"path":"$.spec.objectives[*].countMetrics.good.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.spec.objectives[*].countMetrics.good.lightstep.streamId","$.spec.objectives[*].countMetrics.good.lightstep.typeOfData","$.spec.objectives[*].countMetrics.good.lightstep.percentile","$.spec.objectives[*].countMetrics.good.lightstep.uql"]},{"path":"$.spec.objectives[*].countMetrics.good.lightstep.streamId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.lightstep.typeOfData","type":"string","Doc":"","values":["good","metric"],"rules":[{"description":"must be one of: good, metric","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.lightstep.percentile","type":"float64","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"should be less than or equal to '99.99'","errorCode":"less_than_or_equal_to","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.lightstep.uql","type":"string","Doc":"","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"string must not match regular expression: '((spans_sample|assemble)\\s+[a-z\\d.])'","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.spec.objectives[*].countMetrics.good.splunkObservability.program"]},{"path":"$.spec.objectives[*].countMetrics.good.splunkObservability.program","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.spec.objectives[*].countMetrics.good.dynatrace.metricSelector"]},{"path":"$.spec.objectives[*].countMetrics.good.dynatrace.metricSelector","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.spec.objectives[*].countMetrics.good.elasticsearch.index","$.spec.objectives[*].countMetrics.good.elasticsearch.query"]},{"path":"$.spec.objectives[*].countMetrics.good.elasticsearch.index","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.elasticsearch.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]},{"description":"string must contain the following substrings: '{{.BeginTime}}', '{{.EndTime}}'","errorCode":"string_contains","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.good.thousandEyes.testID","$.spec.objectives[*].countMetrics.good.thousandEyes.testType"]},{"path":"$.spec.objectives[*].countMetrics.good.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.thousandEyes.testType","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.spec.objectives[*].countMetrics.good.graphite.metricPath"]},{"path":"$.spec.objectives[*].countMetrics.good.graphite.metricPath","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]},{"description":"string must not match regular expression: '\\*'","details":"wildcards are not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must not match regular expression: '\\[[^.]*\\]'","details":"character list or range is not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","",""],"examples":["[a-z0-9]"]},{"description":"string must not match regular expression: '{[^.]*}'","details":"value list is not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","",""],"examples":["{user,system,iowait}"]}]},{"path":"$.spec.objectives[*].countMetrics.good.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.spec.objectives[*].countMetrics.good.bigQuery.query","$.spec.objectives[*].countMetrics.good.bigQuery.projectId","$.spec.objectives[*].countMetrics.good.bigQuery.location"]},{"path":"$.spec.objectives[*].countMetrics.good.bigQuery.query","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '\\bn9date\\b'","details":"must contain 'n9date'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: '\\bn9value\\b'","details":"must contain 'n9value'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: 'DATETIME\\(\\s*@n9date_from\\s*\\)'","details":"must have DATETIME placeholder with '@n9date_from'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: 'DATETIME\\(\\s*@n9date_to\\s*\\)'","details":"must have DATETIME placeholder with '@n9date_to'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.bigQuery.projectId","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.bigQuery.location","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.spec.objectives[*].countMetrics.good.opentsdb.query"]},{"path":"$.spec.objectives[*].countMetrics.good.opentsdb.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.spec.objectives[*].countMetrics.good.grafanaLoki.logql"]},{"path":"$.spec.objectives[*].countMetrics.good.grafanaLoki.logql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","rules":[{"description":"","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.good.cloudWatch.region","$.spec.objectives[*].countMetrics.good.cloudWatch.namespace","$.spec.objectives[*].countMetrics.good.cloudWatch.metricName","$.spec.objectives[*].countMetrics.good.cloudWatch.stat","$.spec.objectives[*].countMetrics.good.cloudWatch.dimensions","$.spec.objectives[*].countMetrics.good.cloudWatch.dimensions[*]","$.spec.objectives[*].countMetrics.good.cloudWatch.accountId","$.spec.objectives[*].countMetrics.good.cloudWatch.sql","$.spec.objectives[*].countMetrics.good.cloudWatch.json"]},{"path":"$.spec.objectives[*].countMetrics.good.cloudWatch.region","type":"string","Doc":"","values":["us-east-2","us-east-1","us-west-1","us-west-2","af-south-1","ap-east-1","ap-south-1","ap-northeast-3","ap-northeast-2","ap-southeast-1","ap-southeast-2","ap-northeast-1","ca-central-1","cn-north-1","cn-northwest-1","eu-central-1","eu-west-1","eu-west-2","eu-south-1","eu-west-3","eu-north-1","me-south-1","sa-east-1"],"rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","",""]},{"description":"must be one of: us-east-2, us-east-1, us-west-1, us-west-2, af-south-1, ap-east-1, ap-south-1, ap-northeast-3, ap-northeast-2, ap-southeast-1, ap-southeast-2, ap-northeast-1, ca-central-1, cn-north-1, cn-northwest-1, eu-central-1, eu-west-1, eu-west-2, eu-south-1, eu-west-3, eu-north-1, me-south-1, sa-east-1","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.cloudWatch.namespace","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"string must match regular expression: '^[0-9A-Za-z.\\-_/#:]{1,255}$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.cloudWatch.metricName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.cloudWatch.stat","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"string must match regular expression: '^((SampleCount)|(Sum)|(Average)|(Minimum)|(Maximum)|(IQM)|((((p)|(tm)|(wm)|(tc)|(ts)))((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?))|((((TM)|(WM)|(TC)|(TS)))\\(((((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%):((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%))|(((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%):)|(:((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):)|(:(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?)))\\))|((((PR)))\\((((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):)|(:(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?)))\\)))$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"],"examples":["SampleCount","Sum","Average","Minimum","Maximum","IQM","p10","p99","tm98","wm99","tc10","ts30","TM(10%:98%)","WM(10%:15%)","TC(10%:20%)","TS(10%:90%)"]}]},{"path":"$.spec.objectives[*].countMetrics.good.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"length must be less than or equal to 10","errorCode":"slice_max_length","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"elements must be unique","details":"dimension 'name' must be unique for all dimensions","errorCode":"slice_unique","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.spec.objectives[*].countMetrics.good.cloudWatch.dimensions[*].name","$.spec.objectives[*].countMetrics.good.cloudWatch.dimensions[*].value"]},{"path":"$.spec.objectives[*].countMetrics.good.cloudWatch.dimensions[*].name","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.cloudWatch.dimensions[*].value","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.cloudWatch.accountId","type":"string","Doc":"","isOptional":true,"rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"string must match regular expression: '^\\d{12}$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"],"examples":["123456789012"]}]},{"path":"$.spec.objectives[*].countMetrics.good.cloudWatch.sql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.cloudWatch.json","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.spec.objectives[*].countMetrics.good.pingdom.checkId","$.spec.objectives[*].countMetrics.good.pingdom.checkType","$.spec.objectives[*].countMetrics.good.pingdom.status"]},{"path":"$.spec.objectives[*].countMetrics.good.pingdom.checkId","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: '^(?:|\\d+)$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.pingdom.checkType","type":"string","Doc":"","values":["uptime","transaction"],"rules":[{"description":"must be one of: uptime, transaction","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.pingdom.status","type":"string","Doc":"","isOptional":true,"rules":[{"description":"","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is required but was empty","errorCode":"required","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.spec.objectives[*].countMetrics.good.amazonPrometheus.promql"]},{"path":"$.spec.objectives[*].countMetrics.good.amazonPrometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.spec.objectives[*].countMetrics.good.redshift.region","$.spec.objectives[*].countMetrics.good.redshift.clusterId","$.spec.objectives[*].countMetrics.good.redshift.databaseName","$.spec.objectives[*].countMetrics.good.redshift.query"]},{"path":"$.spec.objectives[*].countMetrics.good.redshift.region","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.redshift.clusterId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.redshift.databaseName","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.redshift.query","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^SELECT[\\s\\S]*\\bn9date\\b[\\s\\S]*FROM'","details":"must contain 'n9date' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: '^SELECT\\s[\\s\\S]*\\bn9value\\b[\\s\\S]*\\sFROM'","details":"must contain 'n9value' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: 'WHERE[\\s\\S]*\\W:n9date_from\\b[\\s\\S]*'","details":"must filter by ':n9date_from' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: 'WHERE[\\s\\S]*\\W:n9date_to\\b[\\s\\S]*'","details":"must filter by ':n9date_to' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.spec.objectives[*].countMetrics.good.sumoLogic.type","$.spec.objectives[*].countMetrics.good.sumoLogic.query","$.spec.objectives[*].countMetrics.good.sumoLogic.quantization","$.spec.objectives[*].countMetrics.good.sumoLogic.rollup"]},{"path":"$.spec.objectives[*].countMetrics.good.sumoLogic.type","type":"string","Doc":"","values":["logs","metrics"],"rules":[{"description":"must be one of: logs, metrics","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.sumoLogic.query","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"string must match regular expression: '(?m)\\bn9_value\\b'","details":"n9_value is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"string must match regular expression: '(?m)\\bby\\b'","details":"aggregation function is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.sumoLogic.quantization","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.sumoLogic.rollup","type":"string","Doc":"","values":["Avg","Sum","Min","Max","Count","None"],"rules":[{"description":"must be one of: Avg, Sum, Min, Max, Count, None","errorCode":"one_of","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","isOptional":true,"rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.good.instana.metricType","$.spec.objectives[*].countMetrics.good.instana.infrastructure","$.spec.objectives[*].countMetrics.good.instana.application"]},{"path":"$.spec.objectives[*].countMetrics.good.instana.metricType","type":"string","Doc":"","values":["infrastructure"],"rules":[{"description":"should be equal to 'infrastructure'","errorCode":"equal_to","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.good.instana.infrastructure.metricRetrievalMethod","$.spec.objectives[*].countMetrics.good.instana.infrastructure.query","$.spec.objectives[*].countMetrics.good.instana.infrastructure.snapshotId","$.spec.objectives[*].countMetrics.good.instana.infrastructure.metricId","$.spec.objectives[*].countMetrics.good.instana.infrastructure.pluginId"]},{"path":"$.spec.objectives[*].countMetrics.good.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":"","values":["query","snapshot"],"rules":[{"description":"must be one of: query, snapshot","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.instana.infrastructure.metricId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.instana.infrastructure.pluginId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.good.instana.application.metricId","$.spec.objectives[*].countMetrics.good.instana.application.aggregation","$.spec.objectives[*].countMetrics.good.instana.application.groupBy","$.spec.objectives[*].countMetrics.good.instana.application.apiQuery","$.spec.objectives[*].countMetrics.good.instana.application.includeInternal","$.spec.objectives[*].countMetrics.good.instana.application.includeSynthetic"]},{"path":"$.spec.objectives[*].countMetrics.good.instana.application.metricId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.instana.application.aggregation","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].countMetrics.good.instana.application.groupBy.tag","$.spec.objectives[*].countMetrics.good.instana.application.groupBy.tagEntity","$.spec.objectives[*].countMetrics.good.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.spec.objectives[*].countMetrics.good.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.spec.objectives[*].countMetrics.good.influxdb.query"]},{"path":"$.spec.objectives[*].countMetrics.good.influxdb.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: '\\s*bucket\\s*:\\s*\".+\"\\s*'","details":"must contain a bucket name","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: '\\s*range\\s*\\(\\s*start\\s*:\\s*time\\s*\\(\\s*v\\s*:\\s*params\\.n9time_start\\s*\\)\\s*,\\s*stop\\s*:\\s*time\\s*\\(\\s*v\\s*:\\s*params\\.n9time_stop\\s*\\)\\s*\\)'","details":"must contain both 'params.n9time_start' and 'params.n9time_stop'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","rules":[{"description":"","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.good.gcm.query","$.spec.objectives[*].countMetrics.good.gcm.projectId","$.spec.objectives[*].countMetrics.good.gcm.promql"]},{"path":"$.spec.objectives[*].countMetrics.good.gcm.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.gcm.projectId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.gcm.promql","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.spec.objectives[*].countMetrics.good.azureMonitor.dataType","$.spec.objectives[*].countMetrics.good.azureMonitor.resourceId","$.spec.objectives[*].countMetrics.good.azureMonitor.metricName","$.spec.objectives[*].countMetrics.good.azureMonitor.aggregation","$.spec.objectives[*].countMetrics.good.azureMonitor.dimensions","$.spec.objectives[*].countMetrics.good.azureMonitor.dimensions[*]","$.spec.objectives[*].countMetrics.good.azureMonitor.metricNamespace","$.spec.objectives[*].countMetrics.good.azureMonitor.workspace","$.spec.objectives[*].countMetrics.good.azureMonitor.kqlQuery"]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.dataType","type":"string","Doc":"","values":["metrics","logs"],"rules":[{"description":"must be one of: metrics, logs","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.resourceId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^/subscriptions/[a-zA-Z0-9-]+/resourceGroups/[a-zA-Z0-9-._()]+/providers/[a-zA-Z0-9-.()_]+/[a-zA-Z0-9-_()]+/[a-zA-Z0-9-_()]+$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.metricName","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.aggregation","type":"string","Doc":"","values":["Avg","Min","Max","Count","Sum"],"rules":[{"description":"must be one of: Avg, Min, Max, Count, Sum","errorCode":"one_of","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"elements must be unique","details":"dimension 'name' must be unique for all dimensions","errorCode":"slice_unique","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.spec.objectives[*].countMetrics.good.azureMonitor.dimensions[*].name","$.spec.objectives[*].countMetrics.good.azureMonitor.dimensions[*].value"]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.dimensions[*].name","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.dimensions[*].value","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.metricNamespace","type":"string","Doc":"","rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}],"childrenPaths":["$.spec.objectives[*].countMetrics.good.azureMonitor.workspace.subscriptionId","$.spec.objectives[*].countMetrics.good.azureMonitor.workspace.resourceGroup","$.spec.objectives[*].countMetrics.good.azureMonitor.workspace.workspaceId"]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.workspace.subscriptionId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"],"examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.workspace.resourceGroup","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-zA-Z0-9-._()]+$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.workspace.workspaceId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"],"examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.objectives[*].countMetrics.good.azureMonitor.kqlQuery","type":"string","Doc":"","rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"string must match regular expression: '(?m)\\bn9_time\\b'","details":"n9_time is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"string must match regular expression: '(?m)\\bn9_value\\b'","details":"n9_value is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].countMetrics.good.generic.query"]},{"path":"$.spec.objectives[*].countMetrics.good.generic.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.spec.objectives[*].countMetrics.good.honeycomb.calculation","$.spec.objectives[*].countMetrics.good.honeycomb.attribute"]},{"path":"$.spec.objectives[*].countMetrics.good.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true,"values":["CONCURRENCY","COUNT","SUM","AVG","COUNT_DISTINCT","MAX","MIN","P001","P01","P05","P10","P25","P50","P75","P90","P95","P99","P999","RATE_AVG","RATE_SUM","RATE_MAX"],"rules":[{"description":"must be one of: CONCURRENCY, COUNT, SUM, AVG, COUNT_DISTINCT, MAX, MIN, P001, P01, P05, P10, P25, P50, P75, P90, P95, P99, P999, RATE_AVG, RATE_SUM, RATE_MAX","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.honeycomb.attribute","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","",""]},{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","rules":[{"description":"","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]},{"description":"","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}],"childrenPaths":["$.spec.objectives[*].countMetrics.good.logicMonitor.queryType","$.spec.objectives[*].countMetrics.good.logicMonitor.line","$.spec.objectives[*].countMetrics.good.logicMonitor.deviceDataSourceInstanceId","$.spec.objectives[*].countMetrics.good.logicMonitor.graphId","$.spec.objectives[*].countMetrics.good.logicMonitor.websiteId","$.spec.objectives[*].countMetrics.good.logicMonitor.checkpointId","$.spec.objectives[*].countMetrics.good.logicMonitor.graphName"]},{"path":"$.spec.objectives[*].countMetrics.good.logicMonitor.queryType","type":"string","Doc":"","values":["device_metrics","website_metrics"],"rules":[{"description":"must be one of: device_metrics, website_metrics","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.logicMonitor.line","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.good.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.logicMonitor.graphId","type":"int","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.logicMonitor.checkpointId","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.logicMonitor.graphName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.good.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.spec.objectives[*].countMetrics.good.azurePrometheus.promql"]},{"path":"$.spec.objectives[*].countMetrics.good.azurePrometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad","type":"MetricSpec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"MetricSpec defines single time series obtained from data source","isOptional":true,"rules":[{"description":"","errorCode":"bad_over_total_disabled","conditions":["none of the objectives is of composite type","",""]},{"description":"","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.bad.prometheus","$.spec.objectives[*].countMetrics.bad.datadog","$.spec.objectives[*].countMetrics.bad.newRelic","$.spec.objectives[*].countMetrics.bad.appDynamics","$.spec.objectives[*].countMetrics.bad.splunk","$.spec.objectives[*].countMetrics.bad.lightstep","$.spec.objectives[*].countMetrics.bad.splunkObservability","$.spec.objectives[*].countMetrics.bad.dynatrace","$.spec.objectives[*].countMetrics.bad.elasticsearch","$.spec.objectives[*].countMetrics.bad.thousandEyes","$.spec.objectives[*].countMetrics.bad.graphite","$.spec.objectives[*].countMetrics.bad.bigQuery","$.spec.objectives[*].countMetrics.bad.opentsdb","$.spec.objectives[*].countMetrics.bad.grafanaLoki","$.spec.objectives[*].countMetrics.bad.cloudWatch","$.spec.objectives[*].countMetrics.bad.pingdom","$.spec.objectives[*].countMetrics.bad.amazonPrometheus","$.spec.objectives[*].countMetrics.bad.redshift","$.spec.objectives[*].countMetrics.bad.sumoLogic","$.spec.objectives[*].countMetrics.bad.instana","$.spec.objectives[*].countMetrics.bad.influxdb","$.spec.objectives[*].countMetrics.bad.gcm","$.spec.objectives[*].countMetrics.bad.azureMonitor","$.spec.objectives[*].countMetrics.bad.generic","$.spec.objectives[*].countMetrics.bad.honeycomb","$.spec.objectives[*].countMetrics.bad.logicMonitor","$.spec.objectives[*].countMetrics.bad.azurePrometheus"]},{"path":"$.spec.objectives[*].countMetrics.bad.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.spec.objectives[*].countMetrics.bad.prometheus.promql"]},{"path":"$.spec.objectives[*].countMetrics.bad.prometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.spec.objectives[*].countMetrics.bad.datadog.query"]},{"path":"$.spec.objectives[*].countMetrics.bad.datadog.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.spec.objectives[*].countMetrics.bad.newRelic.nrql"]},{"path":"$.spec.objectives[*].countMetrics.bad.newRelic.nrql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]},{"description":"string must not match regular expression: '(?i)[\\n\\s](since|until)([\\n\\s]|$)'","details":"query must not contain 'since' or 'until' keywords (case insensitive)","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.spec.objectives[*].countMetrics.bad.appDynamics.applicationName","$.spec.objectives[*].countMetrics.bad.appDynamics.metricPath"]},{"path":"$.spec.objectives[*].countMetrics.bad.appDynamics.applicationName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.appDynamics.metricPath","type":"string","Doc":"","rules":[{"description":"","errorCode":"app_dynamics_wildcard_not_supported","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.spec.objectives[*].countMetrics.bad.splunk.query"]},{"path":"$.spec.objectives[*].countMetrics.bad.splunk.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]},{"description":"string must contain the following substrings: 'n9time', 'n9value'","errorCode":"string_contains","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: '(\\bindex\\s*=.+)|(\"\\bindex\"\\s*=.+)'","details":"query has to contain index=\u003cNAME\u003e or \"index\"=\u003cNAME\u003e","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""],"examples":["index=svc-events","\"index\"=svc-events"]}]},{"path":"$.spec.objectives[*].countMetrics.bad.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.spec.objectives[*].countMetrics.bad.lightstep.streamId","$.spec.objectives[*].countMetrics.bad.lightstep.typeOfData","$.spec.objectives[*].countMetrics.bad.lightstep.percentile","$.spec.objectives[*].countMetrics.bad.lightstep.uql"]},{"path":"$.spec.objectives[*].countMetrics.bad.lightstep.streamId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]},{"description":"","conditions":["none of the objectives is of composite type","","",""]},{"description":"","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.lightstep.typeOfData","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.lightstep.percentile","type":"float64","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type","","",""]},{"description":"should be less than or equal to '99.99'","errorCode":"less_than_or_equal_to","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.lightstep.uql","type":"string","Doc":"","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]},{"description":"string must not match regular expression: '((spans_sample|assemble)\\s+[a-z\\d.])'","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.spec.objectives[*].countMetrics.bad.splunkObservability.program"]},{"path":"$.spec.objectives[*].countMetrics.bad.splunkObservability.program","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.spec.objectives[*].countMetrics.bad.dynatrace.metricSelector"]},{"path":"$.spec.objectives[*].countMetrics.bad.dynatrace.metricSelector","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.spec.objectives[*].countMetrics.bad.elasticsearch.index","$.spec.objectives[*].countMetrics.bad.elasticsearch.query"]},{"path":"$.spec.objectives[*].countMetrics.bad.elasticsearch.index","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.elasticsearch.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]},{"description":"string must contain the following substrings: '{{.BeginTime}}', '{{.EndTime}}'","errorCode":"string_contains","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.bad.thousandEyes.testID","$.spec.objectives[*].countMetrics.bad.thousandEyes.testType"]},{"path":"$.spec.objectives[*].countMetrics.bad.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.thousandEyes.testType","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.spec.objectives[*].countMetrics.bad.graphite.metricPath"]},{"path":"$.spec.objectives[*].countMetrics.bad.graphite.metricPath","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]},{"description":"string must not match regular expression: '\\*'","details":"wildcards are not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must not match regular expression: '\\[[^.]*\\]'","details":"character list or range is not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","",""],"examples":["[a-z0-9]"]},{"description":"string must not match regular expression: '{[^.]*}'","details":"value list is not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","",""],"examples":["{user,system,iowait}"]}]},{"path":"$.spec.objectives[*].countMetrics.bad.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.spec.objectives[*].countMetrics.bad.bigQuery.query","$.spec.objectives[*].countMetrics.bad.bigQuery.projectId","$.spec.objectives[*].countMetrics.bad.bigQuery.location"]},{"path":"$.spec.objectives[*].countMetrics.bad.bigQuery.query","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '\\bn9date\\b'","details":"must contain 'n9date'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: '\\bn9value\\b'","details":"must contain 'n9value'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: 'DATETIME\\(\\s*@n9date_from\\s*\\)'","details":"must have DATETIME placeholder with '@n9date_from'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: 'DATETIME\\(\\s*@n9date_to\\s*\\)'","details":"must have DATETIME placeholder with '@n9date_to'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.bigQuery.projectId","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.bigQuery.location","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.spec.objectives[*].countMetrics.bad.opentsdb.query"]},{"path":"$.spec.objectives[*].countMetrics.bad.opentsdb.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.spec.objectives[*].countMetrics.bad.grafanaLoki.logql"]},{"path":"$.spec.objectives[*].countMetrics.bad.grafanaLoki.logql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","rules":[{"description":"","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.bad.cloudWatch.region","$.spec.objectives[*].countMetrics.bad.cloudWatch.namespace","$.spec.objectives[*].countMetrics.bad.cloudWatch.metricName","$.spec.objectives[*].countMetrics.bad.cloudWatch.stat","$.spec.objectives[*].countMetrics.bad.cloudWatch.dimensions","$.spec.objectives[*].countMetrics.bad.cloudWatch.dimensions[*]","$.spec.objectives[*].countMetrics.bad.cloudWatch.accountId","$.spec.objectives[*].countMetrics.bad.cloudWatch.sql","$.spec.objectives[*].countMetrics.bad.cloudWatch.json"]},{"path":"$.spec.objectives[*].countMetrics.bad.cloudWatch.region","type":"string","Doc":"","values":["us-east-2","us-east-1","us-west-1","us-west-2","af-south-1","ap-east-1","ap-south-1","ap-northeast-3","ap-northeast-2","ap-southeast-1","ap-southeast-2","ap-northeast-1","ca-central-1","cn-north-1","cn-northwest-1","eu-central-1","eu-west-1","eu-west-2","eu-south-1","eu-west-3","eu-north-1","me-south-1","sa-east-1"],"rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","",""]},{"description":"must be one of: us-east-2, us-east-1, us-west-1, us-west-2, af-south-1, ap-east-1, ap-south-1, ap-northeast-3, ap-northeast-2, ap-southeast-1, ap-southeast-2, ap-northeast-1, ca-central-1, cn-north-1, cn-northwest-1, eu-central-1, eu-west-1, eu-west-2, eu-south-1, eu-west-3, eu-north-1, me-south-1, sa-east-1","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.cloudWatch.namespace","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","",""]},{"description":"string must match regular expression: '^[0-9A-Za-z.\\-_/#:]{1,255}$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.cloudWatch.metricName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","",""]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.cloudWatch.stat","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","",""]},{"description":"string must match regular expression: '^((SampleCount)|(Sum)|(Average)|(Minimum)|(Maximum)|(IQM)|((((p)|(tm)|(wm)|(tc)|(ts)))((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?))|((((TM)|(WM)|(TC)|(TS)))\\(((((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%):((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%))|(((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%):)|(:((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):)|(:(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?)))\\))|((((PR)))\\((((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):)|(:(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?)))\\)))$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","",""],"examples":["SampleCount","Sum","Average","Minimum","Maximum","IQM","p10","p99","tm98","wm99","tc10","ts30","TM(10%:98%)","WM(10%:15%)","TC(10%:20%)","TS(10%:90%)"]}]},{"path":"$.spec.objectives[*].countMetrics.bad.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"length must be less than or equal to 10","errorCode":"slice_max_length","conditions":["none of the objectives is of composite type","","",""]},{"description":"elements must be unique","details":"dimension 'name' must be unique for all dimensions","errorCode":"slice_unique","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.spec.objectives[*].countMetrics.bad.cloudWatch.dimensions[*].name","$.spec.objectives[*].countMetrics.bad.cloudWatch.dimensions[*].value"]},{"path":"$.spec.objectives[*].countMetrics.bad.cloudWatch.dimensions[*].name","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","",""]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","",""]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.cloudWatch.dimensions[*].value","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","",""]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","",""]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.cloudWatch.accountId","type":"string","Doc":"","isOptional":true,"rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","",""]},{"description":"string must match regular expression: '^\\d{12}$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","",""],"examples":["123456789012"]}]},{"path":"$.spec.objectives[*].countMetrics.bad.cloudWatch.sql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.cloudWatch.json","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.spec.objectives[*].countMetrics.bad.pingdom.checkId","$.spec.objectives[*].countMetrics.bad.pingdom.checkType","$.spec.objectives[*].countMetrics.bad.pingdom.status"]},{"path":"$.spec.objectives[*].countMetrics.bad.pingdom.checkId","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: '^(?:|\\d+)$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.pingdom.checkType","type":"string","Doc":"","values":["uptime","transaction"],"rules":[{"description":"must be one of: uptime, transaction","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.pingdom.status","type":"string","Doc":"","rules":[{"description":"property is required but was empty","errorCode":"required","conditions":["none of the objectives is of composite type","","",""]},{"description":"","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.spec.objectives[*].countMetrics.bad.amazonPrometheus.promql"]},{"path":"$.spec.objectives[*].countMetrics.bad.amazonPrometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.spec.objectives[*].countMetrics.bad.redshift.region","$.spec.objectives[*].countMetrics.bad.redshift.clusterId","$.spec.objectives[*].countMetrics.bad.redshift.databaseName","$.spec.objectives[*].countMetrics.bad.redshift.query"]},{"path":"$.spec.objectives[*].countMetrics.bad.redshift.region","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.redshift.clusterId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.redshift.databaseName","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.redshift.query","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^SELECT[\\s\\S]*\\bn9date\\b[\\s\\S]*FROM'","details":"must contain 'n9date' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: '^SELECT\\s[\\s\\S]*\\bn9value\\b[\\s\\S]*\\sFROM'","details":"must contain 'n9value' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: 'WHERE[\\s\\S]*\\W:n9date_from\\b[\\s\\S]*'","details":"must filter by ':n9date_from' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: 'WHERE[\\s\\S]*\\W:n9date_to\\b[\\s\\S]*'","details":"must filter by ':n9date_to' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.spec.objectives[*].countMetrics.bad.sumoLogic.type","$.spec.objectives[*].countMetrics.bad.sumoLogic.query","$.spec.objectives[*].countMetrics.bad.sumoLogic.quantization","$.spec.objectives[*].countMetrics.bad.sumoLogic.rollup"]},{"path":"$.spec.objectives[*].countMetrics.bad.sumoLogic.type","type":"string","Doc":"","values":["logs","metrics"],"rules":[{"description":"must be one of: logs, metrics","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.sumoLogic.query","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","",""]},{"description":"","conditions":["none of the objectives is of composite type","","",""]},{"description":"string must match regular expression: '(?m)\\bn9_value\\b'","details":"n9_value is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","",""]},{"description":"string must match regular expression: '(?m)\\bby\\b'","details":"aggregation function is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.sumoLogic.quantization","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.sumoLogic.rollup","type":"string","Doc":"","values":["Avg","Sum","Min","Max","Count","None"],"rules":[{"description":"must be one of: Avg, Sum, Min, Max, Count, None","errorCode":"one_of","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","isOptional":true,"rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.bad.instana.metricType","$.spec.objectives[*].countMetrics.bad.instana.infrastructure","$.spec.objectives[*].countMetrics.bad.instana.application"]},{"path":"$.spec.objectives[*].countMetrics.bad.instana.metricType","type":"string","Doc":"","values":["infrastructure"],"rules":[{"description":"should be equal to 'infrastructure'","errorCode":"equal_to","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.bad.instana.infrastructure.metricRetrievalMethod","$.spec.objectives[*].countMetrics.bad.instana.infrastructure.query","$.spec.objectives[*].countMetrics.bad.instana.infrastructure.snapshotId","$.spec.objectives[*].countMetrics.bad.instana.infrastructure.metricId","$.spec.objectives[*].countMetrics.bad.instana.infrastructure.pluginId"]},{"path":"$.spec.objectives[*].countMetrics.bad.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":"","values":["query","snapshot"],"rules":[{"description":"must be one of: query, snapshot","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.instana.infrastructure.metricId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.instana.infrastructure.pluginId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.bad.instana.application.metricId","$.spec.objectives[*].countMetrics.bad.instana.application.aggregation","$.spec.objectives[*].countMetrics.bad.instana.application.groupBy","$.spec.objectives[*].countMetrics.bad.instana.application.apiQuery","$.spec.objectives[*].countMetrics.bad.instana.application.includeInternal","$.spec.objectives[*].countMetrics.bad.instana.application.includeSynthetic"]},{"path":"$.spec.objectives[*].countMetrics.bad.instana.application.metricId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.instana.application.aggregation","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].countMetrics.bad.instana.application.groupBy.tag","$.spec.objectives[*].countMetrics.bad.instana.application.groupBy.tagEntity","$.spec.objectives[*].countMetrics.bad.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.spec.objectives[*].countMetrics.bad.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.spec.objectives[*].countMetrics.bad.influxdb.query"]},{"path":"$.spec.objectives[*].countMetrics.bad.influxdb.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: '\\s*bucket\\s*:\\s*\".+\"\\s*'","details":"must contain a bucket name","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]},{"description":"string must match regular expression: '\\s*range\\s*\\(\\s*start\\s*:\\s*time\\s*\\(\\s*v\\s*:\\s*params\\.n9time_start\\s*\\)\\s*,\\s*stop\\s*:\\s*time\\s*\\(\\s*v\\s*:\\s*params\\.n9time_stop\\s*\\)\\s*\\)'","details":"must contain both 'params.n9time_start' and 'params.n9time_stop'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","rules":[{"description":"","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.bad.gcm.query","$.spec.objectives[*].countMetrics.bad.gcm.projectId","$.spec.objectives[*].countMetrics.bad.gcm.promql"]},{"path":"$.spec.objectives[*].countMetrics.bad.gcm.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.gcm.projectId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.gcm.promql","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.spec.objectives[*].countMetrics.bad.azureMonitor.dataType","$.spec.objectives[*].countMetrics.bad.azureMonitor.resourceId","$.spec.objectives[*].countMetrics.bad.azureMonitor.metricName","$.spec.objectives[*].countMetrics.bad.azureMonitor.aggregation","$.spec.objectives[*].countMetrics.bad.azureMonitor.dimensions","$.spec.objectives[*].countMetrics.bad.azureMonitor.dimensions[*]","$.spec.objectives[*].countMetrics.bad.azureMonitor.metricNamespace","$.spec.objectives[*].countMetrics.bad.azureMonitor.workspace","$.spec.objectives[*].countMetrics.bad.azureMonitor.kqlQuery"]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.dataType","type":"string","Doc":"","values":["metrics","logs"],"rules":[{"description":"must be one of: metrics, logs","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.resourceId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^/subscriptions/[a-zA-Z0-9-]+/resourceGroups/[a-zA-Z0-9-._()]+/providers/[a-zA-Z0-9-.()_]+/[a-zA-Z0-9-_()]+/[a-zA-Z0-9-_()]+$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.metricName","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.aggregation","type":"string","Doc":"","values":["Avg","Min","Max","Count","Sum"],"rules":[{"description":"must be one of: Avg, Min, Max, Count, Sum","errorCode":"one_of","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"elements must be unique","details":"dimension 'name' must be unique for all dimensions","errorCode":"slice_unique","conditions":["none of the objectives is of composite type","","",""]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.spec.objectives[*].countMetrics.bad.azureMonitor.dimensions[*].name","$.spec.objectives[*].countMetrics.bad.azureMonitor.dimensions[*].value"]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.dimensions[*].name","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","",""]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","",""]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.dimensions[*].value","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","",""]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","",""]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.metricNamespace","type":"string","Doc":"","rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.bad.azureMonitor.workspace.subscriptionId","$.spec.objectives[*].countMetrics.bad.azureMonitor.workspace.resourceGroup","$.spec.objectives[*].countMetrics.bad.azureMonitor.workspace.workspaceId"]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.workspace.subscriptionId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","conditions":["none of the objectives is of composite type","","",""],"examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.workspace.resourceGroup","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-zA-Z0-9-._()]+$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.workspace.workspaceId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","conditions":["none of the objectives is of composite type","","",""],"examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.objectives[*].countMetrics.bad.azureMonitor.kqlQuery","type":"string","Doc":"","rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","",""]},{"description":"string must match regular expression: '(?m)\\bn9_time\\b'","details":"n9_time is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","",""]},{"description":"string must match regular expression: '(?m)\\bn9_value\\b'","details":"n9_value is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].countMetrics.bad.generic.query"]},{"path":"$.spec.objectives[*].countMetrics.bad.generic.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.spec.objectives[*].countMetrics.bad.honeycomb.calculation","$.spec.objectives[*].countMetrics.bad.honeycomb.attribute"]},{"path":"$.spec.objectives[*].countMetrics.bad.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true,"values":["CONCURRENCY","COUNT","SUM","AVG","COUNT_DISTINCT","MAX","MIN","P001","P01","P05","P10","P25","P50","P75","P90","P95","P99","P999","RATE_AVG","RATE_SUM","RATE_MAX"],"rules":[{"description":"must be one of: CONCURRENCY, COUNT, SUM, AVG, COUNT_DISTINCT, MAX, MIN, P001, P01, P05, P10, P25, P50, P75, P90, P95, P99, P999, RATE_AVG, RATE_SUM, RATE_MAX","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.honeycomb.attribute","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","",""]},{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","rules":[{"description":"","conditions":["none of the objectives is of composite type","","",""]},{"description":"","conditions":["none of the objectives is of composite type","","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.bad.logicMonitor.queryType","$.spec.objectives[*].countMetrics.bad.logicMonitor.line","$.spec.objectives[*].countMetrics.bad.logicMonitor.deviceDataSourceInstanceId","$.spec.objectives[*].countMetrics.bad.logicMonitor.graphId","$.spec.objectives[*].countMetrics.bad.logicMonitor.websiteId","$.spec.objectives[*].countMetrics.bad.logicMonitor.checkpointId","$.spec.objectives[*].countMetrics.bad.logicMonitor.graphName"]},{"path":"$.spec.objectives[*].countMetrics.bad.logicMonitor.queryType","type":"string","Doc":"","values":["device_metrics","website_metrics"],"rules":[{"description":"must be one of: device_metrics, website_metrics","errorCode":"one_of","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.logicMonitor.line","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.logicMonitor.graphId","type":"int","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.logicMonitor.checkpointId","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.logicMonitor.graphName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","",""]}]},{"path":"$.spec.objectives[*].countMetrics.bad.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.spec.objectives[*].countMetrics.bad.azurePrometheus.promql"]},{"path":"$.spec.objectives[*].countMetrics.bad.azurePrometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.total","type":"MetricSpec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"MetricSpec defines single time series obtained from data source","rules":[{"description":"","conditions":["none of the objectives is of composite type",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.total.prometheus","$.spec.objectives[*].countMetrics.total.datadog","$.spec.objectives[*].countMetrics.total.newRelic","$.spec.objectives[*].countMetrics.total.appDynamics","$.spec.objectives[*].countMetrics.total.splunk","$.spec.objectives[*].countMetrics.total.lightstep","$.spec.objectives[*].countMetrics.total.splunkObservability","$.spec.objectives[*].countMetrics.total.dynatrace","$.spec.objectives[*].countMetrics.total.elasticsearch","$.spec.objectives[*].countMetrics.total.thousandEyes","$.spec.objectives[*].countMetrics.total.graphite","$.spec.objectives[*].countMetrics.total.bigQuery","$.spec.objectives[*].countMetrics.total.opentsdb","$.spec.objectives[*].countMetrics.total.grafanaLoki","$.spec.objectives[*].countMetrics.total.cloudWatch","$.spec.objectives[*].countMetrics.total.pingdom","$.spec.objectives[*].countMetrics.total.amazonPrometheus","$.spec.objectives[*].countMetrics.total.redshift","$.spec.objectives[*].countMetrics.total.sumoLogic","$.spec.objectives[*].countMetrics.total.instana","$.spec.objectives[*].countMetrics.total.influxdb","$.spec.objectives[*].countMetrics.total.gcm","$.spec.objectives[*].countMetrics.total.azureMonitor","$.spec.objectives[*].countMetrics.total.generic","$.spec.objectives[*].countMetrics.total.honeycomb","$.spec.objectives[*].countMetrics.total.logicMonitor","$.spec.objectives[*].countMetrics.total.azurePrometheus"]},{"path":"$.spec.objectives[*].countMetrics.total.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.spec.objectives[*].countMetrics.total.prometheus.promql"]},{"path":"$.spec.objectives[*].countMetrics.total.prometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.spec.objectives[*].countMetrics.total.datadog.query"]},{"path":"$.spec.objectives[*].countMetrics.total.datadog.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.spec.objectives[*].countMetrics.total.newRelic.nrql"]},{"path":"$.spec.objectives[*].countMetrics.total.newRelic.nrql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]},{"description":"string must not match regular expression: '(?i)[\\n\\s](since|until)([\\n\\s]|$)'","details":"query must not contain 'since' or 'until' keywords (case insensitive)","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.spec.objectives[*].countMetrics.total.appDynamics.applicationName","$.spec.objectives[*].countMetrics.total.appDynamics.metricPath"]},{"path":"$.spec.objectives[*].countMetrics.total.appDynamics.applicationName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.appDynamics.metricPath","type":"string","Doc":"","rules":[{"description":"","errorCode":"app_dynamics_wildcard_not_supported","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.spec.objectives[*].countMetrics.total.splunk.query"]},{"path":"$.spec.objectives[*].countMetrics.total.splunk.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]},{"description":"string must contain the following substrings: 'n9time', 'n9value'","errorCode":"string_contains","conditions":["none of the objectives is of composite type",""]},{"description":"string must match regular expression: '(\\bindex\\s*=.+)|(\"\\bindex\"\\s*=.+)'","details":"query has to contain index=\u003cNAME\u003e or \"index\"=\u003cNAME\u003e","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""],"examples":["index=svc-events","\"index\"=svc-events"]}]},{"path":"$.spec.objectives[*].countMetrics.total.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.spec.objectives[*].countMetrics.total.lightstep.streamId","$.spec.objectives[*].countMetrics.total.lightstep.typeOfData","$.spec.objectives[*].countMetrics.total.lightstep.percentile","$.spec.objectives[*].countMetrics.total.lightstep.uql"]},{"path":"$.spec.objectives[*].countMetrics.total.lightstep.streamId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","typeOfData is 'latency'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","typeOfData is 'metric'"]},{"description":"","conditions":["none of the objectives is of composite type","","typeOfData is either 'good' or 'total'"]},{"description":"","conditions":["none of the objectives is of composite type","","typeOfData is 'error_rate'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.lightstep.typeOfData","type":"string","Doc":"","values":["total","metric"],"rules":[{"description":"must be one of: total, metric","errorCode":"one_of","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.lightstep.percentile","type":"float64","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type","","typeOfData is 'latency'"]},{"description":"should be less than or equal to '99.99'","errorCode":"less_than_or_equal_to","conditions":["none of the objectives is of composite type","","typeOfData is 'latency'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","typeOfData is 'metric'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","typeOfData is either 'good' or 'total'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","typeOfData is 'error_rate'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.lightstep.uql","type":"string","Doc":"","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","typeOfData is 'latency'"]},{"description":"string must not match regular expression: '((spans_sample|assemble)\\s+[a-z\\d.])'","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","","typeOfData is 'metric'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","typeOfData is either 'good' or 'total'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","typeOfData is 'error_rate'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.spec.objectives[*].countMetrics.total.splunkObservability.program"]},{"path":"$.spec.objectives[*].countMetrics.total.splunkObservability.program","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.spec.objectives[*].countMetrics.total.dynatrace.metricSelector"]},{"path":"$.spec.objectives[*].countMetrics.total.dynatrace.metricSelector","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.spec.objectives[*].countMetrics.total.elasticsearch.index","$.spec.objectives[*].countMetrics.total.elasticsearch.query"]},{"path":"$.spec.objectives[*].countMetrics.total.elasticsearch.index","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.elasticsearch.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]},{"description":"string must contain the following substrings: '{{.BeginTime}}', '{{.EndTime}}'","errorCode":"string_contains","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.total.thousandEyes.testID","$.spec.objectives[*].countMetrics.total.thousandEyes.testType"]},{"path":"$.spec.objectives[*].countMetrics.total.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.thousandEyes.testType","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.spec.objectives[*].countMetrics.total.graphite.metricPath"]},{"path":"$.spec.objectives[*].countMetrics.total.graphite.metricPath","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]},{"description":"string must not match regular expression: '\\*'","details":"wildcards are not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type",""]},{"description":"string must not match regular expression: '\\[[^.]*\\]'","details":"character list or range is not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type",""],"examples":["[a-z0-9]"]},{"description":"string must not match regular expression: '{[^.]*}'","details":"value list is not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type",""],"examples":["{user,system,iowait}"]}]},{"path":"$.spec.objectives[*].countMetrics.total.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.spec.objectives[*].countMetrics.total.bigQuery.query","$.spec.objectives[*].countMetrics.total.bigQuery.projectId","$.spec.objectives[*].countMetrics.total.bigQuery.location"]},{"path":"$.spec.objectives[*].countMetrics.total.bigQuery.query","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '\\bn9date\\b'","details":"must contain 'n9date'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""]},{"description":"string must match regular expression: '\\bn9value\\b'","details":"must contain 'n9value'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""]},{"description":"string must match regular expression: 'DATETIME\\(\\s*@n9date_from\\s*\\)'","details":"must have DATETIME placeholder with '@n9date_from'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""]},{"description":"string must match regular expression: 'DATETIME\\(\\s*@n9date_to\\s*\\)'","details":"must have DATETIME placeholder with '@n9date_to'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.bigQuery.projectId","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.bigQuery.location","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.spec.objectives[*].countMetrics.total.opentsdb.query"]},{"path":"$.spec.objectives[*].countMetrics.total.opentsdb.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.spec.objectives[*].countMetrics.total.grafanaLoki.logql"]},{"path":"$.spec.objectives[*].countMetrics.total.grafanaLoki.logql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","rules":[{"description":"","errorCode":"one_of","conditions":["none of the objectives is of composite type",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.total.cloudWatch.region","$.spec.objectives[*].countMetrics.total.cloudWatch.namespace","$.spec.objectives[*].countMetrics.total.cloudWatch.metricName","$.spec.objectives[*].countMetrics.total.cloudWatch.stat","$.spec.objectives[*].countMetrics.total.cloudWatch.dimensions","$.spec.objectives[*].countMetrics.total.cloudWatch.dimensions[*]","$.spec.objectives[*].countMetrics.total.cloudWatch.accountId","$.spec.objectives[*].countMetrics.total.cloudWatch.sql","$.spec.objectives[*].countMetrics.total.cloudWatch.json"]},{"path":"$.spec.objectives[*].countMetrics.total.cloudWatch.region","type":"string","Doc":"","values":["us-east-2","us-east-1","us-west-1","us-west-2","af-south-1","ap-east-1","ap-south-1","ap-northeast-3","ap-northeast-2","ap-southeast-1","ap-southeast-2","ap-northeast-1","ca-central-1","cn-north-1","cn-northwest-1","eu-central-1","eu-west-1","eu-west-2","eu-south-1","eu-west-3","eu-north-1","me-south-1","sa-east-1"],"rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type",""]},{"description":"must be one of: us-east-2, us-east-1, us-west-1, us-west-2, af-south-1, ap-east-1, ap-south-1, ap-northeast-3, ap-northeast-2, ap-southeast-1, ap-southeast-2, ap-northeast-1, ca-central-1, cn-north-1, cn-northwest-1, eu-central-1, eu-west-1, eu-west-2, eu-south-1, eu-west-3, eu-north-1, me-south-1, sa-east-1","errorCode":"one_of","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.cloudWatch.namespace","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^[0-9A-Za-z.\\-_/#:]{1,255}$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.objectives[*].countMetrics.total.cloudWatch.metricName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.objectives[*].countMetrics.total.cloudWatch.stat","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^((SampleCount)|(Sum)|(Average)|(Minimum)|(Maximum)|(IQM)|((((p)|(tm)|(wm)|(tc)|(ts)))((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?))|((((TM)|(WM)|(TC)|(TS)))\\(((((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%):((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%))|(((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%):)|(:((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):)|(:(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?)))\\))|((((PR)))\\((((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):)|(:(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?)))\\)))$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"],"examples":["SampleCount","Sum","Average","Minimum","Maximum","IQM","p10","p99","tm98","wm99","tc10","ts30","TM(10%:98%)","WM(10%:15%)","TC(10%:20%)","TS(10%:90%)"]}]},{"path":"$.spec.objectives[*].countMetrics.total.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"length must be less than or equal to 10","errorCode":"slice_max_length","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]},{"description":"elements must be unique","details":"dimension 'name' must be unique for all dimensions","errorCode":"slice_unique","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.objectives[*].countMetrics.total.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.spec.objectives[*].countMetrics.total.cloudWatch.dimensions[*].name","$.spec.objectives[*].countMetrics.total.cloudWatch.dimensions[*].value"]},{"path":"$.spec.objectives[*].countMetrics.total.cloudWatch.dimensions[*].name","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.objectives[*].countMetrics.total.cloudWatch.dimensions[*].value","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.objectives[*].countMetrics.total.cloudWatch.accountId","type":"string","Doc":"","isOptional":true,"rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^\\d{12}$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","either stat, dimensions, metricName or namespace are provided"],"examples":["123456789012"]}]},{"path":"$.spec.objectives[*].countMetrics.total.cloudWatch.sql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","sql is provided"]}]},{"path":"$.spec.objectives[*].countMetrics.total.cloudWatch.json","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","json is provided"]}]},{"path":"$.spec.objectives[*].countMetrics.total.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.spec.objectives[*].countMetrics.total.pingdom.checkId","$.spec.objectives[*].countMetrics.total.pingdom.checkType","$.spec.objectives[*].countMetrics.total.pingdom.status"]},{"path":"$.spec.objectives[*].countMetrics.total.pingdom.checkId","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]},{"description":"string must match regular expression: '^(?:|\\d+)$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.pingdom.checkType","type":"string","Doc":"","values":["uptime","transaction"],"rules":[{"description":"must be one of: uptime, transaction","errorCode":"one_of","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.pingdom.status","type":"string","Doc":"","isOptional":true,"rules":[{"description":"","conditions":["none of the objectives is of composite type","","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","checkType is equal to 'transaction'"]},{"description":"property is required but was empty","errorCode":"required","conditions":["none of the objectives is of composite type","","checkType is equal to 'uptime'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.spec.objectives[*].countMetrics.total.amazonPrometheus.promql"]},{"path":"$.spec.objectives[*].countMetrics.total.amazonPrometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.spec.objectives[*].countMetrics.total.redshift.region","$.spec.objectives[*].countMetrics.total.redshift.clusterId","$.spec.objectives[*].countMetrics.total.redshift.databaseName","$.spec.objectives[*].countMetrics.total.redshift.query"]},{"path":"$.spec.objectives[*].countMetrics.total.redshift.region","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.redshift.clusterId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.redshift.databaseName","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.redshift.query","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^SELECT[\\s\\S]*\\bn9date\\b[\\s\\S]*FROM'","details":"must contain 'n9date' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""]},{"description":"string must match regular expression: '^SELECT\\s[\\s\\S]*\\bn9value\\b[\\s\\S]*\\sFROM'","details":"must contain 'n9value' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""]},{"description":"string must match regular expression: 'WHERE[\\s\\S]*\\W:n9date_from\\b[\\s\\S]*'","details":"must filter by ':n9date_from' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""]},{"description":"string must match regular expression: 'WHERE[\\s\\S]*\\W:n9date_to\\b[\\s\\S]*'","details":"must filter by ':n9date_to' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.spec.objectives[*].countMetrics.total.sumoLogic.type","$.spec.objectives[*].countMetrics.total.sumoLogic.query","$.spec.objectives[*].countMetrics.total.sumoLogic.quantization","$.spec.objectives[*].countMetrics.total.sumoLogic.rollup"]},{"path":"$.spec.objectives[*].countMetrics.total.sumoLogic.type","type":"string","Doc":"","values":["logs","metrics"],"rules":[{"description":"must be one of: logs, metrics","errorCode":"one_of","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.sumoLogic.query","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","type is 'metrics'"]},{"description":"","conditions":["none of the objectives is of composite type","","type is 'logs'"]},{"description":"string must match regular expression: '(?m)\\bn9_value\\b'","details":"n9_value is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","type is 'logs'"]},{"description":"string must match regular expression: '(?m)\\bby\\b'","details":"aggregation function is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","type is 'logs'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.sumoLogic.quantization","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","type is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","type is 'logs'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.sumoLogic.rollup","type":"string","Doc":"","values":["Avg","Sum","Min","Max","Count","None"],"rules":[{"description":"must be one of: Avg, Sum, Min, Max, Count, None","errorCode":"one_of","conditions":["none of the objectives is of composite type","","type is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","type is 'logs'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","isOptional":true,"rules":[{"description":"","conditions":["none of the objectives is of composite type",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.total.instana.metricType","$.spec.objectives[*].countMetrics.total.instana.infrastructure","$.spec.objectives[*].countMetrics.total.instana.application"]},{"path":"$.spec.objectives[*].countMetrics.total.instana.metricType","type":"string","Doc":"","values":["infrastructure"],"rules":[{"description":"should be equal to 'infrastructure'","errorCode":"equal_to","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.total.instana.infrastructure.metricRetrievalMethod","$.spec.objectives[*].countMetrics.total.instana.infrastructure.query","$.spec.objectives[*].countMetrics.total.instana.infrastructure.snapshotId","$.spec.objectives[*].countMetrics.total.instana.infrastructure.metricId","$.spec.objectives[*].countMetrics.total.instana.infrastructure.pluginId"]},{"path":"$.spec.objectives[*].countMetrics.total.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":"","values":["query","snapshot"],"rules":[{"description":"must be one of: query, snapshot","errorCode":"one_of","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.instana.infrastructure.metricId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.instana.infrastructure.pluginId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.total.instana.application.metricId","$.spec.objectives[*].countMetrics.total.instana.application.aggregation","$.spec.objectives[*].countMetrics.total.instana.application.groupBy","$.spec.objectives[*].countMetrics.total.instana.application.apiQuery","$.spec.objectives[*].countMetrics.total.instana.application.includeInternal","$.spec.objectives[*].countMetrics.total.instana.application.includeSynthetic"]},{"path":"$.spec.objectives[*].countMetrics.total.instana.application.metricId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.instana.application.aggregation","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].countMetrics.total.instana.application.groupBy.tag","$.spec.objectives[*].countMetrics.total.instana.application.groupBy.tagEntity","$.spec.objectives[*].countMetrics.total.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.spec.objectives[*].countMetrics.total.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.spec.objectives[*].countMetrics.total.influxdb.query"]},{"path":"$.spec.objectives[*].countMetrics.total.influxdb.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]},{"description":"string must match regular expression: '\\s*bucket\\s*:\\s*\".+\"\\s*'","details":"must contain a bucket name","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""]},{"description":"string must match regular expression: '\\s*range\\s*\\(\\s*start\\s*:\\s*time\\s*\\(\\s*v\\s*:\\s*params\\.n9time_start\\s*\\)\\s*,\\s*stop\\s*:\\s*time\\s*\\(\\s*v\\s*:\\s*params\\.n9time_stop\\s*\\)\\s*\\)'","details":"must contain both 'params.n9time_start' and 'params.n9time_stop'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","rules":[{"description":"","errorCode":"one_of","conditions":["none of the objectives is of composite type",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.total.gcm.query","$.spec.objectives[*].countMetrics.total.gcm.projectId","$.spec.objectives[*].countMetrics.total.gcm.promql"]},{"path":"$.spec.objectives[*].countMetrics.total.gcm.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.gcm.projectId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.gcm.promql","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.spec.objectives[*].countMetrics.total.azureMonitor.dataType","$.spec.objectives[*].countMetrics.total.azureMonitor.resourceId","$.spec.objectives[*].countMetrics.total.azureMonitor.metricName","$.spec.objectives[*].countMetrics.total.azureMonitor.aggregation","$.spec.objectives[*].countMetrics.total.azureMonitor.dimensions","$.spec.objectives[*].countMetrics.total.azureMonitor.dimensions[*]","$.spec.objectives[*].countMetrics.total.azureMonitor.metricNamespace","$.spec.objectives[*].countMetrics.total.azureMonitor.workspace","$.spec.objectives[*].countMetrics.total.azureMonitor.kqlQuery"]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.dataType","type":"string","Doc":"","values":["metrics","logs"],"rules":[{"description":"must be one of: metrics, logs","errorCode":"one_of","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.resourceId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^/subscriptions/[a-zA-Z0-9-]+/resourceGroups/[a-zA-Z0-9-._()]+/providers/[a-zA-Z0-9-.()_]+/[a-zA-Z0-9-_()]+/[a-zA-Z0-9-_()]+$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","dataType is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.metricName","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","","dataType is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.aggregation","type":"string","Doc":"","values":["Avg","Min","Max","Count","Sum"],"rules":[{"description":"must be one of: Avg, Min, Max, Count, Sum","errorCode":"one_of","conditions":["none of the objectives is of composite type","","dataType is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"elements must be unique","details":"dimension 'name' must be unique for all dimensions","errorCode":"slice_unique","conditions":["none of the objectives is of composite type","","dataType is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.spec.objectives[*].countMetrics.total.azureMonitor.dimensions[*].name","$.spec.objectives[*].countMetrics.total.azureMonitor.dimensions[*].value"]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.dimensions[*].name","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","dataType is 'metrics'"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","dataType is 'metrics'"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","","dataType is 'metrics'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.dimensions[*].value","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","","dataType is 'metrics'"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","","dataType is 'metrics'"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","","dataType is 'metrics'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.metricNamespace","type":"string","Doc":"","rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","dataType is 'metrics'"]}],"childrenPaths":["$.spec.objectives[*].countMetrics.total.azureMonitor.workspace.subscriptionId","$.spec.objectives[*].countMetrics.total.azureMonitor.workspace.resourceGroup","$.spec.objectives[*].countMetrics.total.azureMonitor.workspace.workspaceId"]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.workspace.subscriptionId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","conditions":["none of the objectives is of composite type","","dataType is 'logs'"],"examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.workspace.resourceGroup","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-zA-Z0-9-._()]+$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.workspace.workspaceId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","conditions":["none of the objectives is of composite type","","dataType is 'logs'"],"examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.objectives[*].countMetrics.total.azureMonitor.kqlQuery","type":"string","Doc":"","rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","","dataType is 'metrics'"]},{"description":"string must match regular expression: '(?m)\\bn9_time\\b'","details":"n9_time is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","dataType is 'logs'"]},{"description":"string must match regular expression: '(?m)\\bn9_value\\b'","details":"n9_value is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].countMetrics.total.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].countMetrics.total.generic.query"]},{"path":"$.spec.objectives[*].countMetrics.total.generic.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.spec.objectives[*].countMetrics.total.honeycomb.calculation","$.spec.objectives[*].countMetrics.total.honeycomb.attribute"]},{"path":"$.spec.objectives[*].countMetrics.total.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true,"values":["CONCURRENCY","COUNT","SUM","AVG","COUNT_DISTINCT","MAX","MIN","P001","P01","P05","P10","P25","P50","P75","P90","P95","P99","P999","RATE_AVG","RATE_SUM","RATE_MAX"],"rules":[{"description":"must be one of: CONCURRENCY, COUNT, SUM, AVG, COUNT_DISTINCT, MAX, MIN, P001, P01, P05, P10, P25, P50, P75, P90, P95, P99, P999, RATE_AVG, RATE_SUM, RATE_MAX","errorCode":"one_of","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.honeycomb.attribute","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type",""]},{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","rules":[{"description":"","conditions":["none of the objectives is of composite type","",""]},{"description":"","conditions":["none of the objectives is of composite type","",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.total.logicMonitor.queryType","$.spec.objectives[*].countMetrics.total.logicMonitor.line","$.spec.objectives[*].countMetrics.total.logicMonitor.deviceDataSourceInstanceId","$.spec.objectives[*].countMetrics.total.logicMonitor.graphId","$.spec.objectives[*].countMetrics.total.logicMonitor.websiteId","$.spec.objectives[*].countMetrics.total.logicMonitor.checkpointId","$.spec.objectives[*].countMetrics.total.logicMonitor.graphName"]},{"path":"$.spec.objectives[*].countMetrics.total.logicMonitor.queryType","type":"string","Doc":"","values":["device_metrics","website_metrics"],"rules":[{"description":"must be one of: device_metrics, website_metrics","errorCode":"one_of","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.logicMonitor.line","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.logicMonitor.graphId","type":"int","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.logicMonitor.checkpointId","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.logicMonitor.graphName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","",""]}]},{"path":"$.spec.objectives[*].countMetrics.total.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.spec.objectives[*].countMetrics.total.azurePrometheus.promql"]},{"path":"$.spec.objectives[*].countMetrics.total.azurePrometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.goodTotal","type":"MetricSpec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"Experimental: Splunk and Honeycomb only.\nSingle query returning both good and total counts.\n\nMetricSpec defines single time series obtained from data source","isOptional":true,"rules":[{"description":"","errorCode":"single_query_good_over_total_disabled","conditions":["none of the objectives is of composite type",""]}],"childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.prometheus","$.spec.objectives[*].countMetrics.goodTotal.datadog","$.spec.objectives[*].countMetrics.goodTotal.newRelic","$.spec.objectives[*].countMetrics.goodTotal.appDynamics","$.spec.objectives[*].countMetrics.goodTotal.splunk","$.spec.objectives[*].countMetrics.goodTotal.lightstep","$.spec.objectives[*].countMetrics.goodTotal.splunkObservability","$.spec.objectives[*].countMetrics.goodTotal.dynatrace","$.spec.objectives[*].countMetrics.goodTotal.elasticsearch","$.spec.objectives[*].countMetrics.goodTotal.thousandEyes","$.spec.objectives[*].countMetrics.goodTotal.graphite","$.spec.objectives[*].countMetrics.goodTotal.bigQuery","$.spec.objectives[*].countMetrics.goodTotal.opentsdb","$.spec.objectives[*].countMetrics.goodTotal.grafanaLoki","$.spec.objectives[*].countMetrics.goodTotal.cloudWatch","$.spec.objectives[*].countMetrics.goodTotal.pingdom","$.spec.objectives[*].countMetrics.goodTotal.amazonPrometheus","$.spec.objectives[*].countMetrics.goodTotal.redshift","$.spec.objectives[*].countMetrics.goodTotal.sumoLogic","$.spec.objectives[*].countMetrics.goodTotal.instana","$.spec.objectives[*].countMetrics.goodTotal.influxdb","$.spec.objectives[*].countMetrics.goodTotal.gcm","$.spec.objectives[*].countMetrics.goodTotal.azureMonitor","$.spec.objectives[*].countMetrics.goodTotal.generic","$.spec.objectives[*].countMetrics.goodTotal.honeycomb","$.spec.objectives[*].countMetrics.goodTotal.logicMonitor","$.spec.objectives[*].countMetrics.goodTotal.azurePrometheus"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.prometheus.promql"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.prometheus.promql","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.datadog.query"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.datadog.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.newRelic.nrql"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.newRelic.nrql","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.appDynamics.applicationName","$.spec.objectives[*].countMetrics.goodTotal.appDynamics.metricPath"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.appDynamics.applicationName","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.appDynamics.metricPath","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.splunk.query"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.splunk.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]},{"description":"string must contain the following substrings: 'n9time', 'n9good', 'n9total'","errorCode":"string_contains","conditions":["none of the objectives is of composite type",""]},{"description":"string must match regular expression: '(\\bindex\\s*=.+)|(\"\\bindex\"\\s*=.+)'","details":"query has to contain index=\u003cNAME\u003e or \"index\"=\u003cNAME\u003e","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type",""],"examples":["index=svc-events","\"index\"=svc-events"]}]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.lightstep.streamId","$.spec.objectives[*].countMetrics.goodTotal.lightstep.typeOfData","$.spec.objectives[*].countMetrics.goodTotal.lightstep.percentile","$.spec.objectives[*].countMetrics.goodTotal.lightstep.uql"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.lightstep.streamId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.lightstep.typeOfData","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.lightstep.percentile","type":"float64","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.lightstep.uql","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.splunkObservability.program"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.splunkObservability.program","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.dynatrace.metricSelector"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.dynatrace.metricSelector","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.elasticsearch.index","$.spec.objectives[*].countMetrics.goodTotal.elasticsearch.query"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.elasticsearch.index","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.elasticsearch.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.thousandEyes.testID","$.spec.objectives[*].countMetrics.goodTotal.thousandEyes.testType"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.thousandEyes.testType","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.graphite.metricPath"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.graphite.metricPath","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.bigQuery.query","$.spec.objectives[*].countMetrics.goodTotal.bigQuery.projectId","$.spec.objectives[*].countMetrics.goodTotal.bigQuery.location"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.bigQuery.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.bigQuery.projectId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.bigQuery.location","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.opentsdb.query"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.opentsdb.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.grafanaLoki.logql"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.grafanaLoki.logql","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.region","$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.namespace","$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.metricName","$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.stat","$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.dimensions","$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.dimensions[*]","$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.accountId","$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.sql","$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.json"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.region","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.namespace","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.metricName","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.stat","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.dimensions[*].name","$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.dimensions[*].value"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.dimensions[*].name","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.dimensions[*].value","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.accountId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.sql","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.cloudWatch.json","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.pingdom.checkId","$.spec.objectives[*].countMetrics.goodTotal.pingdom.checkType","$.spec.objectives[*].countMetrics.goodTotal.pingdom.status"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.pingdom.checkId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.pingdom.checkType","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.pingdom.status","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.amazonPrometheus.promql"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.amazonPrometheus.promql","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.redshift.region","$.spec.objectives[*].countMetrics.goodTotal.redshift.clusterId","$.spec.objectives[*].countMetrics.goodTotal.redshift.databaseName","$.spec.objectives[*].countMetrics.goodTotal.redshift.query"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.redshift.region","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.redshift.clusterId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.redshift.databaseName","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.redshift.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.sumoLogic.type","$.spec.objectives[*].countMetrics.goodTotal.sumoLogic.query","$.spec.objectives[*].countMetrics.goodTotal.sumoLogic.quantization","$.spec.objectives[*].countMetrics.goodTotal.sumoLogic.rollup"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.sumoLogic.type","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.sumoLogic.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.sumoLogic.quantization","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.sumoLogic.rollup","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.instana.metricType","$.spec.objectives[*].countMetrics.goodTotal.instana.infrastructure","$.spec.objectives[*].countMetrics.goodTotal.instana.application"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.metricType","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.instana.infrastructure.metricRetrievalMethod","$.spec.objectives[*].countMetrics.goodTotal.instana.infrastructure.query","$.spec.objectives[*].countMetrics.goodTotal.instana.infrastructure.snapshotId","$.spec.objectives[*].countMetrics.goodTotal.instana.infrastructure.metricId","$.spec.objectives[*].countMetrics.goodTotal.instana.infrastructure.pluginId"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.infrastructure.metricId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.infrastructure.pluginId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.instana.application.metricId","$.spec.objectives[*].countMetrics.goodTotal.instana.application.aggregation","$.spec.objectives[*].countMetrics.goodTotal.instana.application.groupBy","$.spec.objectives[*].countMetrics.goodTotal.instana.application.apiQuery","$.spec.objectives[*].countMetrics.goodTotal.instana.application.includeInternal","$.spec.objectives[*].countMetrics.goodTotal.instana.application.includeSynthetic"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.application.metricId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.application.aggregation","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.instana.application.groupBy.tag","$.spec.objectives[*].countMetrics.goodTotal.instana.application.groupBy.tagEntity","$.spec.objectives[*].countMetrics.goodTotal.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.influxdb.query"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.influxdb.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.gcm.query","$.spec.objectives[*].countMetrics.goodTotal.gcm.projectId","$.spec.objectives[*].countMetrics.goodTotal.gcm.promql"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.gcm.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.gcm.projectId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.gcm.promql","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.dataType","$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.resourceId","$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.metricName","$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.aggregation","$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.dimensions","$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.dimensions[*]","$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.metricNamespace","$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.workspace","$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.kqlQuery"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.dataType","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.resourceId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.metricName","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.aggregation","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.dimensions[*].name","$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.dimensions[*].value"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.dimensions[*].name","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.dimensions[*].value","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.metricNamespace","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.workspace.subscriptionId","$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.workspace.resourceGroup","$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.workspace.workspaceId"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.workspace.subscriptionId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.workspace.resourceGroup","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.workspace.workspaceId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azureMonitor.kqlQuery","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.generic.query"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.generic.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.honeycomb.calculation","$.spec.objectives[*].countMetrics.goodTotal.honeycomb.attribute"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.honeycomb.attribute","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type",""]},{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.queryType","$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.line","$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.deviceDataSourceInstanceId","$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.graphId","$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.websiteId","$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.checkpointId","$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.graphName"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.queryType","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.line","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics"},{"path":"$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.graphId","type":"int","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics"},{"path":"$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.checkpointId","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.logicMonitor.graphName","type":"string","Doc":""},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.spec.objectives[*].countMetrics.goodTotal.azurePrometheus.promql"]},{"path":"$.spec.objectives[*].countMetrics.goodTotal.azurePrometheus.promql","type":"string","Doc":""},{"path":"$.spec.objectives[*].rawMetric","type":"RawMetricSpec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RawMetricSpec represents integration with a metric source for a particular objective.","childrenPaths":["$.spec.objectives[*].rawMetric.query"]},{"path":"$.spec.objectives[*].rawMetric.query","type":"MetricSpec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"MetricSpec defines single time series obtained from data source","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}],"childrenPaths":["$.spec.objectives[*].rawMetric.query.prometheus","$.spec.objectives[*].rawMetric.query.datadog","$.spec.objectives[*].rawMetric.query.newRelic","$.spec.objectives[*].rawMetric.query.appDynamics","$.spec.objectives[*].rawMetric.query.splunk","$.spec.objectives[*].rawMetric.query.lightstep","$.spec.objectives[*].rawMetric.query.splunkObservability","$.spec.objectives[*].rawMetric.query.dynatrace","$.spec.objectives[*].rawMetric.query.elasticsearch","$.spec.objectives[*].rawMetric.query.thousandEyes","$.spec.objectives[*].rawMetric.query.graphite","$.spec.objectives[*].rawMetric.query.bigQuery","$.spec.objectives[*].rawMetric.query.opentsdb","$.spec.objectives[*].rawMetric.query.grafanaLoki","$.spec.objectives[*].rawMetric.query.cloudWatch","$.spec.objectives[*].rawMetric.query.pingdom","$.spec.objectives[*].rawMetric.query.amazonPrometheus","$.spec.objectives[*].rawMetric.query.redshift","$.spec.objectives[*].rawMetric.query.sumoLogic","$.spec.objectives[*].rawMetric.query.instana","$.spec.objectives[*].rawMetric.query.influxdb","$.spec.objectives[*].rawMetric.query.gcm","$.spec.objectives[*].rawMetric.query.azureMonitor","$.spec.objectives[*].rawMetric.query.generic","$.spec.objectives[*].rawMetric.query.honeycomb","$.spec.objectives[*].rawMetric.query.logicMonitor","$.spec.objectives[*].rawMetric.query.azurePrometheus"]},{"path":"$.spec.objectives[*].rawMetric.query.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.spec.objectives[*].rawMetric.query.prometheus.promql"]},{"path":"$.spec.objectives[*].rawMetric.query.prometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.spec.objectives[*].rawMetric.query.datadog.query"]},{"path":"$.spec.objectives[*].rawMetric.query.datadog.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.spec.objectives[*].rawMetric.query.newRelic.nrql"]},{"path":"$.spec.objectives[*].rawMetric.query.newRelic.nrql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]},{"description":"string must not match regular expression: '(?i)[\\n\\s](since|until)([\\n\\s]|$)'","details":"query must not contain 'since' or 'until' keywords (case insensitive)","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.spec.objectives[*].rawMetric.query.appDynamics.applicationName","$.spec.objectives[*].rawMetric.query.appDynamics.metricPath"]},{"path":"$.spec.objectives[*].rawMetric.query.appDynamics.applicationName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.appDynamics.metricPath","type":"string","Doc":"","rules":[{"description":"","errorCode":"app_dynamics_wildcard_not_supported","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.spec.objectives[*].rawMetric.query.splunk.query"]},{"path":"$.spec.objectives[*].rawMetric.query.splunk.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]},{"description":"string must contain the following substrings: 'n9time', 'n9value'","errorCode":"string_contains","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: '(\\bindex\\s*=.+)|(\"\\bindex\"\\s*=.+)'","details":"query has to contain index=\u003cNAME\u003e or \"index\"=\u003cNAME\u003e","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"],"examples":["index=svc-events","\"index\"=svc-events"]}]},{"path":"$.spec.objectives[*].rawMetric.query.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.spec.objectives[*].rawMetric.query.lightstep.streamId","$.spec.objectives[*].rawMetric.query.lightstep.typeOfData","$.spec.objectives[*].rawMetric.query.lightstep.percentile","$.spec.objectives[*].rawMetric.query.lightstep.uql"]},{"path":"$.spec.objectives[*].rawMetric.query.lightstep.streamId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","typeOfData is 'latency'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is 'metric'"]},{"description":"","conditions":["none of the objectives is of composite type","typeOfData is either 'good' or 'total'"]},{"description":"","conditions":["none of the objectives is of composite type","typeOfData is 'error_rate'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.lightstep.typeOfData","type":"string","Doc":"","values":["error_rate","latency","metric"],"rules":[{"description":"must be one of: error_rate, latency, metric","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.lightstep.percentile","type":"float64","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type","typeOfData is 'latency'"]},{"description":"should be less than or equal to '99.99'","errorCode":"less_than_or_equal_to","conditions":["none of the objectives is of composite type","typeOfData is 'latency'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is 'metric'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is either 'good' or 'total'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is 'error_rate'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.lightstep.uql","type":"string","Doc":"","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is 'latency'"]},{"description":"string must not match regular expression: '((spans_sample|assemble)\\s+[a-z\\d.])'","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type","typeOfData is 'metric'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is either 'good' or 'total'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","typeOfData is 'error_rate'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.spec.objectives[*].rawMetric.query.splunkObservability.program"]},{"path":"$.spec.objectives[*].rawMetric.query.splunkObservability.program","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.spec.objectives[*].rawMetric.query.dynatrace.metricSelector"]},{"path":"$.spec.objectives[*].rawMetric.query.dynatrace.metricSelector","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.spec.objectives[*].rawMetric.query.elasticsearch.index","$.spec.objectives[*].rawMetric.query.elasticsearch.query"]},{"path":"$.spec.objectives[*].rawMetric.query.elasticsearch.index","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.elasticsearch.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]},{"description":"string must contain the following substrings: '{{.BeginTime}}', '{{.EndTime}}'","errorCode":"string_contains","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","childrenPaths":["$.spec.objectives[*].rawMetric.query.thousandEyes.testID","$.spec.objectives[*].rawMetric.query.thousandEyes.testType"]},{"path":"$.spec.objectives[*].rawMetric.query.thousandEyes.testID","type":"int64","Doc":"","rules":[{"description":"should be greater than or equal to '0'","errorCode":"greater_than_or_equal_to","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.thousandEyes.testType","type":"string","Doc":"","values":["net-latency","net-loss","web-page-load","web-dom-load","web-transaction-time","api-transaction-time","http-response-time","http-server-availability","http-server-throughput","http-server-total-time","dns-server-resolution-time","dns-dnssec-valid"],"rules":[{"description":"must be one of: net-latency, net-loss, web-page-load, web-dom-load, web-transaction-time, api-transaction-time, http-response-time, http-server-availability, http-server-throughput, http-server-total-time, dns-server-resolution-time, dns-dnssec-valid","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.spec.objectives[*].rawMetric.query.graphite.metricPath"]},{"path":"$.spec.objectives[*].rawMetric.query.graphite.metricPath","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]},{"description":"string must not match regular expression: '\\*'","details":"wildcards are not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must not match regular expression: '\\[[^.]*\\]'","details":"character list or range is not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type"],"examples":["[a-z0-9]"]},{"description":"string must not match regular expression: '{[^.]*}'","details":"value list is not allowed","errorCode":"string_deny_regexp","conditions":["none of the objectives is of composite type"],"examples":["{user,system,iowait}"]}]},{"path":"$.spec.objectives[*].rawMetric.query.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.spec.objectives[*].rawMetric.query.bigQuery.query","$.spec.objectives[*].rawMetric.query.bigQuery.projectId","$.spec.objectives[*].rawMetric.query.bigQuery.location"]},{"path":"$.spec.objectives[*].rawMetric.query.bigQuery.query","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '\\bn9date\\b'","details":"must contain 'n9date'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: '\\bn9value\\b'","details":"must contain 'n9value'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: 'DATETIME\\(\\s*@n9date_from\\s*\\)'","details":"must have DATETIME placeholder with '@n9date_from'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: 'DATETIME\\(\\s*@n9date_to\\s*\\)'","details":"must have DATETIME placeholder with '@n9date_to'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.bigQuery.projectId","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.bigQuery.location","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.spec.objectives[*].rawMetric.query.opentsdb.query"]},{"path":"$.spec.objectives[*].rawMetric.query.opentsdb.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.spec.objectives[*].rawMetric.query.grafanaLoki.logql"]},{"path":"$.spec.objectives[*].rawMetric.query.grafanaLoki.logql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","rules":[{"description":"","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}],"childrenPaths":["$.spec.objectives[*].rawMetric.query.cloudWatch.region","$.spec.objectives[*].rawMetric.query.cloudWatch.namespace","$.spec.objectives[*].rawMetric.query.cloudWatch.metricName","$.spec.objectives[*].rawMetric.query.cloudWatch.stat","$.spec.objectives[*].rawMetric.query.cloudWatch.dimensions","$.spec.objectives[*].rawMetric.query.cloudWatch.dimensions[*]","$.spec.objectives[*].rawMetric.query.cloudWatch.accountId","$.spec.objectives[*].rawMetric.query.cloudWatch.sql","$.spec.objectives[*].rawMetric.query.cloudWatch.json"]},{"path":"$.spec.objectives[*].rawMetric.query.cloudWatch.region","type":"string","Doc":"","values":["us-east-2","us-east-1","us-west-1","us-west-2","af-south-1","ap-east-1","ap-south-1","ap-northeast-3","ap-northeast-2","ap-southeast-1","ap-southeast-2","ap-northeast-1","ca-central-1","cn-north-1","cn-northwest-1","eu-central-1","eu-west-1","eu-west-2","eu-south-1","eu-west-3","eu-north-1","me-south-1","sa-east-1"],"rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type"]},{"description":"must be one of: us-east-2, us-east-1, us-west-1, us-west-2, af-south-1, ap-east-1, ap-south-1, ap-northeast-3, ap-northeast-2, ap-southeast-1, ap-southeast-2, ap-northeast-1, ca-central-1, cn-north-1, cn-northwest-1, eu-central-1, eu-west-1, eu-west-2, eu-south-1, eu-west-3, eu-north-1, me-south-1, sa-east-1","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.cloudWatch.namespace","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^[0-9A-Za-z.\\-_/#:]{1,255}$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.objectives[*].rawMetric.query.cloudWatch.metricName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.objectives[*].rawMetric.query.cloudWatch.stat","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^((SampleCount)|(Sum)|(Average)|(Minimum)|(Maximum)|(IQM)|((((p)|(tm)|(wm)|(tc)|(ts)))((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?))|((((TM)|(WM)|(TC)|(TS)))\\(((((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%):((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%))|(((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%):)|(:((100|(([1-9]\\d?)|0))(\\.\\d{1,10})?%))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):)|(:(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?)))\\))|((((PR)))\\((((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?))|((-?(([1-9]\\d*)|0)(\\.\\d{1,10})?):)|(:(-?(([1-9]\\d*)|0)(\\.\\d{1,10})?)))\\)))$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"],"examples":["SampleCount","Sum","Average","Minimum","Maximum","IQM","p10","p99","tm98","wm99","tc10","ts30","TM(10%:98%)","WM(10%:15%)","TC(10%:20%)","TS(10%:90%)"]}]},{"path":"$.spec.objectives[*].rawMetric.query.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"length must be less than or equal to 10","errorCode":"slice_max_length","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"elements must be unique","details":"dimension 'name' must be unique for all dimensions","errorCode":"slice_unique","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.objectives[*].rawMetric.query.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.spec.objectives[*].rawMetric.query.cloudWatch.dimensions[*].name","$.spec.objectives[*].rawMetric.query.cloudWatch.dimensions[*].value"]},{"path":"$.spec.objectives[*].rawMetric.query.cloudWatch.dimensions[*].name","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.objectives[*].rawMetric.query.cloudWatch.dimensions[*].value","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]}]},{"path":"$.spec.objectives[*].rawMetric.query.cloudWatch.accountId","type":"string","Doc":"","isOptional":true,"rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"]},{"description":"string must match regular expression: '^\\d{12}$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","either stat, dimensions, metricName or namespace are provided"],"examples":["123456789012"]}]},{"path":"$.spec.objectives[*].rawMetric.query.cloudWatch.sql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","sql is provided"]}]},{"path":"$.spec.objectives[*].rawMetric.query.cloudWatch.json","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","json is provided"]}]},{"path":"$.spec.objectives[*].rawMetric.query.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.spec.objectives[*].rawMetric.query.pingdom.checkId","$.spec.objectives[*].rawMetric.query.pingdom.checkType","$.spec.objectives[*].rawMetric.query.pingdom.status"]},{"path":"$.spec.objectives[*].rawMetric.query.pingdom.checkId","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: '^(?:|\\d+)$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.pingdom.checkType","type":"string","Doc":"","values":["uptime"],"rules":[{"description":"should be equal to 'uptime'","errorCode":"equal_to","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.pingdom.status","type":"string","Doc":"","isOptional":true,"rules":[{"description":"","conditions":["none of the objectives is of composite type","checkType is equal to 'uptime'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","checkType is equal to 'transaction'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.spec.objectives[*].rawMetric.query.amazonPrometheus.promql"]},{"path":"$.spec.objectives[*].rawMetric.query.amazonPrometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.spec.objectives[*].rawMetric.query.redshift.region","$.spec.objectives[*].rawMetric.query.redshift.clusterId","$.spec.objectives[*].rawMetric.query.redshift.databaseName","$.spec.objectives[*].rawMetric.query.redshift.query"]},{"path":"$.spec.objectives[*].rawMetric.query.redshift.region","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.redshift.clusterId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.redshift.databaseName","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.redshift.query","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^SELECT[\\s\\S]*\\bn9date\\b[\\s\\S]*FROM'","details":"must contain 'n9date' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: '^SELECT\\s[\\s\\S]*\\bn9value\\b[\\s\\S]*\\sFROM'","details":"must contain 'n9value' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: 'WHERE[\\s\\S]*\\W:n9date_from\\b[\\s\\S]*'","details":"must filter by ':n9date_from' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: 'WHERE[\\s\\S]*\\W:n9date_to\\b[\\s\\S]*'","details":"must filter by ':n9date_to' column","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.spec.objectives[*].rawMetric.query.sumoLogic.type","$.spec.objectives[*].rawMetric.query.sumoLogic.query","$.spec.objectives[*].rawMetric.query.sumoLogic.quantization","$.spec.objectives[*].rawMetric.query.sumoLogic.rollup"]},{"path":"$.spec.objectives[*].rawMetric.query.sumoLogic.type","type":"string","Doc":"","values":["logs","metrics"],"rules":[{"description":"must be one of: logs, metrics","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.sumoLogic.query","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","type is 'metrics'"]},{"description":"","conditions":["none of the objectives is of composite type","type is 'logs'"]},{"description":"string must match regular expression: '(?m)\\bn9_value\\b'","details":"n9_value is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","type is 'logs'"]},{"description":"string must match regular expression: '(?m)\\bby\\b'","details":"aggregation function is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","type is 'logs'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.sumoLogic.quantization","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","type is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","type is 'logs'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.sumoLogic.rollup","type":"string","Doc":"","values":["Avg","Sum","Min","Max","Count","None"],"rules":[{"description":"must be one of: Avg, Sum, Min, Max, Count, None","errorCode":"one_of","conditions":["none of the objectives is of composite type","type is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","type is 'logs'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","isOptional":true,"rules":[{"description":"","conditions":["none of the objectives is of composite type"]}],"childrenPaths":["$.spec.objectives[*].rawMetric.query.instana.metricType","$.spec.objectives[*].rawMetric.query.instana.infrastructure","$.spec.objectives[*].rawMetric.query.instana.application"]},{"path":"$.spec.objectives[*].rawMetric.query.instana.metricType","type":"string","Doc":"","values":["infrastructure","application"],"rules":[{"description":"must be one of: infrastructure, application","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}],"childrenPaths":["$.spec.objectives[*].rawMetric.query.instana.infrastructure.metricRetrievalMethod","$.spec.objectives[*].rawMetric.query.instana.infrastructure.query","$.spec.objectives[*].rawMetric.query.instana.infrastructure.snapshotId","$.spec.objectives[*].rawMetric.query.instana.infrastructure.metricId","$.spec.objectives[*].rawMetric.query.instana.infrastructure.pluginId"]},{"path":"$.spec.objectives[*].rawMetric.query.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":"","values":["query","snapshot"],"rules":[{"description":"must be one of: query, snapshot","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].rawMetric.query.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.spec.objectives[*].rawMetric.query.instana.infrastructure.metricId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.instana.infrastructure.pluginId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}],"childrenPaths":["$.spec.objectives[*].rawMetric.query.instana.application.metricId","$.spec.objectives[*].rawMetric.query.instana.application.aggregation","$.spec.objectives[*].rawMetric.query.instana.application.groupBy","$.spec.objectives[*].rawMetric.query.instana.application.apiQuery","$.spec.objectives[*].rawMetric.query.instana.application.includeInternal","$.spec.objectives[*].rawMetric.query.instana.application.includeSynthetic"]},{"path":"$.spec.objectives[*].rawMetric.query.instana.application.metricId","type":"string","Doc":"","values":["calls","erroneousCalls","errors","latency"],"rules":[{"description":"must be one of: calls, erroneousCalls, errors, latency","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.instana.application.aggregation","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].rawMetric.query.instana.application.groupBy.tag","$.spec.objectives[*].rawMetric.query.instana.application.groupBy.tagEntity","$.spec.objectives[*].rawMetric.query.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.spec.objectives[*].rawMetric.query.instana.application.groupBy.tag","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.instana.application.groupBy.tagEntity","type":"string","Doc":"","values":["DESTINATION","SOURCE","NOT_APPLICABLE"],"rules":[{"description":"must be one of: DESTINATION, SOURCE, NOT_APPLICABLE","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.spec.objectives[*].rawMetric.query.instana.application.apiQuery","type":"string","Doc":"","rules":[{"description":"string must be a valid JSON","errorCode":"string_json","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.spec.objectives[*].rawMetric.query.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.spec.objectives[*].rawMetric.query.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.spec.objectives[*].rawMetric.query.influxdb.query"]},{"path":"$.spec.objectives[*].rawMetric.query.influxdb.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: '\\s*bucket\\s*:\\s*\".+\"\\s*'","details":"must contain a bucket name","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]},{"description":"string must match regular expression: '\\s*range\\s*\\(\\s*start\\s*:\\s*time\\s*\\(\\s*v\\s*:\\s*params\\.n9time_start\\s*\\)\\s*,\\s*stop\\s*:\\s*time\\s*\\(\\s*v\\s*:\\s*params\\.n9time_stop\\s*\\)\\s*\\)'","details":"must contain both 'params.n9time_start' and 'params.n9time_stop'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","rules":[{"description":"","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}],"childrenPaths":["$.spec.objectives[*].rawMetric.query.gcm.query","$.spec.objectives[*].rawMetric.query.gcm.projectId","$.spec.objectives[*].rawMetric.query.gcm.promql"]},{"path":"$.spec.objectives[*].rawMetric.query.gcm.query","type":"string","Doc":""},{"path":"$.spec.objectives[*].rawMetric.query.gcm.projectId","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.gcm.promql","type":"string","Doc":""},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.spec.objectives[*].rawMetric.query.azureMonitor.dataType","$.spec.objectives[*].rawMetric.query.azureMonitor.resourceId","$.spec.objectives[*].rawMetric.query.azureMonitor.metricName","$.spec.objectives[*].rawMetric.query.azureMonitor.aggregation","$.spec.objectives[*].rawMetric.query.azureMonitor.dimensions","$.spec.objectives[*].rawMetric.query.azureMonitor.dimensions[*]","$.spec.objectives[*].rawMetric.query.azureMonitor.metricNamespace","$.spec.objectives[*].rawMetric.query.azureMonitor.workspace","$.spec.objectives[*].rawMetric.query.azureMonitor.kqlQuery"]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.dataType","type":"string","Doc":"","values":["metrics","logs"],"rules":[{"description":"must be one of: metrics, logs","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.resourceId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^/subscriptions/[a-zA-Z0-9-]+/resourceGroups/[a-zA-Z0-9-._()]+/providers/[a-zA-Z0-9-.()_]+/[a-zA-Z0-9-_()]+/[a-zA-Z0-9-_()]+$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.metricName","type":"string","Doc":"","rules":[{"description":"","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.aggregation","type":"string","Doc":"","values":["Avg","Min","Max","Count","Sum"],"rules":[{"description":"must be one of: Avg, Min, Max, Count, Sum","errorCode":"one_of","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"elements must be unique","details":"dimension 'name' must be unique for all dimensions","errorCode":"slice_unique","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.spec.objectives[*].rawMetric.query.azureMonitor.dimensions[*].name","$.spec.objectives[*].rawMetric.query.azureMonitor.dimensions[*].value"]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.dimensions[*].name","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.dimensions[*].value","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"string must match regular expression: '^[\\x00-\\x7F]*$'","errorCode":"string_ascii","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.metricNamespace","type":"string","Doc":"","rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","isOptional":true,"rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]}],"childrenPaths":["$.spec.objectives[*].rawMetric.query.azureMonitor.workspace.subscriptionId","$.spec.objectives[*].rawMetric.query.azureMonitor.workspace.resourceGroup","$.spec.objectives[*].rawMetric.query.azureMonitor.workspace.workspaceId"]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.workspace.subscriptionId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","conditions":["none of the objectives is of composite type","dataType is 'logs'"],"examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.workspace.resourceGroup","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-zA-Z0-9-._()]+$'","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.workspace.workspaceId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","conditions":["none of the objectives is of composite type","dataType is 'logs'"],"examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.objectives[*].rawMetric.query.azureMonitor.kqlQuery","type":"string","Doc":"","rules":[{"description":"property is forbidden","errorCode":"forbidden","conditions":["none of the objectives is of composite type","dataType is 'metrics'"]},{"description":"string must match regular expression: '(?m)\\bn9_time\\b'","details":"n9_time is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","dataType is 'logs'"]},{"description":"string must match regular expression: '(?m)\\bn9_value\\b'","details":"n9_value is required","errorCode":"string_match_regexp","conditions":["none of the objectives is of composite type","dataType is 'logs'"]}]},{"path":"$.spec.objectives[*].rawMetric.query.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].rawMetric.query.generic.query"]},{"path":"$.spec.objectives[*].rawMetric.query.generic.query","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.spec.objectives[*].rawMetric.query.honeycomb.calculation","$.spec.objectives[*].rawMetric.query.honeycomb.attribute"]},{"path":"$.spec.objectives[*].rawMetric.query.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true,"values":["CONCURRENCY","COUNT","SUM","AVG","COUNT_DISTINCT","MAX","MIN","P001","P01","P05","P10","P25","P50","P75","P90","P95","P99","P999","RATE_AVG","RATE_SUM","RATE_MAX"],"rules":[{"description":"must be one of: CONCURRENCY, COUNT, SUM, AVG, COUNT_DISTINCT, MAX, MIN, P001, P01, P05, P10, P25, P50, P75, P90, P95, P99, P999, RATE_AVG, RATE_SUM, RATE_MAX","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.honeycomb.attribute","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length","conditions":["none of the objectives is of composite type"]},{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","rules":[{"description":"","conditions":["none of the objectives is of composite type",""]},{"description":"","conditions":["none of the objectives is of composite type",""]}],"childrenPaths":["$.spec.objectives[*].rawMetric.query.logicMonitor.queryType","$.spec.objectives[*].rawMetric.query.logicMonitor.line","$.spec.objectives[*].rawMetric.query.logicMonitor.deviceDataSourceInstanceId","$.spec.objectives[*].rawMetric.query.logicMonitor.graphId","$.spec.objectives[*].rawMetric.query.logicMonitor.websiteId","$.spec.objectives[*].rawMetric.query.logicMonitor.checkpointId","$.spec.objectives[*].rawMetric.query.logicMonitor.graphName"]},{"path":"$.spec.objectives[*].rawMetric.query.logicMonitor.queryType","type":"string","Doc":"","values":["device_metrics","website_metrics"],"rules":[{"description":"must be one of: device_metrics, website_metrics","errorCode":"one_of","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.logicMonitor.line","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].rawMetric.query.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].rawMetric.query.logicMonitor.graphId","type":"int","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].rawMetric.query.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].rawMetric.query.logicMonitor.checkpointId","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].rawMetric.query.logicMonitor.graphName","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type",""]}]},{"path":"$.spec.objectives[*].rawMetric.query.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.spec.objectives[*].rawMetric.query.azurePrometheus.promql"]},{"path":"$.spec.objectives[*].rawMetric.query.azurePrometheus.promql","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["none of the objectives is of composite type"]}]},{"path":"$.spec.objectives[*].composite","type":"CompositeSpec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CompositeSpec represents a composite of SLOs and Composite SLOs.","childrenPaths":["$.spec.objectives[*].composite.maxDelay","$.spec.objectives[*].composite.components","$.spec.objectives[*].composite.objectives","$.spec.objectives[*].composite.objectives[*]"]},{"path":"$.spec.objectives[*].composite.maxDelay","type":"string","Doc":"","rules":[{"description":"","conditions":["at least one composite objective is defined"]},{"description":"duration must be defined with \u003cno value\u003e precision","errorCode":"duration_precision","conditions":["at least one composite objective is defined",""]},{"description":"should be greater than or equal to '1m0s'","errorCode":"greater_than_or_equal_to","conditions":["at least one composite objective is defined",""]}]},{"path":"$.spec.objectives[*].composite.components","type":"Components","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].composite.components.objectives","$.spec.objectives[*].composite.components.objectives[*]"]},{"path":"$.spec.objectives[*].composite.components.objectives","type":"[]CompositeObjective","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"","conditions":["at least one composite objective is defined"]},{"description":"","conditions":["at least one composite objective is defined"]}]},{"path":"$.spec.objectives[*].composite.components.objectives[*]","type":"CompositeObjective","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].composite.components.objectives[*].project","$.spec.objectives[*].composite.components.objectives[*].slo","$.spec.objectives[*].composite.components.objectives[*].objective","$.spec.objectives[*].composite.components.objectives[*].weight","$.spec.objectives[*].composite.components.objectives[*].whenDelayed"]},{"path":"$.spec.objectives[*].composite.components.objectives[*].project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","conditions":["at least one composite objective is defined"],"examples":["my-name","123-abc"]}]},{"path":"$.spec.objectives[*].composite.components.objectives[*].slo","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","conditions":["at least one composite objective is defined"],"examples":["my-name","123-abc"]}]},{"path":"$.spec.objectives[*].composite.components.objectives[*].objective","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","conditions":["at least one composite objective is defined"],"examples":["my-name","123-abc"]}]},{"path":"$.spec.objectives[*].composite.components.objectives[*].weight","type":"float64","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than","conditions":["at least one composite objective is defined"]}]},{"path":"$.spec.objectives[*].composite.components.objectives[*].whenDelayed","type":"string","Doc":"WhenDelayed represents enum for behavior of Composite SLO objectives","values":["CountAsGood","CountAsBad","Ignore"],"rules":[{"description":"must be one of: CountAsGood, CountAsBad, Ignore","errorCode":"one_of","conditions":["at least one composite objective is defined"]}]},{"path":"$.spec.objectives[*].composite.objectives","type":"[]CompositeObjective","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.spec.objectives[*].composite.objectives[*]","type":"CompositeObjective","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.spec.objectives[*].composite.objectives[*].project","$.spec.objectives[*].composite.objectives[*].slo","$.spec.objectives[*].composite.objectives[*].objective","$.spec.objectives[*].composite.objectives[*].weight","$.spec.objectives[*].composite.objectives[*].whenDelayed"]},{"path":"$.spec.objectives[*].composite.objectives[*].project","type":"string","Doc":""},{"path":"$.spec.objectives[*].composite.objectives[*].slo","type":"string","Doc":""},{"path":"$.spec.objectives[*].composite.objectives[*].objective","type":"string","Doc":""},{"path":"$.spec.objectives[*].composite.objectives[*].weight","type":"float64","Doc":""},{"path":"$.spec.objectives[*].composite.objectives[*].whenDelayed","type":"string","Doc":"WhenDelayed represents enum for behavior of Composite SLO objectives"},{"path":"$.spec.objectives[*].op","type":"string","Doc":"","values":["lt","gte","gt","lte"],"rules":[{"description":"must be one of: lt, gte, gt, lte","errorCode":"one_of","conditions":["none of the objectives is of composite type","rawMetric is defined"]}]},{"path":"$.spec.objectives[*].primary","type":"bool","Doc":"Primary is used to highlight the main (primary) objective of the [SLO]."},{"path":"$.spec.service","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.timeWindows","type":"[]TimeWindow","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"length must be between 1 and 1","errorCode":"slice_length"}]},{"path":"$.spec.timeWindows[*]","type":"TimeWindow","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"TimeWindow represents content of time window","childrenPaths":["$.spec.timeWindows[*].unit","$.spec.timeWindows[*].count","$.spec.timeWindows[*].isRolling","$.spec.timeWindows[*].calendar","$.spec.timeWindows[*].period"]},{"path":"$.spec.timeWindows[*].unit","type":"string","Doc":"","values":["Second","Minute","Hour","Day","Week","Month","Quarter","Year"],"rules":[{"description":"must be one of: Second, Minute, Hour, Day, Week, Month, Quarter, Year","errorCode":"one_of"}]},{"path":"$.spec.timeWindows[*].count","type":"int","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than"}]},{"path":"$.spec.timeWindows[*].isRolling","type":"bool","Doc":""},{"path":"$.spec.timeWindows[*].calendar","type":"Calendar","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"Calendar struct represents calendar time window","childrenPaths":["$.spec.timeWindows[*].calendar.startTime","$.spec.timeWindows[*].calendar.timeZone"]},{"path":"$.spec.timeWindows[*].calendar.startTime","type":"string","Doc":""},{"path":"$.spec.timeWindows[*].calendar.timeZone","type":"string","Doc":""},{"path":"$.spec.timeWindows[*].period","type":"Period","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"Period is only returned in `/get/slo` requests it is ignored for `/apply`\n\nPeriod represents period of time","childrenPaths":["$.spec.timeWindows[*].period.begin","$.spec.timeWindows[*].period.end"]},{"path":"$.spec.timeWindows[*].period.begin","type":"string","Doc":""},{"path":"$.spec.timeWindows[*].period.end","type":"string","Doc":""},{"path":"$.spec.alertPolicies","type":"[]string","Doc":""},{"path":"$.spec.alertPolicies[*]","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.attachments","type":"[]Attachment","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"length must be between 0 and 20","errorCode":"slice_length"}]},{"path":"$.spec.attachments[*]","type":"Attachment","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"Attachment represents user defined URL attached to SLO.","childrenPaths":["$.spec.attachments[*].url","$.spec.attachments[*].displayName"]},{"path":"$.spec.attachments[*].url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.attachments[*].displayName","type":"string","Doc":"","isOptional":true,"rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.spec.createdAt","type":"string","Doc":"CreatedAt is the date of the [SLO] creation in RFC3339 format.\nRead-only field."},{"path":"$.spec.createdBy","type":"string","Doc":"CreatedBy is the id of the user who first created the SLO.\nRead-only field."},{"path":"$.spec.composite","type":"Composite","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"Deprecated: this implementation of Composite will be removed and replaced with SLO.Spec.Objectives.Composite.\n\nComposite represents configuration for Composite SLO.\nDeprecated: this implementation of Composite will be removed and replaced with SLO.Spec.Objectives.Composite.","isDeprecated":true,"isOptional":true,"rules":[{"description":"property is forbidden","details":"composite section is forbidden when spec.objectives[0].composite is provided","errorCode":"forbidden","conditions":["at least one composite objective is defined"]},{"description":"","conditions":[""]}],"childrenPaths":["$.spec.composite.target","$.spec.composite.burnRateCondition"]},{"path":"$.spec.composite.target","type":"float64","Doc":"","rules":[{"description":"should be greater than '0'","errorCode":"greater_than"},{"description":"should be less than '1'","errorCode":"less_than"}]},{"path":"$.spec.composite.burnRateCondition","type":"CompositeBurnRateCondition","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CompositeBurnRateCondition represents configuration for Composite SLO  with occurrences budgeting method.","childrenPaths":["$.spec.composite.burnRateCondition.value","$.spec.composite.burnRateCondition.op"]},{"path":"$.spec.composite.burnRateCondition.value","type":"float64","Doc":"","rules":[{"description":"should be greater than or equal to '0'","errorCode":"greater_than_or_equal_to"},{"description":"should be less than or equal to '1000'","errorCode":"less_than_or_equal_to"}]},{"path":"$.spec.composite.burnRateCondition.op","type":"string","Doc":"","values":["gt"],"rules":[{"description":"should be equal to 'gt'","errorCode":"equal_to"}]},{"path":"$.spec.anomalyConfig","type":"AnomalyConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AnomalyConfig represents relationship between anomaly type and selected notification methods.\nThis will be removed (moved into Anomaly Policy) in PC-8502","childrenPaths":["$.spec.anomalyConfig.noData"]},{"path":"$.spec.anomalyConfig.noData","type":"AnomalyConfigNoData","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AnomalyConfigNoData contains alertMethods used for No Data anomaly type.","childrenPaths":["$.spec.anomalyConfig.noData.alertMethods","$.spec.anomalyConfig.noData.alertMethods[*]"]},{"path":"$.spec.anomalyConfig.noData.alertMethods","type":"[]AnomalyConfigAlertMethod","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","rules":[{"description":"length must be greater than or equal to 1","errorCode":"slice_min_length"},{"description":"elements must be unique","errorCode":"slice_unique"}]},{"path":"$.spec.anomalyConfig.noData.alertMethods[*]","type":"AnomalyConfigAlertMethod","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AnomalyConfigAlertMethod represents a single alert method used in AnomalyConfig\ndefined by name and project.","childrenPaths":["$.spec.anomalyConfig.noData.alertMethods[*].name","$.spec.anomalyConfig.noData.alertMethods[*].project"]},{"path":"$.spec.anomalyConfig.noData.alertMethods[*].name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.anomalyConfig.noData.alertMethods[*].project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.tier","type":"string","Doc":"","isOptional":true,"rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.status","type":"Status","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"Status holds dynamic fields returned when the Service is fetched from Nobl9 platform.\nStatus is not part of the static object definition.","childrenPaths":["$.status.updatedAt","$.status.compositeSlo","$.status.errorBudgetAdjustment","$.status.replay","$.status.targetSlo","$.status.objectiveIndicatorValidation","$.status.objectiveIndicatorValidation[*]","$.status.timeTravel"]},{"path":"$.status.updatedAt","type":"string","Doc":""},{"path":"$.status.compositeSlo","type":"ProcessStatus","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.compositeSlo.status","$.status.compositeSlo.triggeredBy","$.status.compositeSlo.unit","$.status.compositeSlo.value","$.status.compositeSlo.startTime","$.status.compositeSlo.endTime"]},{"path":"$.status.compositeSlo.status","type":"string","Doc":""},{"path":"$.status.compositeSlo.triggeredBy","type":"string","Doc":""},{"path":"$.status.compositeSlo.unit","type":"string","Doc":""},{"path":"$.status.compositeSlo.value","type":"int","Doc":""},{"path":"$.status.compositeSlo.startTime","type":"string","Doc":""},{"path":"$.status.compositeSlo.endTime","type":"string","Doc":""},{"path":"$.status.errorBudgetAdjustment","type":"ProcessStatus","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.errorBudgetAdjustment.status","$.status.errorBudgetAdjustment.triggeredBy","$.status.errorBudgetAdjustment.unit","$.status.errorBudgetAdjustment.value","$.status.errorBudgetAdjustment.startTime","$.status.errorBudgetAdjustment.endTime"]},{"path":"$.status.errorBudgetAdjustment.status","type":"string","Doc":""},{"path":"$.status.errorBudgetAdjustment.triggeredBy","type":"string","Doc":""},{"path":"$.status.errorBudgetAdjustment.unit","type":"string","Doc":""},{"path":"$.status.errorBudgetAdjustment.value","type":"int","Doc":""},{"path":"$.status.errorBudgetAdjustment.startTime","type":"string","Doc":""},{"path":"$.status.errorBudgetAdjustment.endTime","type":"string","Doc":""},{"path":"$.status.replay","type":"ProcessStatus","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.replay.status","$.status.replay.triggeredBy","$.status.replay.unit","$.status.replay.value","$.status.replay.startTime","$.status.replay.endTime"]},{"path":"$.status.replay.status","type":"string","Doc":""},{"path":"$.status.replay.triggeredBy","type":"string","Doc":""},{"path":"$.status.replay.unit","type":"string","Doc":""},{"path":"$.status.replay.value","type":"int","Doc":""},{"path":"$.status.replay.startTime","type":"string","Doc":""},{"path":"$.status.replay.endTime","type":"string","Doc":""},{"path":"$.status.targetSlo","type":"TargetSloStatus","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"TargetSloStatus represents the status of Replay  a target SLO process.","childrenPaths":["$.status.targetSlo.targetTimeTravel","$.status.targetSlo.replay"]},{"path":"$.status.targetSlo.targetTimeTravel","type":"ReplayStatus","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"Deprecated: use TargetSloStatus.Replay instead.\n\nDeprecated: ReplayStatus exists for historical compatibility\nand should not be used.","isDeprecated":true,"childrenPaths":["$.status.targetSlo.targetTimeTravel.source","$.status.targetSlo.targetTimeTravel.status","$.status.targetSlo.targetTimeTravel.triggeredBy","$.status.targetSlo.targetTimeTravel.unit","$.status.targetSlo.targetTimeTravel.value","$.status.targetSlo.targetTimeTravel.startTime"]},{"path":"$.status.targetSlo.targetTimeTravel.source","type":"string","Doc":""},{"path":"$.status.targetSlo.targetTimeTravel.status","type":"string","Doc":""},{"path":"$.status.targetSlo.targetTimeTravel.triggeredBy","type":"string","Doc":""},{"path":"$.status.targetSlo.targetTimeTravel.unit","type":"string","Doc":""},{"path":"$.status.targetSlo.targetTimeTravel.value","type":"int","Doc":""},{"path":"$.status.targetSlo.targetTimeTravel.startTime","type":"string","Doc":""},{"path":"$.status.targetSlo.replay","type":"ProcessStatus","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.targetSlo.replay.status","$.status.targetSlo.replay.triggeredBy","$.status.targetSlo.replay.unit","$.status.targetSlo.replay.value","$.status.targetSlo.replay.startTime","$.status.targetSlo.replay.endTime"]},{"path":"$.status.targetSlo.replay.status","type":"string","Doc":""},{"path":"$.status.targetSlo.replay.triggeredBy","type":"string","Doc":""},{"path":"$.status.targetSlo.replay.unit","type":"string","Doc":""},{"path":"$.status.targetSlo.replay.value","type":"int","Doc":""},{"path":"$.status.targetSlo.replay.startTime","type":"string","Doc":""},{"path":"$.status.targetSlo.replay.endTime","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation","type":"[]ptr","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*]","type":"ObjectiveIndicatorValidationStatus","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].objectiveName","$.status.objectiveIndicatorValidation[*].validationStatus","$.status.objectiveIndicatorValidation[*].goodMetric","$.status.objectiveIndicatorValidation[*].badMetric","$.status.objectiveIndicatorValidation[*].totalMetric","$.status.objectiveIndicatorValidation[*].rawMetric"]},{"path":"$.status.objectiveIndicatorValidation[*].objectiveName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus","type":"ValidationStatus","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric","type":"ValidationDetails","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.message","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.validationResult","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logTimestamp","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.httpStatusCode","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.query","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.prometheus","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.datadog","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.newRelic","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.appDynamics","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.splunk","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.lightstep","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.splunkObservability","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.dynatrace","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.elasticsearch","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.thousandEyes","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.graphite","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.bigQuery","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.opentsdb","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.grafanaLoki","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.pingdom","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.amazonPrometheus","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.redshift","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.sumoLogic","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.influxdb","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.gcm","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.generic","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.honeycomb","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azurePrometheus"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.message","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.validationResult","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logTimestamp","type":"Time","package":"time","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.httpStatusCode","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.prometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.prometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.datadog.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.datadog.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.newRelic.nrql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.newRelic.nrql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.appDynamics.applicationName","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.appDynamics.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.appDynamics.applicationName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.appDynamics.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.splunk.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.splunk.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.lightstep.streamId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.lightstep.typeOfData","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.lightstep.percentile","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.lightstep.uql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.lightstep.streamId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.lightstep.typeOfData","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.lightstep.percentile","type":"float64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.lightstep.uql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.splunkObservability.program"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.splunkObservability.program","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.dynatrace.metricSelector"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.dynatrace.metricSelector","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.elasticsearch.index","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.elasticsearch.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.elasticsearch.index","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.elasticsearch.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.thousandEyes.testID","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.thousandEyes.testType"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.thousandEyes.testType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.graphite.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.graphite.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.bigQuery.query","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.bigQuery.projectId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.bigQuery.location"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.bigQuery.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.bigQuery.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.bigQuery.location","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.opentsdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.opentsdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.grafanaLoki.logql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.grafanaLoki.logql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.region","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.namespace","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.metricName","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.stat","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.dimensions","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.dimensions[*]","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.accountId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.sql","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.json"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.namespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.stat","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.dimensions[*].name","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.accountId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.sql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.cloudWatch.json","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.pingdom.checkId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.pingdom.checkType","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.pingdom.status"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.pingdom.checkId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.pingdom.checkType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.pingdom.status","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.amazonPrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.amazonPrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.redshift.region","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.redshift.clusterId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.redshift.databaseName","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.redshift.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.redshift.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.redshift.clusterId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.redshift.databaseName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.redshift.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.sumoLogic.type","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.sumoLogic.query","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.sumoLogic.quantization","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.sumoLogic.rollup"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.sumoLogic.type","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.sumoLogic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.sumoLogic.quantization","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.sumoLogic.rollup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.metricType","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.infrastructure","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.metricType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.infrastructure.metricRetrievalMethod","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.infrastructure.query","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.infrastructure.snapshotId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.infrastructure.metricId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.infrastructure.pluginId"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.infrastructure.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.infrastructure.pluginId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.metricId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.aggregation","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.groupBy","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.apiQuery","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.includeInternal","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.includeSynthetic"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.groupBy.tag","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.groupBy.tagEntity","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.influxdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.influxdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.gcm.query","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.gcm.projectId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.gcm.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.gcm.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.gcm.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.gcm.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.dataType","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.resourceId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.metricName","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.aggregation","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.dimensions","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.dimensions[*]","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.metricNamespace","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.workspace","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.kqlQuery"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.dataType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.resourceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.dimensions[*].name","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.metricNamespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.workspace.subscriptionId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.workspace.resourceGroup","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.workspace.workspaceId"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.workspace.subscriptionId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.workspace.resourceGroup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.workspace.workspaceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azureMonitor.kqlQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.generic.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.generic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.honeycomb.calculation","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.honeycomb.attribute"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.honeycomb.attribute","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.queryType","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.line","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.deviceDataSourceInstanceId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.graphId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.websiteId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.checkpointId","$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.graphName"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.queryType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.line","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.graphId","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.checkpointId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.logicMonitor.graphName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azurePrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.goodMetric.azurePrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric","type":"ValidationDetails","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.message","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.validationResult","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logTimestamp","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.httpStatusCode","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.query","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.prometheus","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.datadog","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.newRelic","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.appDynamics","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.splunk","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.lightstep","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.splunkObservability","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.dynatrace","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.elasticsearch","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.thousandEyes","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.graphite","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.bigQuery","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.opentsdb","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.grafanaLoki","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.pingdom","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.amazonPrometheus","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.redshift","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.sumoLogic","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.influxdb","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.gcm","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.generic","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.honeycomb","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azurePrometheus"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.message","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.validationResult","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logTimestamp","type":"Time","package":"time","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.httpStatusCode","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.prometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.prometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.datadog.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.datadog.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.newRelic.nrql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.newRelic.nrql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.appDynamics.applicationName","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.appDynamics.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.appDynamics.applicationName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.appDynamics.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.splunk.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.splunk.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.lightstep.streamId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.lightstep.typeOfData","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.lightstep.percentile","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.lightstep.uql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.lightstep.streamId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.lightstep.typeOfData","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.lightstep.percentile","type":"float64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.lightstep.uql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.splunkObservability.program"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.splunkObservability.program","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.dynatrace.metricSelector"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.dynatrace.metricSelector","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.elasticsearch.index","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.elasticsearch.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.elasticsearch.index","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.elasticsearch.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.thousandEyes.testID","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.thousandEyes.testType"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.thousandEyes.testType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.graphite.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.graphite.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.bigQuery.query","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.bigQuery.projectId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.bigQuery.location"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.bigQuery.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.bigQuery.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.bigQuery.location","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.opentsdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.opentsdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.grafanaLoki.logql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.grafanaLoki.logql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.region","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.namespace","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.metricName","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.stat","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.dimensions","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.dimensions[*]","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.accountId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.sql","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.json"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.namespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.stat","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.dimensions[*].name","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.accountId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.sql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.cloudWatch.json","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.pingdom.checkId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.pingdom.checkType","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.pingdom.status"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.pingdom.checkId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.pingdom.checkType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.pingdom.status","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.amazonPrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.amazonPrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.redshift.region","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.redshift.clusterId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.redshift.databaseName","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.redshift.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.redshift.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.redshift.clusterId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.redshift.databaseName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.redshift.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.sumoLogic.type","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.sumoLogic.query","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.sumoLogic.quantization","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.sumoLogic.rollup"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.sumoLogic.type","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.sumoLogic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.sumoLogic.quantization","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.sumoLogic.rollup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.metricType","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.infrastructure","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.metricType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.infrastructure.metricRetrievalMethod","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.infrastructure.query","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.infrastructure.snapshotId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.infrastructure.metricId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.infrastructure.pluginId"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.infrastructure.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.infrastructure.pluginId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.metricId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.aggregation","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.groupBy","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.apiQuery","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.includeInternal","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.includeSynthetic"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.groupBy.tag","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.groupBy.tagEntity","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.influxdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.influxdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.gcm.query","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.gcm.projectId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.gcm.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.gcm.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.gcm.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.gcm.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.dataType","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.resourceId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.metricName","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.aggregation","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.dimensions","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.dimensions[*]","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.metricNamespace","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.workspace","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.kqlQuery"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.dataType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.resourceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.dimensions[*].name","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.metricNamespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.workspace.subscriptionId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.workspace.resourceGroup","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.workspace.workspaceId"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.workspace.subscriptionId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.workspace.resourceGroup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.workspace.workspaceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azureMonitor.kqlQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.generic.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.generic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.honeycomb.calculation","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.honeycomb.attribute"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.honeycomb.attribute","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.queryType","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.line","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.deviceDataSourceInstanceId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.graphId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.websiteId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.checkpointId","$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.graphName"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.queryType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.line","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.graphId","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.checkpointId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.logicMonitor.graphName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azurePrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.badMetric.azurePrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric","type":"ValidationDetails","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.message","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.validationResult","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logTimestamp","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.httpStatusCode","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.query","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.prometheus","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.datadog","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.newRelic","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.appDynamics","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.splunk","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.lightstep","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.splunkObservability","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.dynatrace","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.elasticsearch","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.thousandEyes","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.graphite","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.bigQuery","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.opentsdb","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.grafanaLoki","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.pingdom","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.amazonPrometheus","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.redshift","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.sumoLogic","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.influxdb","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.gcm","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.generic","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.honeycomb","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azurePrometheus"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.message","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.validationResult","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logTimestamp","type":"Time","package":"time","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.httpStatusCode","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.prometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.prometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.datadog.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.datadog.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.newRelic.nrql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.newRelic.nrql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.appDynamics.applicationName","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.appDynamics.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.appDynamics.applicationName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.appDynamics.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.splunk.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.splunk.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.lightstep.streamId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.lightstep.typeOfData","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.lightstep.percentile","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.lightstep.uql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.lightstep.streamId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.lightstep.typeOfData","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.lightstep.percentile","type":"float64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.lightstep.uql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.splunkObservability.program"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.splunkObservability.program","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.dynatrace.metricSelector"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.dynatrace.metricSelector","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.elasticsearch.index","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.elasticsearch.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.elasticsearch.index","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.elasticsearch.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.thousandEyes.testID","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.thousandEyes.testType"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.thousandEyes.testType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.graphite.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.graphite.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.bigQuery.query","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.bigQuery.projectId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.bigQuery.location"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.bigQuery.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.bigQuery.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.bigQuery.location","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.opentsdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.opentsdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.grafanaLoki.logql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.grafanaLoki.logql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.region","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.namespace","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.metricName","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.stat","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.dimensions","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.dimensions[*]","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.accountId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.sql","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.json"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.namespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.stat","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.dimensions[*].name","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.accountId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.sql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.cloudWatch.json","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.pingdom.checkId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.pingdom.checkType","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.pingdom.status"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.pingdom.checkId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.pingdom.checkType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.pingdom.status","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.amazonPrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.amazonPrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.redshift.region","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.redshift.clusterId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.redshift.databaseName","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.redshift.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.redshift.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.redshift.clusterId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.redshift.databaseName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.redshift.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.sumoLogic.type","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.sumoLogic.query","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.sumoLogic.quantization","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.sumoLogic.rollup"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.sumoLogic.type","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.sumoLogic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.sumoLogic.quantization","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.sumoLogic.rollup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.metricType","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.infrastructure","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.metricType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.infrastructure.metricRetrievalMethod","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.infrastructure.query","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.infrastructure.snapshotId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.infrastructure.metricId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.infrastructure.pluginId"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.infrastructure.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.infrastructure.pluginId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.metricId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.aggregation","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.groupBy","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.apiQuery","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.includeInternal","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.includeSynthetic"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.groupBy.tag","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.groupBy.tagEntity","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.influxdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.influxdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.gcm.query","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.gcm.projectId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.gcm.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.gcm.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.gcm.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.gcm.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.dataType","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.resourceId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.metricName","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.aggregation","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.dimensions","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.dimensions[*]","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.metricNamespace","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.workspace","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.kqlQuery"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.dataType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.resourceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.dimensions[*].name","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.metricNamespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.workspace.subscriptionId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.workspace.resourceGroup","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.workspace.workspaceId"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.workspace.subscriptionId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.workspace.resourceGroup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.workspace.workspaceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azureMonitor.kqlQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.generic.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.generic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.honeycomb.calculation","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.honeycomb.attribute"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.honeycomb.attribute","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.queryType","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.line","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.deviceDataSourceInstanceId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.graphId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.websiteId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.checkpointId","$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.graphName"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.queryType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.line","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.graphId","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.checkpointId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.logicMonitor.graphName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azurePrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.totalMetric.azurePrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric","type":"ValidationDetails","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.message","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.validationResult","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logTimestamp","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.httpStatusCode","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.query","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.prometheus","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.datadog","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.newRelic","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.appDynamics","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.splunk","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.lightstep","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.splunkObservability","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.dynatrace","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.elasticsearch","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.thousandEyes","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.graphite","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.bigQuery","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.opentsdb","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.grafanaLoki","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.pingdom","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.amazonPrometheus","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.redshift","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.sumoLogic","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.influxdb","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.gcm","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.generic","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.honeycomb","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azurePrometheus"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.message","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.validationResult","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logTimestamp","type":"Time","package":"time","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.httpStatusCode","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.prometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.prometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.datadog.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.datadog.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.newRelic.nrql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.newRelic.nrql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.appDynamics.applicationName","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.appDynamics.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.appDynamics.applicationName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.appDynamics.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.splunk.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.splunk.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.lightstep.streamId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.lightstep.typeOfData","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.lightstep.percentile","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.lightstep.uql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.lightstep.streamId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.lightstep.typeOfData","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.lightstep.percentile","type":"float64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.lightstep.uql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.splunkObservability.program"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.splunkObservability.program","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.dynatrace.metricSelector"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.dynatrace.metricSelector","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.elasticsearch.index","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.elasticsearch.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.elasticsearch.index","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.elasticsearch.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.thousandEyes.testID","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.thousandEyes.testType"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.thousandEyes.testType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.graphite.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.graphite.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.bigQuery.query","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.bigQuery.projectId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.bigQuery.location"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.bigQuery.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.bigQuery.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.bigQuery.location","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.opentsdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.opentsdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.grafanaLoki.logql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.grafanaLoki.logql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.region","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.namespace","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.metricName","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.stat","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.dimensions","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.dimensions[*]","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.accountId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.sql","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.json"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.namespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.stat","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.dimensions[*].name","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.accountId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.sql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.cloudWatch.json","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.pingdom.checkId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.pingdom.checkType","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.pingdom.status"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.pingdom.checkId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.pingdom.checkType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.pingdom.status","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.amazonPrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.amazonPrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.redshift.region","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.redshift.clusterId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.redshift.databaseName","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.redshift.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.redshift.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.redshift.clusterId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.redshift.databaseName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.redshift.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.sumoLogic.type","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.sumoLogic.query","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.sumoLogic.quantization","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.sumoLogic.rollup"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.sumoLogic.type","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.sumoLogic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.sumoLogic.quantization","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.sumoLogic.rollup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.metricType","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.infrastructure","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.metricType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.infrastructure.metricRetrievalMethod","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.infrastructure.query","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.infrastructure.snapshotId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.infrastructure.metricId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.infrastructure.pluginId"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.infrastructure.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.infrastructure.pluginId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.metricId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.aggregation","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.groupBy","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.apiQuery","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.includeInternal","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.includeSynthetic"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.groupBy.tag","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.groupBy.tagEntity","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.influxdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.influxdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.gcm.query","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.gcm.projectId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.gcm.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.gcm.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.gcm.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.gcm.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.dataType","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.resourceId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.metricName","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.aggregation","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.dimensions","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.dimensions[*]","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.metricNamespace","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.workspace","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.kqlQuery"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.dataType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.resourceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.dimensions[*].name","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.metricNamespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.workspace.subscriptionId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.workspace.resourceGroup","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.workspace.workspaceId"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.workspace.subscriptionId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.workspace.resourceGroup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.workspace.workspaceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azureMonitor.kqlQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.generic.query"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.generic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.honeycomb.calculation","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.honeycomb.attribute"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.honeycomb.attribute","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.queryType","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.line","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.deviceDataSourceInstanceId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.graphId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.websiteId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.checkpointId","$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.graphName"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.queryType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.line","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.graphId","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.checkpointId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.logicMonitor.graphName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azurePrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].validationStatus.rawMetric.azurePrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric","type":"ValidationDetails","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.message","$.status.objectiveIndicatorValidation[*].goodMetric.validationResult","$.status.objectiveIndicatorValidation[*].goodMetric.logTimestamp","$.status.objectiveIndicatorValidation[*].goodMetric.httpStatusCode","$.status.objectiveIndicatorValidation[*].goodMetric.query","$.status.objectiveIndicatorValidation[*].goodMetric.prometheus","$.status.objectiveIndicatorValidation[*].goodMetric.datadog","$.status.objectiveIndicatorValidation[*].goodMetric.newRelic","$.status.objectiveIndicatorValidation[*].goodMetric.appDynamics","$.status.objectiveIndicatorValidation[*].goodMetric.splunk","$.status.objectiveIndicatorValidation[*].goodMetric.lightstep","$.status.objectiveIndicatorValidation[*].goodMetric.splunkObservability","$.status.objectiveIndicatorValidation[*].goodMetric.dynatrace","$.status.objectiveIndicatorValidation[*].goodMetric.elasticsearch","$.status.objectiveIndicatorValidation[*].goodMetric.thousandEyes","$.status.objectiveIndicatorValidation[*].goodMetric.graphite","$.status.objectiveIndicatorValidation[*].goodMetric.bigQuery","$.status.objectiveIndicatorValidation[*].goodMetric.opentsdb","$.status.objectiveIndicatorValidation[*].goodMetric.grafanaLoki","$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch","$.status.objectiveIndicatorValidation[*].goodMetric.pingdom","$.status.objectiveIndicatorValidation[*].goodMetric.amazonPrometheus","$.status.objectiveIndicatorValidation[*].goodMetric.redshift","$.status.objectiveIndicatorValidation[*].goodMetric.sumoLogic","$.status.objectiveIndicatorValidation[*].goodMetric.instana","$.status.objectiveIndicatorValidation[*].goodMetric.influxdb","$.status.objectiveIndicatorValidation[*].goodMetric.gcm","$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor","$.status.objectiveIndicatorValidation[*].goodMetric.generic","$.status.objectiveIndicatorValidation[*].goodMetric.honeycomb","$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor","$.status.objectiveIndicatorValidation[*].goodMetric.azurePrometheus"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.message","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.validationResult","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.logTimestamp","type":"Time","package":"time","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.httpStatusCode","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.prometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.prometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.datadog.query"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.datadog.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.newRelic.nrql"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.newRelic.nrql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.appDynamics.applicationName","$.status.objectiveIndicatorValidation[*].goodMetric.appDynamics.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.appDynamics.applicationName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.appDynamics.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.splunk.query"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.splunk.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.lightstep.streamId","$.status.objectiveIndicatorValidation[*].goodMetric.lightstep.typeOfData","$.status.objectiveIndicatorValidation[*].goodMetric.lightstep.percentile","$.status.objectiveIndicatorValidation[*].goodMetric.lightstep.uql"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.lightstep.streamId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.lightstep.typeOfData","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.lightstep.percentile","type":"float64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.lightstep.uql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.splunkObservability.program"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.splunkObservability.program","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.dynatrace.metricSelector"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.dynatrace.metricSelector","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.elasticsearch.index","$.status.objectiveIndicatorValidation[*].goodMetric.elasticsearch.query"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.elasticsearch.index","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.elasticsearch.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.thousandEyes.testID","$.status.objectiveIndicatorValidation[*].goodMetric.thousandEyes.testType"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.thousandEyes.testType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.graphite.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.graphite.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.bigQuery.query","$.status.objectiveIndicatorValidation[*].goodMetric.bigQuery.projectId","$.status.objectiveIndicatorValidation[*].goodMetric.bigQuery.location"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.bigQuery.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.bigQuery.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.bigQuery.location","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.opentsdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.opentsdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.grafanaLoki.logql"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.grafanaLoki.logql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.region","$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.namespace","$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.metricName","$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.stat","$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.dimensions","$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.dimensions[*]","$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.accountId","$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.sql","$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.json"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.namespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.stat","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.dimensions[*].name","$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.accountId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.sql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.cloudWatch.json","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.pingdom.checkId","$.status.objectiveIndicatorValidation[*].goodMetric.pingdom.checkType","$.status.objectiveIndicatorValidation[*].goodMetric.pingdom.status"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.pingdom.checkId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.pingdom.checkType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.pingdom.status","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.amazonPrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.amazonPrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.redshift.region","$.status.objectiveIndicatorValidation[*].goodMetric.redshift.clusterId","$.status.objectiveIndicatorValidation[*].goodMetric.redshift.databaseName","$.status.objectiveIndicatorValidation[*].goodMetric.redshift.query"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.redshift.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.redshift.clusterId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.redshift.databaseName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.redshift.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.sumoLogic.type","$.status.objectiveIndicatorValidation[*].goodMetric.sumoLogic.query","$.status.objectiveIndicatorValidation[*].goodMetric.sumoLogic.quantization","$.status.objectiveIndicatorValidation[*].goodMetric.sumoLogic.rollup"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.sumoLogic.type","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.sumoLogic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.sumoLogic.quantization","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.sumoLogic.rollup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.instana.metricType","$.status.objectiveIndicatorValidation[*].goodMetric.instana.infrastructure","$.status.objectiveIndicatorValidation[*].goodMetric.instana.application"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.metricType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.instana.infrastructure.metricRetrievalMethod","$.status.objectiveIndicatorValidation[*].goodMetric.instana.infrastructure.query","$.status.objectiveIndicatorValidation[*].goodMetric.instana.infrastructure.snapshotId","$.status.objectiveIndicatorValidation[*].goodMetric.instana.infrastructure.metricId","$.status.objectiveIndicatorValidation[*].goodMetric.instana.infrastructure.pluginId"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.infrastructure.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.infrastructure.pluginId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.metricId","$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.aggregation","$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.groupBy","$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.apiQuery","$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.includeInternal","$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.includeSynthetic"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.groupBy.tag","$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.groupBy.tagEntity","$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.influxdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.influxdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.gcm.query","$.status.objectiveIndicatorValidation[*].goodMetric.gcm.projectId","$.status.objectiveIndicatorValidation[*].goodMetric.gcm.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.gcm.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.gcm.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.gcm.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.dataType","$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.resourceId","$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.metricName","$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.aggregation","$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.dimensions","$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.dimensions[*]","$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.metricNamespace","$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.workspace","$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.kqlQuery"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.dataType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.resourceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.dimensions[*].name","$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.metricNamespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.workspace.subscriptionId","$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.workspace.resourceGroup","$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.workspace.workspaceId"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.workspace.subscriptionId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.workspace.resourceGroup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.workspace.workspaceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azureMonitor.kqlQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.generic.query"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.generic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.honeycomb.calculation","$.status.objectiveIndicatorValidation[*].goodMetric.honeycomb.attribute"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.honeycomb.attribute","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.queryType","$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.line","$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.deviceDataSourceInstanceId","$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.graphId","$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.websiteId","$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.checkpointId","$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.graphName"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.queryType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.line","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.graphId","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.checkpointId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.logicMonitor.graphName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].goodMetric.azurePrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].goodMetric.azurePrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric","type":"ValidationDetails","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.message","$.status.objectiveIndicatorValidation[*].badMetric.validationResult","$.status.objectiveIndicatorValidation[*].badMetric.logTimestamp","$.status.objectiveIndicatorValidation[*].badMetric.httpStatusCode","$.status.objectiveIndicatorValidation[*].badMetric.query","$.status.objectiveIndicatorValidation[*].badMetric.prometheus","$.status.objectiveIndicatorValidation[*].badMetric.datadog","$.status.objectiveIndicatorValidation[*].badMetric.newRelic","$.status.objectiveIndicatorValidation[*].badMetric.appDynamics","$.status.objectiveIndicatorValidation[*].badMetric.splunk","$.status.objectiveIndicatorValidation[*].badMetric.lightstep","$.status.objectiveIndicatorValidation[*].badMetric.splunkObservability","$.status.objectiveIndicatorValidation[*].badMetric.dynatrace","$.status.objectiveIndicatorValidation[*].badMetric.elasticsearch","$.status.objectiveIndicatorValidation[*].badMetric.thousandEyes","$.status.objectiveIndicatorValidation[*].badMetric.graphite","$.status.objectiveIndicatorValidation[*].badMetric.bigQuery","$.status.objectiveIndicatorValidation[*].badMetric.opentsdb","$.status.objectiveIndicatorValidation[*].badMetric.grafanaLoki","$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch","$.status.objectiveIndicatorValidation[*].badMetric.pingdom","$.status.objectiveIndicatorValidation[*].badMetric.amazonPrometheus","$.status.objectiveIndicatorValidation[*].badMetric.redshift","$.status.objectiveIndicatorValidation[*].badMetric.sumoLogic","$.status.objectiveIndicatorValidation[*].badMetric.instana","$.status.objectiveIndicatorValidation[*].badMetric.influxdb","$.status.objectiveIndicatorValidation[*].badMetric.gcm","$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor","$.status.objectiveIndicatorValidation[*].badMetric.generic","$.status.objectiveIndicatorValidation[*].badMetric.honeycomb","$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor","$.status.objectiveIndicatorValidation[*].badMetric.azurePrometheus"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.message","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.validationResult","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.logTimestamp","type":"Time","package":"time","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.httpStatusCode","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.prometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.prometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.datadog.query"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.datadog.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.newRelic.nrql"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.newRelic.nrql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.appDynamics.applicationName","$.status.objectiveIndicatorValidation[*].badMetric.appDynamics.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.appDynamics.applicationName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.appDynamics.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.splunk.query"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.splunk.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.lightstep.streamId","$.status.objectiveIndicatorValidation[*].badMetric.lightstep.typeOfData","$.status.objectiveIndicatorValidation[*].badMetric.lightstep.percentile","$.status.objectiveIndicatorValidation[*].badMetric.lightstep.uql"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.lightstep.streamId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.lightstep.typeOfData","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.lightstep.percentile","type":"float64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.lightstep.uql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.splunkObservability.program"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.splunkObservability.program","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.dynatrace.metricSelector"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.dynatrace.metricSelector","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.elasticsearch.index","$.status.objectiveIndicatorValidation[*].badMetric.elasticsearch.query"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.elasticsearch.index","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.elasticsearch.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.thousandEyes.testID","$.status.objectiveIndicatorValidation[*].badMetric.thousandEyes.testType"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.thousandEyes.testType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.graphite.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.graphite.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.bigQuery.query","$.status.objectiveIndicatorValidation[*].badMetric.bigQuery.projectId","$.status.objectiveIndicatorValidation[*].badMetric.bigQuery.location"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.bigQuery.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.bigQuery.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.bigQuery.location","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.opentsdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.opentsdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.grafanaLoki.logql"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.grafanaLoki.logql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.region","$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.namespace","$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.metricName","$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.stat","$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.dimensions","$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.dimensions[*]","$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.accountId","$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.sql","$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.json"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.namespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.stat","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.dimensions[*].name","$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.accountId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.sql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.cloudWatch.json","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.pingdom.checkId","$.status.objectiveIndicatorValidation[*].badMetric.pingdom.checkType","$.status.objectiveIndicatorValidation[*].badMetric.pingdom.status"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.pingdom.checkId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.pingdom.checkType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.pingdom.status","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.amazonPrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.amazonPrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.redshift.region","$.status.objectiveIndicatorValidation[*].badMetric.redshift.clusterId","$.status.objectiveIndicatorValidation[*].badMetric.redshift.databaseName","$.status.objectiveIndicatorValidation[*].badMetric.redshift.query"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.redshift.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.redshift.clusterId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.redshift.databaseName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.redshift.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.sumoLogic.type","$.status.objectiveIndicatorValidation[*].badMetric.sumoLogic.query","$.status.objectiveIndicatorValidation[*].badMetric.sumoLogic.quantization","$.status.objectiveIndicatorValidation[*].badMetric.sumoLogic.rollup"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.sumoLogic.type","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.sumoLogic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.sumoLogic.quantization","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.sumoLogic.rollup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.instana.metricType","$.status.objectiveIndicatorValidation[*].badMetric.instana.infrastructure","$.status.objectiveIndicatorValidation[*].badMetric.instana.application"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.metricType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.instana.infrastructure.metricRetrievalMethod","$.status.objectiveIndicatorValidation[*].badMetric.instana.infrastructure.query","$.status.objectiveIndicatorValidation[*].badMetric.instana.infrastructure.snapshotId","$.status.objectiveIndicatorValidation[*].badMetric.instana.infrastructure.metricId","$.status.objectiveIndicatorValidation[*].badMetric.instana.infrastructure.pluginId"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.infrastructure.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.infrastructure.pluginId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.instana.application.metricId","$.status.objectiveIndicatorValidation[*].badMetric.instana.application.aggregation","$.status.objectiveIndicatorValidation[*].badMetric.instana.application.groupBy","$.status.objectiveIndicatorValidation[*].badMetric.instana.application.apiQuery","$.status.objectiveIndicatorValidation[*].badMetric.instana.application.includeInternal","$.status.objectiveIndicatorValidation[*].badMetric.instana.application.includeSynthetic"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.application.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.application.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.instana.application.groupBy.tag","$.status.objectiveIndicatorValidation[*].badMetric.instana.application.groupBy.tagEntity","$.status.objectiveIndicatorValidation[*].badMetric.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.influxdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.influxdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.gcm.query","$.status.objectiveIndicatorValidation[*].badMetric.gcm.projectId","$.status.objectiveIndicatorValidation[*].badMetric.gcm.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.gcm.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.gcm.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.gcm.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.dataType","$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.resourceId","$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.metricName","$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.aggregation","$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.dimensions","$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.dimensions[*]","$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.metricNamespace","$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.workspace","$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.kqlQuery"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.dataType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.resourceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.dimensions[*].name","$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.metricNamespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.workspace.subscriptionId","$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.workspace.resourceGroup","$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.workspace.workspaceId"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.workspace.subscriptionId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.workspace.resourceGroup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.workspace.workspaceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azureMonitor.kqlQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.generic.query"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.generic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.honeycomb.calculation","$.status.objectiveIndicatorValidation[*].badMetric.honeycomb.attribute"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.honeycomb.attribute","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.queryType","$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.line","$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.deviceDataSourceInstanceId","$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.graphId","$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.websiteId","$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.checkpointId","$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.graphName"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.queryType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.line","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.graphId","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.checkpointId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.logicMonitor.graphName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].badMetric.azurePrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].badMetric.azurePrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric","type":"ValidationDetails","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.message","$.status.objectiveIndicatorValidation[*].totalMetric.validationResult","$.status.objectiveIndicatorValidation[*].totalMetric.logTimestamp","$.status.objectiveIndicatorValidation[*].totalMetric.httpStatusCode","$.status.objectiveIndicatorValidation[*].totalMetric.query","$.status.objectiveIndicatorValidation[*].totalMetric.prometheus","$.status.objectiveIndicatorValidation[*].totalMetric.datadog","$.status.objectiveIndicatorValidation[*].totalMetric.newRelic","$.status.objectiveIndicatorValidation[*].totalMetric.appDynamics","$.status.objectiveIndicatorValidation[*].totalMetric.splunk","$.status.objectiveIndicatorValidation[*].totalMetric.lightstep","$.status.objectiveIndicatorValidation[*].totalMetric.splunkObservability","$.status.objectiveIndicatorValidation[*].totalMetric.dynatrace","$.status.objectiveIndicatorValidation[*].totalMetric.elasticsearch","$.status.objectiveIndicatorValidation[*].totalMetric.thousandEyes","$.status.objectiveIndicatorValidation[*].totalMetric.graphite","$.status.objectiveIndicatorValidation[*].totalMetric.bigQuery","$.status.objectiveIndicatorValidation[*].totalMetric.opentsdb","$.status.objectiveIndicatorValidation[*].totalMetric.grafanaLoki","$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch","$.status.objectiveIndicatorValidation[*].totalMetric.pingdom","$.status.objectiveIndicatorValidation[*].totalMetric.amazonPrometheus","$.status.objectiveIndicatorValidation[*].totalMetric.redshift","$.status.objectiveIndicatorValidation[*].totalMetric.sumoLogic","$.status.objectiveIndicatorValidation[*].totalMetric.instana","$.status.objectiveIndicatorValidation[*].totalMetric.influxdb","$.status.objectiveIndicatorValidation[*].totalMetric.gcm","$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor","$.status.objectiveIndicatorValidation[*].totalMetric.generic","$.status.objectiveIndicatorValidation[*].totalMetric.honeycomb","$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor","$.status.objectiveIndicatorValidation[*].totalMetric.azurePrometheus"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.message","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.validationResult","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.logTimestamp","type":"Time","package":"time","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.httpStatusCode","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.prometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.prometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.datadog.query"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.datadog.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.newRelic.nrql"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.newRelic.nrql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.appDynamics.applicationName","$.status.objectiveIndicatorValidation[*].totalMetric.appDynamics.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.appDynamics.applicationName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.appDynamics.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.splunk.query"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.splunk.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.lightstep.streamId","$.status.objectiveIndicatorValidation[*].totalMetric.lightstep.typeOfData","$.status.objectiveIndicatorValidation[*].totalMetric.lightstep.percentile","$.status.objectiveIndicatorValidation[*].totalMetric.lightstep.uql"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.lightstep.streamId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.lightstep.typeOfData","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.lightstep.percentile","type":"float64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.lightstep.uql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.splunkObservability.program"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.splunkObservability.program","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.dynatrace.metricSelector"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.dynatrace.metricSelector","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.elasticsearch.index","$.status.objectiveIndicatorValidation[*].totalMetric.elasticsearch.query"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.elasticsearch.index","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.elasticsearch.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.thousandEyes.testID","$.status.objectiveIndicatorValidation[*].totalMetric.thousandEyes.testType"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.thousandEyes.testType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.graphite.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.graphite.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.bigQuery.query","$.status.objectiveIndicatorValidation[*].totalMetric.bigQuery.projectId","$.status.objectiveIndicatorValidation[*].totalMetric.bigQuery.location"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.bigQuery.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.bigQuery.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.bigQuery.location","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.opentsdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.opentsdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.grafanaLoki.logql"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.grafanaLoki.logql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.region","$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.namespace","$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.metricName","$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.stat","$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.dimensions","$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.dimensions[*]","$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.accountId","$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.sql","$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.json"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.namespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.stat","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.dimensions[*].name","$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.accountId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.sql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.cloudWatch.json","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.pingdom.checkId","$.status.objectiveIndicatorValidation[*].totalMetric.pingdom.checkType","$.status.objectiveIndicatorValidation[*].totalMetric.pingdom.status"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.pingdom.checkId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.pingdom.checkType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.pingdom.status","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.amazonPrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.amazonPrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.redshift.region","$.status.objectiveIndicatorValidation[*].totalMetric.redshift.clusterId","$.status.objectiveIndicatorValidation[*].totalMetric.redshift.databaseName","$.status.objectiveIndicatorValidation[*].totalMetric.redshift.query"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.redshift.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.redshift.clusterId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.redshift.databaseName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.redshift.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.sumoLogic.type","$.status.objectiveIndicatorValidation[*].totalMetric.sumoLogic.query","$.status.objectiveIndicatorValidation[*].totalMetric.sumoLogic.quantization","$.status.objectiveIndicatorValidation[*].totalMetric.sumoLogic.rollup"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.sumoLogic.type","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.sumoLogic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.sumoLogic.quantization","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.sumoLogic.rollup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.instana.metricType","$.status.objectiveIndicatorValidation[*].totalMetric.instana.infrastructure","$.status.objectiveIndicatorValidation[*].totalMetric.instana.application"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.metricType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.instana.infrastructure.metricRetrievalMethod","$.status.objectiveIndicatorValidation[*].totalMetric.instana.infrastructure.query","$.status.objectiveIndicatorValidation[*].totalMetric.instana.infrastructure.snapshotId","$.status.objectiveIndicatorValidation[*].totalMetric.instana.infrastructure.metricId","$.status.objectiveIndicatorValidation[*].totalMetric.instana.infrastructure.pluginId"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.infrastructure.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.infrastructure.pluginId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.metricId","$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.aggregation","$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.groupBy","$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.apiQuery","$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.includeInternal","$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.includeSynthetic"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.groupBy.tag","$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.groupBy.tagEntity","$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.influxdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.influxdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.gcm.query","$.status.objectiveIndicatorValidation[*].totalMetric.gcm.projectId","$.status.objectiveIndicatorValidation[*].totalMetric.gcm.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.gcm.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.gcm.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.gcm.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.dataType","$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.resourceId","$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.metricName","$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.aggregation","$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.dimensions","$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.dimensions[*]","$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.metricNamespace","$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.workspace","$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.kqlQuery"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.dataType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.resourceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.dimensions[*].name","$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.metricNamespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.workspace.subscriptionId","$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.workspace.resourceGroup","$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.workspace.workspaceId"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.workspace.subscriptionId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.workspace.resourceGroup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.workspace.workspaceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azureMonitor.kqlQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.generic.query"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.generic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.honeycomb.calculation","$.status.objectiveIndicatorValidation[*].totalMetric.honeycomb.attribute"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.honeycomb.attribute","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.queryType","$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.line","$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.deviceDataSourceInstanceId","$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.graphId","$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.websiteId","$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.checkpointId","$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.graphName"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.queryType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.line","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.graphId","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.checkpointId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.logicMonitor.graphName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].totalMetric.azurePrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].totalMetric.azurePrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric","type":"ValidationDetails","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.message","$.status.objectiveIndicatorValidation[*].rawMetric.validationResult","$.status.objectiveIndicatorValidation[*].rawMetric.logTimestamp","$.status.objectiveIndicatorValidation[*].rawMetric.httpStatusCode","$.status.objectiveIndicatorValidation[*].rawMetric.query","$.status.objectiveIndicatorValidation[*].rawMetric.prometheus","$.status.objectiveIndicatorValidation[*].rawMetric.datadog","$.status.objectiveIndicatorValidation[*].rawMetric.newRelic","$.status.objectiveIndicatorValidation[*].rawMetric.appDynamics","$.status.objectiveIndicatorValidation[*].rawMetric.splunk","$.status.objectiveIndicatorValidation[*].rawMetric.lightstep","$.status.objectiveIndicatorValidation[*].rawMetric.splunkObservability","$.status.objectiveIndicatorValidation[*].rawMetric.dynatrace","$.status.objectiveIndicatorValidation[*].rawMetric.elasticsearch","$.status.objectiveIndicatorValidation[*].rawMetric.thousandEyes","$.status.objectiveIndicatorValidation[*].rawMetric.graphite","$.status.objectiveIndicatorValidation[*].rawMetric.bigQuery","$.status.objectiveIndicatorValidation[*].rawMetric.opentsdb","$.status.objectiveIndicatorValidation[*].rawMetric.grafanaLoki","$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch","$.status.objectiveIndicatorValidation[*].rawMetric.pingdom","$.status.objectiveIndicatorValidation[*].rawMetric.amazonPrometheus","$.status.objectiveIndicatorValidation[*].rawMetric.redshift","$.status.objectiveIndicatorValidation[*].rawMetric.sumoLogic","$.status.objectiveIndicatorValidation[*].rawMetric.instana","$.status.objectiveIndicatorValidation[*].rawMetric.influxdb","$.status.objectiveIndicatorValidation[*].rawMetric.gcm","$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor","$.status.objectiveIndicatorValidation[*].rawMetric.generic","$.status.objectiveIndicatorValidation[*].rawMetric.honeycomb","$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor","$.status.objectiveIndicatorValidation[*].rawMetric.azurePrometheus"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.message","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.validationResult","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.logTimestamp","type":"Time","package":"time","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.httpStatusCode","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.prometheus","type":"PrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PrometheusMetric represents metric from Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.prometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.prometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.datadog","type":"DatadogMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DatadogMetric represents metric from Datadog","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.datadog.query"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.datadog.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.newRelic","type":"NewRelicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"NewRelicMetric represents metric from NewRelic","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.newRelic.nrql"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.newRelic.nrql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.appDynamics","type":"AppDynamicsMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AppDynamicsMetric represents metric from AppDynamics","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.appDynamics.applicationName","$.status.objectiveIndicatorValidation[*].rawMetric.appDynamics.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.appDynamics.applicationName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.appDynamics.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.splunk","type":"SplunkMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkMetric represents metric from Splunk","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.splunk.query"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.splunk.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.lightstep","type":"LightstepMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LightstepMetric represents metric from Lightstep","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.lightstep.streamId","$.status.objectiveIndicatorValidation[*].rawMetric.lightstep.typeOfData","$.status.objectiveIndicatorValidation[*].rawMetric.lightstep.percentile","$.status.objectiveIndicatorValidation[*].rawMetric.lightstep.uql"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.lightstep.streamId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.lightstep.typeOfData","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.lightstep.percentile","type":"float64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.lightstep.uql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.splunkObservability","type":"SplunkObservabilityMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SplunkObservabilityMetric represents metric from SplunkObservability","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.splunkObservability.program"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.splunkObservability.program","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.dynatrace","type":"DynatraceMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"DynatraceMetric represents metric from Dynatrace.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.dynatrace.metricSelector"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.dynatrace.metricSelector","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.elasticsearch","type":"ElasticsearchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ElasticsearchMetric represents metric from Elasticsearch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.elasticsearch.index","$.status.objectiveIndicatorValidation[*].rawMetric.elasticsearch.query"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.elasticsearch.index","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.elasticsearch.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.thousandEyes","type":"ThousandEyesMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"ThousandEyesMetric represents metric from ThousandEyes","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.thousandEyes.testID","$.status.objectiveIndicatorValidation[*].rawMetric.thousandEyes.testType"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.thousandEyes.testID","type":"int64","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.thousandEyes.testType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.graphite","type":"GraphiteMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GraphiteMetric represents metric from Graphite.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.graphite.metricPath"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.graphite.metricPath","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.bigQuery","type":"BigQueryMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"BigQueryMetric represents metric from BigQuery","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.bigQuery.query","$.status.objectiveIndicatorValidation[*].rawMetric.bigQuery.projectId","$.status.objectiveIndicatorValidation[*].rawMetric.bigQuery.location"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.bigQuery.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.bigQuery.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.bigQuery.location","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.opentsdb","type":"OpenTSDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"OpenTSDBMetric represents metric from OpenTSDB.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.opentsdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.opentsdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.grafanaLoki","type":"GrafanaLokiMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GrafanaLokiMetric represents metric from GrafanaLokiMetric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.grafanaLoki.logql"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.grafanaLoki.logql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch","type":"CloudWatchMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetric represents metric from CloudWatch.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.region","$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.namespace","$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.metricName","$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.stat","$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.dimensions","$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.dimensions[*]","$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.accountId","$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.sql","$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.json"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.namespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.stat","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.dimensions","type":"[]CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.dimensions[*]","type":"CloudWatchMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"CloudWatchMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.dimensions[*].name","$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.accountId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.sql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.cloudWatch.json","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.pingdom","type":"PingdomMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"PingdomMetric represents metric from Pingdom.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.pingdom.checkId","$.status.objectiveIndicatorValidation[*].rawMetric.pingdom.checkType","$.status.objectiveIndicatorValidation[*].rawMetric.pingdom.status"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.pingdom.checkId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.pingdom.checkType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.pingdom.status","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.amazonPrometheus","type":"AmazonPrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AmazonPrometheusMetric represents metric from Amazon Managed Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.amazonPrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.amazonPrometheus.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.redshift","type":"RedshiftMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"RedshiftMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.redshift.region","$.status.objectiveIndicatorValidation[*].rawMetric.redshift.clusterId","$.status.objectiveIndicatorValidation[*].rawMetric.redshift.databaseName","$.status.objectiveIndicatorValidation[*].rawMetric.redshift.query"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.redshift.region","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.redshift.clusterId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.redshift.databaseName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.redshift.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.sumoLogic","type":"SumoLogicMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"SumoLogicMetric represents metric from Sumo Logic.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.sumoLogic.type","$.status.objectiveIndicatorValidation[*].rawMetric.sumoLogic.query","$.status.objectiveIndicatorValidation[*].rawMetric.sumoLogic.quantization","$.status.objectiveIndicatorValidation[*].rawMetric.sumoLogic.rollup"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.sumoLogic.type","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.sumoLogic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.sumoLogic.quantization","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.sumoLogic.rollup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana","type":"InstanaMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InstanaMetric represents metric from Redshift.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.instana.metricType","$.status.objectiveIndicatorValidation[*].rawMetric.instana.infrastructure","$.status.objectiveIndicatorValidation[*].rawMetric.instana.application"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.metricType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.infrastructure","type":"InstanaInfrastructureMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.instana.infrastructure.metricRetrievalMethod","$.status.objectiveIndicatorValidation[*].rawMetric.instana.infrastructure.query","$.status.objectiveIndicatorValidation[*].rawMetric.instana.infrastructure.snapshotId","$.status.objectiveIndicatorValidation[*].rawMetric.instana.infrastructure.metricId","$.status.objectiveIndicatorValidation[*].rawMetric.instana.infrastructure.pluginId"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.infrastructure.metricRetrievalMethod","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.infrastructure.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.infrastructure.snapshotId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.infrastructure.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.infrastructure.pluginId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.application","type":"InstanaApplicationMetricType","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.metricId","$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.aggregation","$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.groupBy","$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.apiQuery","$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.includeInternal","$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.includeSynthetic"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.metricId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.groupBy","type":"InstanaApplicationMetricGroupBy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.groupBy.tag","$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.groupBy.tagEntity","$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.groupBy.tagSecondLevelKey"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.groupBy.tag","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.groupBy.tagEntity","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.groupBy.tagSecondLevelKey","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.apiQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.includeInternal","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.instana.application.includeSynthetic","type":"bool","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.influxdb","type":"InfluxDBMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"InfluxDBMetric represents metric from InfluxDB","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.influxdb.query"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.influxdb.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.gcm","type":"GCMMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"GCMMetric represents metric from GCM","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.gcm.query","$.status.objectiveIndicatorValidation[*].rawMetric.gcm.projectId","$.status.objectiveIndicatorValidation[*].rawMetric.gcm.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.gcm.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.gcm.projectId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.gcm.promql","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor","type":"AzureMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetric represents metric from AzureMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.dataType","$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.resourceId","$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.metricName","$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.aggregation","$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.dimensions","$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.dimensions[*]","$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.metricNamespace","$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.workspace","$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.kqlQuery"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.dataType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.resourceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.metricName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.aggregation","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.dimensions","type":"[]AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.dimensions[*]","type":"AzureMonitorMetricDimension","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricDimension represents name/value pair that is part of the identity of a metric.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.dimensions[*].name","$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.dimensions[*].value"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.dimensions[*].name","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.dimensions[*].value","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.metricNamespace","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.workspace","type":"AzureMonitorMetricLogAnalyticsWorkspace","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzureMonitorMetricLogAnalyticsWorkspace represents Azure Log Analytics Workspace","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.workspace.subscriptionId","$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.workspace.resourceGroup","$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.workspace.workspaceId"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.workspace.subscriptionId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.workspace.resourceGroup","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.workspace.workspaceId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azureMonitor.kqlQuery","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.generic","type":"GenericMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.generic.query"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.generic.query","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.honeycomb","type":"HoneycombMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"HoneycombMetric represents metric from Honeycomb.","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.honeycomb.calculation","$.status.objectiveIndicatorValidation[*].rawMetric.honeycomb.attribute"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.honeycomb.calculation","type":"string","Doc":"Deprecated: Once Honeycomb good/bad over total and raw metrics support will be discontinued,\nthis property will be removed.","isDeprecated":true},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.honeycomb.attribute","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor","type":"LogicMonitorMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"LogicMonitorMetric represents metric from LogicMonitor","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.queryType","$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.line","$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.deviceDataSourceInstanceId","$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.graphId","$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.websiteId","$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.checkpointId","$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.graphName"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.queryType","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.line","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.deviceDataSourceInstanceId","type":"int","Doc":"QueryType = device_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.graphId","type":"int","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.websiteId","type":"string","Doc":"QueryType = website_metrics"},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.checkpointId","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.logicMonitor.graphName","type":"string","Doc":""},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azurePrometheus","type":"AzurePrometheusMetric","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"AzurePrometheusMetric represents metric from Azure Monitor managed service for Prometheus","childrenPaths":["$.status.objectiveIndicatorValidation[*].rawMetric.azurePrometheus.promql"]},{"path":"$.status.objectiveIndicatorValidation[*].rawMetric.azurePrometheus.promql","type":"string","Doc":""},{"path":"$.status.timeTravel","type":"ReplayStatus","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/slo","Doc":"Deprecated: use Status.Replay instead.\n\nDeprecated: ReplayStatus exists for historical compatibility\nand should not be used.","isDeprecated":true,"childrenPaths":["$.status.timeTravel.source","$.status.timeTravel.status","$.status.timeTravel.triggeredBy","$.status.timeTravel.unit","$.status.timeTravel.value","$.status.timeTravel.startTime"]},{"path":"$.status.timeTravel.source","type":"string","Doc":""},{"path":"$.status.timeTravel.status","type":"string","Doc":""},{"path":"$.status.timeTravel.triggeredBy","type":"string","Doc":""},{"path":"$.status.timeTravel.unit","type":"string","Doc":""},{"path":"$.status.timeTravel.value","type":"int","Doc":""},{"path":"$.status.timeTravel.startTime","type":"string","Doc":""},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Amazon Prometheus SLO\n    indicator:\n      metricSource:\n        name: amazon-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          amazonPrometheus:\n            promql: sum(http_request_duration_seconds_bucket{handler=\"/api/v1/slos\",le=\"2.5\"})\n        total:\n          amazonPrometheus:\n            promql: sum(http_request_duration_seconds_count{handler=\"/api/v1/slos\"})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Amazon Prometheus SLO\n    indicator:\n      metricSource:\n        name: amazon-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          amazonPrometheus:\n            promql: sum(http_request_duration_seconds_bucket{handler=\"/api/v1/slos\",le=\"2.5\"})\n        total:\n          amazonPrometheus:\n            promql: sum(http_request_duration_seconds_count{handler=\"/api/v1/slos\"})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Amazon Prometheus SLO\n    indicator:\n      metricSource:\n        name: amazon-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          amazonPrometheus:\n            promql: sum(http_request_duration_seconds_bucket{handler=\"/api/v1/slos\",le=\"2.5\"})\n        total:\n          amazonPrometheus:\n            promql: sum(http_request_duration_seconds_count{handler=\"/api/v1/slos\"})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Amazon Prometheus SLO\n    indicator:\n      metricSource:\n        name: amazon-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          amazonPrometheus:\n            promql: sum(http_request_duration_seconds_bucket{handler=\"/api/v1/slos\",le=\"2.5\"})\n        total:\n          amazonPrometheus:\n            promql: sum(http_request_duration_seconds_count{handler=\"/api/v1/slos\"})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Amazon Prometheus SLO\n    indicator:\n      metricSource:\n        name: amazon-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          amazonPrometheus:\n            promql: api_server_requestMsec{host=\"*\",job=\"nginx\"}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Amazon Prometheus SLO\n    indicator:\n      metricSource:\n        name: amazon-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          amazonPrometheus:\n            promql: api_server_requestMsec{host=\"*\",job=\"nginx\"}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Amazon Prometheus SLO\n    indicator:\n      metricSource:\n        name: amazon-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          amazonPrometheus:\n            promql: api_server_requestMsec{host=\"*\",job=\"nginx\"}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Amazon Prometheus SLO\n    indicator:\n      metricSource:\n        name: amazon-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          amazonPrometheus:\n            promql: api_server_requestMsec{host=\"*\",job=\"nginx\"}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: bad over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example AppDynamics SLO\n    indicator:\n      metricSource:\n        name: app-dynamics\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Slow Requests\n        total:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Normal Requests\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example AppDynamics SLO\n    indicator:\n      metricSource:\n        name: app-dynamics\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Slow Requests\n        total:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Normal Requests\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example AppDynamics SLO\n    indicator:\n      metricSource:\n        name: app-dynamics\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Slow Requests\n        total:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Normal Requests\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example AppDynamics SLO\n    indicator:\n      metricSource:\n        name: app-dynamics\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Slow Requests\n        total:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Normal Requests\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example AppDynamics SLO\n    indicator:\n      metricSource:\n        name: app-dynamics\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Slow Requests\n        total:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Normal Requests\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example AppDynamics SLO\n    indicator:\n      metricSource:\n        name: app-dynamics\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Slow Requests\n        total:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Normal Requests\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example AppDynamics SLO\n    indicator:\n      metricSource:\n        name: app-dynamics\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Slow Requests\n        total:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Normal Requests\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example AppDynamics SLO\n    indicator:\n      metricSource:\n        name: app-dynamics\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Slow Requests\n        total:\n          appDynamics:\n            applicationName: api-server\n            metricPath: End User Experience|App|Normal Requests\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example AppDynamics SLO\n    indicator:\n      metricSource:\n        name: app-dynamics\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          appDynamics:\n            applicationName: api-server\n            metricPath: Overall Application Performance|Average Response Time (ms)\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example AppDynamics SLO\n    indicator:\n      metricSource:\n        name: app-dynamics\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          appDynamics:\n            applicationName: api-server\n            metricPath: Overall Application Performance|Average Response Time (ms)\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example AppDynamics SLO\n    indicator:\n      metricSource:\n        name: app-dynamics\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          appDynamics:\n            applicationName: api-server\n            metricPath: Overall Application Performance|Average Response Time (ms)\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example AppDynamics SLO\n    indicator:\n      metricSource:\n        name: app-dynamics\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          appDynamics:\n            applicationName: api-server\n            metricPath: Overall Application Performance|Average Response Time (ms)\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: bad over total\n# Metric variant: logs\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | where ResultCode == 0 or ResultCode \u003e= 400\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n        total:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: logs\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | where ResultCode == 0 or ResultCode \u003e= 400\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n        total:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: logs\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | where ResultCode == 0 or ResultCode \u003e= 400\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n        total:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: logs\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | where ResultCode == 0 or ResultCode \u003e= 400\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n        total:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Http4xx\n            aggregation: Sum\n        total:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Requests\n            aggregation: Sum\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Http4xx\n            aggregation: Sum\n        total:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Requests\n            aggregation: Sum\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Http4xx\n            aggregation: Sum\n        total:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Requests\n            aggregation: Sum\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Http4xx\n            aggregation: Sum\n        total:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Requests\n            aggregation: Sum\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: logs\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | where ResultCode \u003e= 200 and ResultCode \u003c 400\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n        total:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: logs\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | where ResultCode \u003e= 200 and ResultCode \u003c 400\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n        total:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: logs\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | where ResultCode \u003e= 200 and ResultCode \u003c 400\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n        total:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: logs\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | where ResultCode \u003e= 200 and ResultCode \u003c 400\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n        total:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"my-app\"\n              | summarize n9_value = count() by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Http2xx\n            aggregation: Sum\n        total:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Requests\n            aggregation: Sum\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Http2xx\n            aggregation: Sum\n        total:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Requests\n            aggregation: Sum\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Http2xx\n            aggregation: Sum\n        total:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Requests\n            aggregation: Sum\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Http2xx\n            aggregation: Sum\n        total:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Requests\n            aggregation: Sum\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: logs\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"api-server\"\n              | summarize n9_value = avg(DurationMs) by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: logs\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"api-server\"\n              | summarize n9_value = avg(DurationMs) by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: logs\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"api-server\"\n              | summarize n9_value = avg(DurationMs) by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: logs\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          azureMonitor:\n            dataType: logs\n            workspace:\n              subscriptionId: 00000000-0000-0000-0000-000000000000\n              resourceGroup: myResourceGroup\n              workspaceId: 11111111-1111-1111-1111-111111111111\n            kqlQuery: |-\n              AppRequests\n              | where AppRoleName == \"api-server\"\n              | summarize n9_value = avg(DurationMs) by bin(TimeGenerated, 15s)\n              | project n9_time = TimeGenerated, n9_value\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Percentage CPU\n            aggregation: Avg\n            metricNamespace: azure.applicationinsights\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Percentage CPU\n            aggregation: Avg\n            metricNamespace: azure.applicationinsights\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Percentage CPU\n            aggregation: Avg\n            metricNamespace: azure.applicationinsights\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Monitor SLO\n    indicator:\n      metricSource:\n        name: azure-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          azureMonitor:\n            dataType: metrics\n            resourceId: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/api-server\n            metricName: Percentage CPU\n            aggregation: Avg\n            metricNamespace: azure.applicationinsights\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: bad over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Prometheus SLO\n    indicator:\n      metricSource:\n        name: azure-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{code=\"5xx\"})\n        total:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Prometheus SLO\n    indicator:\n      metricSource:\n        name: azure-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{code=\"5xx\"})\n        total:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Prometheus SLO\n    indicator:\n      metricSource:\n        name: azure-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{code=\"5xx\"})\n        total:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Prometheus SLO\n    indicator:\n      metricSource:\n        name: azure-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{code=\"5xx\"})\n        total:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Prometheus SLO\n    indicator:\n      metricSource:\n        name: azure-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{code=\"2xx\"})\n        total:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Prometheus SLO\n    indicator:\n      metricSource:\n        name: azure-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{code=\"2xx\"})\n        total:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Prometheus SLO\n    indicator:\n      metricSource:\n        name: azure-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{code=\"2xx\"})\n        total:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Prometheus SLO\n    indicator:\n      metricSource:\n        name: azure-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{code=\"2xx\"})\n        total:\n          azurePrometheus:\n            promql: sum(api_server_requests_total{})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Prometheus SLO\n    indicator:\n      metricSource:\n        name: azure-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          azurePrometheus:\n            promql: |-\n              sum((rate(container_cpu_usage_seconds_total{container!=\"POD\",container!=\"\"}[30m])\n              - on (namespace,pod,container) group_left avg by (namespace,pod,container)(kube_pod_container_resource_requests{resource=\"cpu\"}))\n              * -1 \u003e0)\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Prometheus SLO\n    indicator:\n      metricSource:\n        name: azure-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          azurePrometheus:\n            promql: |-\n              sum((rate(container_cpu_usage_seconds_total{container!=\"POD\",container!=\"\"}[30m])\n              - on (namespace,pod,container) group_left avg by (namespace,pod,container)(kube_pod_container_resource_requests{resource=\"cpu\"}))\n              * -1 \u003e0)\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Prometheus SLO\n    indicator:\n      metricSource:\n        name: azure-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          azurePrometheus:\n            promql: |-\n              sum((rate(container_cpu_usage_seconds_total{container!=\"POD\",container!=\"\"}[30m])\n              - on (namespace,pod,container) group_left avg by (namespace,pod,container)(kube_pod_container_resource_requests{resource=\"cpu\"}))\n              * -1 \u003e0)\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Azure Prometheus SLO\n    indicator:\n      metricSource:\n        name: azure-prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          azurePrometheus:\n            promql: |-\n              sum((rate(container_cpu_usage_seconds_total{container!=\"POD\",container!=\"\"}[30m])\n              - on (namespace,pod,container) group_left avg by (namespace,pod,container)(kube_pod_container_resource_requests{resource=\"cpu\"}))\n              * -1 \u003e0)\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example BigQuery SLO\n    indicator:\n      metricSource:\n        name: big-query\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          bigQuery:\n            query: SELECT http_code AS n9value, created AS n9date FROM `api-server-256112.metrics.http_response` WHERE http_code = 200 AND created BETWEEN DATETIME(@n9date_from) AND DATETIME(@n9date_to)\n            projectId: api-server-256112\n            location: US\n        total:\n          bigQuery:\n            query: SELECT http_code AS n9value, created AS n9date FROM `api-server-256112.metrics.http_response` WHERE created BETWEEN DATETIME(@n9date_from) AND DATETIME(@n9date_to)\n            projectId: api-server-256112\n            location: US\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example BigQuery SLO\n    indicator:\n      metricSource:\n        name: big-query\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          bigQuery:\n            query: SELECT http_code AS n9value, created AS n9date FROM `api-server-256112.metrics.http_response` WHERE http_code = 200 AND created BETWEEN DATETIME(@n9date_from) AND DATETIME(@n9date_to)\n            projectId: api-server-256112\n            location: US\n        total:\n          bigQuery:\n            query: SELECT http_code AS n9value, created AS n9date FROM `api-server-256112.metrics.http_response` WHERE created BETWEEN DATETIME(@n9date_from) AND DATETIME(@n9date_to)\n            projectId: api-server-256112\n            location: US\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example BigQuery SLO\n    indicator:\n      metricSource:\n        name: big-query\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          bigQuery:\n            query: SELECT http_code AS n9value, created AS n9date FROM `api-server-256112.metrics.http_response` WHERE http_code = 200 AND created BETWEEN DATETIME(@n9date_from) AND DATETIME(@n9date_to)\n            projectId: api-server-256112\n            location: US\n        total:\n          bigQuery:\n            query: SELECT http_code AS n9value, created AS n9date FROM `api-server-256112.metrics.http_response` WHERE created BETWEEN DATETIME(@n9date_from) AND DATETIME(@n9date_to)\n            projectId: api-server-256112\n            location: US\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example BigQuery SLO\n    indicator:\n      metricSource:\n        name: big-query\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          bigQuery:\n            query: SELECT http_code AS n9value, created AS n9date FROM `api-server-256112.metrics.http_response` WHERE http_code = 200 AND created BETWEEN DATETIME(@n9date_from) AND DATETIME(@n9date_to)\n            projectId: api-server-256112\n            location: US\n        total:\n          bigQuery:\n            query: SELECT http_code AS n9value, created AS n9date FROM `api-server-256112.metrics.http_response` WHERE created BETWEEN DATETIME(@n9date_from) AND DATETIME(@n9date_to)\n            projectId: api-server-256112\n            location: US\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example BigQuery SLO\n    indicator:\n      metricSource:\n        name: big-query\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          bigQuery:\n            query: SELECT response_time AS n9value, created AS n9date FROM `api-server-256112.metrics.http_response` WHERE created BETWEEN DATETIME(@n9date_from) AND DATETIME(@n9date_to)`\n            projectId: api-server-256112\n            location: US\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example BigQuery SLO\n    indicator:\n      metricSource:\n        name: big-query\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          bigQuery:\n            query: SELECT response_time AS n9value, created AS n9date FROM `api-server-256112.metrics.http_response` WHERE created BETWEEN DATETIME(@n9date_from) AND DATETIME(@n9date_to)`\n            projectId: api-server-256112\n            location: US\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example BigQuery SLO\n    indicator:\n      metricSource:\n        name: big-query\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          bigQuery:\n            query: SELECT response_time AS n9value, created AS n9date FROM `api-server-256112.metrics.http_response` WHERE created BETWEEN DATETIME(@n9date_from) AND DATETIME(@n9date_to)`\n            projectId: api-server-256112\n            location: US\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example BigQuery SLO\n    indicator:\n      metricSource:\n        name: big-query\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          bigQuery:\n            query: SELECT response_time AS n9value, created AS n9date FROM `api-server-256112.metrics.http_response` WHERE created BETWEEN DATETIME(@n9date_from) AND DATETIME(@n9date_to)`\n            projectId: api-server-256112\n            location: US\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: bad over total\n# Metric variant: JSON\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e1\",\n                  \"Expression\": \"SELECT AVG(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487218c2d40b52f4'\",\n                  \"Period\": 60\n                }\n              ]\n        total:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e2\",\n                  \"Expression\": \"SELECT MAX(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487518c3d40b12f9'\",\n                  \"Period\": 60\n                }\n              ]\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: JSON\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e1\",\n                  \"Expression\": \"SELECT AVG(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487218c2d40b52f4'\",\n                  \"Period\": 60\n                }\n              ]\n        total:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e2\",\n                  \"Expression\": \"SELECT MAX(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487518c3d40b12f9'\",\n                  \"Period\": 60\n                }\n              ]\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: JSON\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e1\",\n                  \"Expression\": \"SELECT AVG(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487218c2d40b52f4'\",\n                  \"Period\": 60\n                }\n              ]\n        total:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e2\",\n                  \"Expression\": \"SELECT MAX(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487518c3d40b12f9'\",\n                  \"Period\": 60\n                }\n              ]\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: JSON\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e1\",\n                  \"Expression\": \"SELECT AVG(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487218c2d40b52f4'\",\n                  \"Period\": 60\n                }\n              ]\n        total:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e2\",\n                  \"Expression\": \"SELECT MAX(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487518c3d40b12f9'\",\n                  \"Period\": 60\n                }\n              ]\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: sql query\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT AVG(CPUUtilization) FROM \"AWS/EC2\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT MAX(CPUUtilization) FROM \"AWS/EC2\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: sql query\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT AVG(CPUUtilization) FROM \"AWS/EC2\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT MAX(CPUUtilization) FROM \"AWS/EC2\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: sql query\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT AVG(CPUUtilization) FROM \"AWS/EC2\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT MAX(CPUUtilization) FROM \"AWS/EC2\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: sql query\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT AVG(CPUUtilization) FROM \"AWS/EC2\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT MAX(CPUUtilization) FROM \"AWS/EC2\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: standard configuration\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: HTTPCode_Target_5XX_Count\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: RequestCount\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: standard configuration\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: HTTPCode_Target_5XX_Count\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: RequestCount\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: standard configuration\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: HTTPCode_Target_5XX_Count\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: RequestCount\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Metric variant: standard configuration\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: HTTPCode_Target_5XX_Count\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: RequestCount\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: JSON\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e1\",\n                  \"Expression\": \"SELECT AVG(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487218c2d40b52f4'\",\n                  \"Period\": 60\n                }\n              ]\n        total:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e2\",\n                  \"Expression\": \"SELECT MAX(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487518c3d40b12f9'\",\n                  \"Period\": 60\n                }\n              ]\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: JSON\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e1\",\n                  \"Expression\": \"SELECT AVG(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487218c2d40b52f4'\",\n                  \"Period\": 60\n                }\n              ]\n        total:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e2\",\n                  \"Expression\": \"SELECT MAX(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487518c3d40b12f9'\",\n                  \"Period\": 60\n                }\n              ]\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: JSON\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e1\",\n                  \"Expression\": \"SELECT AVG(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487218c2d40b52f4'\",\n                  \"Period\": 60\n                }\n              ]\n        total:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e2\",\n                  \"Expression\": \"SELECT MAX(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487518c3d40b12f9'\",\n                  \"Period\": 60\n                }\n              ]\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: JSON\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e1\",\n                  \"Expression\": \"SELECT AVG(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487218c2d40b52f4'\",\n                  \"Period\": 60\n                }\n              ]\n        total:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e2\",\n                  \"Expression\": \"SELECT MAX(CPUUtilization) FROM SCHEMA(\\\"AWS/EC2\\\", InstanceId) WHERE InstanceId = 'i-0487518c3d40b12f9'\",\n                  \"Period\": 60\n                }\n              ]\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: sql query\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT AVG(CPUUtilization) FROM \"AWS/EC2\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT MAX(CPUUtilization) FROM \"AWS/EC2\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: sql query\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT AVG(CPUUtilization) FROM \"AWS/EC2\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT MAX(CPUUtilization) FROM \"AWS/EC2\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: sql query\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT AVG(CPUUtilization) FROM \"AWS/EC2\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT MAX(CPUUtilization) FROM \"AWS/EC2\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: sql query\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT AVG(CPUUtilization) FROM \"AWS/EC2\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT MAX(CPUUtilization) FROM \"AWS/EC2\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: standard configuration\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: HTTPCode_Target_2XX_Count\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: RequestCount\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: standard configuration\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: HTTPCode_Target_2XX_Count\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: RequestCount\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: standard configuration\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: HTTPCode_Target_2XX_Count\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: RequestCount\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: standard configuration\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: HTTPCode_Target_2XX_Count\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n        total:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/ApplicationELB\n            metricName: RequestCount\n            stat: SampleCount\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: JSON\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e1\",\n                  \"Expression\": \"m1 / m2\",\n                  \"Period\": 60\n                },\n                {\n                  \"Id\": \"m1\",\n                  \"MetricStat\": {\n                    \"Metric\": {\n                      \"Namespace\": \"AWS/NATGateway\",\n                      \"MetricName\": \"ConnectionEstablishedCount\",\n                      \"Dimensions\": [\n                        {\n                          \"Name\": \"NatGatewayId\",\n                          \"Value\": \"nat-016e2012a5fa8a151\"\n                        }\n                      ]\n                    },\n                    \"Period\": 60,\n                    \"Stat\": \"SampleCount\"\n                  },\n                  \"ReturnData\": false\n                },\n                {\n                  \"Id\": \"m2\",\n                  \"MetricStat\": {\n                    \"Metric\": {\n                      \"Namespace\": \"AWS/NATGateway\",\n                      \"MetricName\": \"ConnectionAttemptCount\",\n                      \"Dimensions\": [\n                        {\n                          \"Name\": \"NatGatewayId\",\n                          \"Value\": \"nat-016e2012a5fa8a151\"\n                        }\n                      ]\n                    },\n                    \"Period\": 60,\n                    \"Stat\": \"SampleCount\"\n                  },\n                  \"ReturnData\": false\n                }\n              ]\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: JSON\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e1\",\n                  \"Expression\": \"m1 / m2\",\n                  \"Period\": 60\n                },\n                {\n                  \"Id\": \"m1\",\n                  \"MetricStat\": {\n                    \"Metric\": {\n                      \"Namespace\": \"AWS/NATGateway\",\n                      \"MetricName\": \"ConnectionEstablishedCount\",\n                      \"Dimensions\": [\n                        {\n                          \"Name\": \"NatGatewayId\",\n                          \"Value\": \"nat-016e2012a5fa8a151\"\n                        }\n                      ]\n                    },\n                    \"Period\": 60,\n                    \"Stat\": \"SampleCount\"\n                  },\n                  \"ReturnData\": false\n                },\n                {\n                  \"Id\": \"m2\",\n                  \"MetricStat\": {\n                    \"Metric\": {\n                      \"Namespace\": \"AWS/NATGateway\",\n                      \"MetricName\": \"ConnectionAttemptCount\",\n                      \"Dimensions\": [\n                        {\n                          \"Name\": \"NatGatewayId\",\n                          \"Value\": \"nat-016e2012a5fa8a151\"\n                        }\n                      ]\n                    },\n                    \"Period\": 60,\n                    \"Stat\": \"SampleCount\"\n                  },\n                  \"ReturnData\": false\n                }\n              ]\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: JSON\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e1\",\n                  \"Expression\": \"m1 / m2\",\n                  \"Period\": 60\n                },\n                {\n                  \"Id\": \"m1\",\n                  \"MetricStat\": {\n                    \"Metric\": {\n                      \"Namespace\": \"AWS/NATGateway\",\n                      \"MetricName\": \"ConnectionEstablishedCount\",\n                      \"Dimensions\": [\n                        {\n                          \"Name\": \"NatGatewayId\",\n                          \"Value\": \"nat-016e2012a5fa8a151\"\n                        }\n                      ]\n                    },\n                    \"Period\": 60,\n                    \"Stat\": \"SampleCount\"\n                  },\n                  \"ReturnData\": false\n                },\n                {\n                  \"Id\": \"m2\",\n                  \"MetricStat\": {\n                    \"Metric\": {\n                      \"Namespace\": \"AWS/NATGateway\",\n                      \"MetricName\": \"ConnectionAttemptCount\",\n                      \"Dimensions\": [\n                        {\n                          \"Name\": \"NatGatewayId\",\n                          \"Value\": \"nat-016e2012a5fa8a151\"\n                        }\n                      ]\n                    },\n                    \"Period\": 60,\n                    \"Stat\": \"SampleCount\"\n                  },\n                  \"ReturnData\": false\n                }\n              ]\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: JSON\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          cloudWatch:\n            region: us-west-2\n            json: |-\n              [\n                {\n                  \"Id\": \"e1\",\n                  \"Expression\": \"m1 / m2\",\n                  \"Period\": 60\n                },\n                {\n                  \"Id\": \"m1\",\n                  \"MetricStat\": {\n                    \"Metric\": {\n                      \"Namespace\": \"AWS/NATGateway\",\n                      \"MetricName\": \"ConnectionEstablishedCount\",\n                      \"Dimensions\": [\n                        {\n                          \"Name\": \"NatGatewayId\",\n                          \"Value\": \"nat-016e2012a5fa8a151\"\n                        }\n                      ]\n                    },\n                    \"Period\": 60,\n                    \"Stat\": \"SampleCount\"\n                  },\n                  \"ReturnData\": false\n                },\n                {\n                  \"Id\": \"m2\",\n                  \"MetricStat\": {\n                    \"Metric\": {\n                      \"Namespace\": \"AWS/NATGateway\",\n                      \"MetricName\": \"ConnectionAttemptCount\",\n                      \"Dimensions\": [\n                        {\n                          \"Name\": \"NatGatewayId\",\n                          \"Value\": \"nat-016e2012a5fa8a151\"\n                        }\n                      ]\n                    },\n                    \"Period\": 60,\n                    \"Stat\": \"SampleCount\"\n                  },\n                  \"ReturnData\": false\n                }\n              ]\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: sql query\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT AVG(CPUUtilization) FROM \"AWS/EC2”\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: sql query\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT AVG(CPUUtilization) FROM \"AWS/EC2”\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: sql query\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT AVG(CPUUtilization) FROM \"AWS/EC2”\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: sql query\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          cloudWatch:\n            region: us-west-2\n            sql: SELECT AVG(CPUUtilization) FROM \"AWS/EC2”\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: standard configuration\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/RDS\n            metricName: ReadLatency\n            stat: Average\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: standard configuration\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/RDS\n            metricName: ReadLatency\n            stat: Average\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: standard configuration\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/RDS\n            metricName: ReadLatency\n            stat: Average\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: standard configuration\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example CloudWatch SLO\n    indicator:\n      metricSource:\n        name: cloud-watch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          cloudWatch:\n            region: us-west-2\n            namespace: AWS/RDS\n            metricName: ReadLatency\n            stat: Average\n            dimensions:\n            - name: LoadBalancer\n              value: app/api-server\n            accountId: \"123456789012\"\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Composite SLO\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: user-experience-slo\n    displayName: User experience SLO\n    project: default\n    labels:\n      area:\n      - user-experience\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - ux\n    annotations:\n      area: user-experience\n      env: prod\n      region: us\n      team: ux\n  spec:\n    description: Example composite SLO\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: User experience\n      name: user-experience\n      target: 0.95\n      composite:\n        maxDelay: 45m0s\n        components:\n          objectives:\n          - project: e-commerce\n            slo: store-web-latency\n            objective: latency\n            weight: 1.0\n            whenDelayed: CountAsGood\n          - project: e-commerce\n            slo: store-web-availability\n            objective: availability\n            weight: 4.0\n            whenDelayed: CountAsBad\n          - project: external-services\n            slo: payment-integration-availability\n            objective: availability\n            weight: 3.0\n            whenDelayed: Ignore\n      primary: true\n    service: web-app\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n# Composite SLO\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: user-experience-slo\n    displayName: User experience SLO\n    project: default\n    labels:\n      area:\n      - user-experience\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - ux\n    annotations:\n      area: user-experience\n      env: prod\n      region: us\n      team: ux\n  spec:\n    description: Example composite SLO\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: User experience\n      name: user-experience\n      target: 0.95\n      composite:\n        maxDelay: 45m0s\n        components:\n          objectives:\n          - project: e-commerce\n            slo: store-web-latency\n            objective: latency\n            weight: 1.0\n            whenDelayed: CountAsGood\n          - project: e-commerce\n            slo: store-web-availability\n            objective: availability\n            weight: 4.0\n            whenDelayed: CountAsBad\n          - project: external-services\n            slo: payment-integration-availability\n            objective: availability\n            weight: 3.0\n            whenDelayed: Ignore\n      primary: true\n    service: web-app\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n# Composite SLO\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: user-experience-slo\n    displayName: User experience SLO\n    project: default\n    labels:\n      area:\n      - user-experience\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - ux\n    annotations:\n      area: user-experience\n      env: prod\n      region: us\n      team: ux\n  spec:\n    description: Example composite SLO\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: User experience\n      name: user-experience\n      target: 0.95\n      timeSliceTarget: 0.9\n      composite:\n        maxDelay: 45m0s\n        components:\n          objectives:\n          - project: e-commerce\n            slo: store-web-latency\n            objective: latency\n            weight: 1.0\n            whenDelayed: CountAsGood\n          - project: e-commerce\n            slo: store-web-availability\n            objective: availability\n            weight: 4.0\n            whenDelayed: CountAsBad\n          - project: external-services\n            slo: payment-integration-availability\n            objective: availability\n            weight: 3.0\n            whenDelayed: Ignore\n      primary: true\n    service: web-app\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n# Composite SLO\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: user-experience-slo\n    displayName: User experience SLO\n    project: default\n    labels:\n      area:\n      - user-experience\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - ux\n    annotations:\n      area: user-experience\n      env: prod\n      region: us\n      team: ux\n  spec:\n    description: Example composite SLO\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: User experience\n      name: user-experience\n      target: 0.95\n      timeSliceTarget: 0.9\n      composite:\n        maxDelay: 45m0s\n        components:\n          objectives:\n          - project: e-commerce\n            slo: store-web-latency\n            objective: latency\n            weight: 1.0\n            whenDelayed: CountAsGood\n          - project: e-commerce\n            slo: store-web-availability\n            objective: availability\n            weight: 4.0\n            whenDelayed: CountAsBad\n          - project: external-services\n            slo: payment-integration-availability\n            objective: availability\n            weight: 3.0\n            whenDelayed: Ignore\n      primary: true\n    service: web-app\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Datadog SLO\n    indicator:\n      metricSource:\n        name: datadog\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          datadog:\n            query: sum:trace.http.request.hits.by_http_status{http.status_class:2xx}.as_count()\n        total:\n          datadog:\n            query: sum:trace.http.request.hits.by_http_status{*}.as_count()\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Datadog SLO\n    indicator:\n      metricSource:\n        name: datadog\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          datadog:\n            query: sum:trace.http.request.hits.by_http_status{http.status_class:2xx}.as_count()\n        total:\n          datadog:\n            query: sum:trace.http.request.hits.by_http_status{*}.as_count()\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Datadog SLO\n    indicator:\n      metricSource:\n        name: datadog\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          datadog:\n            query: sum:trace.http.request.hits.by_http_status{http.status_class:2xx}.as_count()\n        total:\n          datadog:\n            query: sum:trace.http.request.hits.by_http_status{*}.as_count()\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Datadog SLO\n    indicator:\n      metricSource:\n        name: datadog\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          datadog:\n            query: sum:trace.http.request.hits.by_http_status{http.status_class:2xx}.as_count()\n        total:\n          datadog:\n            query: sum:trace.http.request.hits.by_http_status{*}.as_count()\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Datadog SLO\n    indicator:\n      metricSource:\n        name: datadog\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          datadog:\n            query: avg:trace.http.request.duration{*}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Datadog SLO\n    indicator:\n      metricSource:\n        name: datadog\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          datadog:\n            query: avg:trace.http.request.duration{*}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Datadog SLO\n    indicator:\n      metricSource:\n        name: datadog\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          datadog:\n            query: avg:trace.http.request.duration{*}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Datadog SLO\n    indicator:\n      metricSource:\n        name: datadog\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          datadog:\n            query: avg:trace.http.request.duration{*}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Dynatrace SLO\n    indicator:\n      metricSource:\n        name: dynatrace\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          dynatrace:\n            metricSelector: builtin:synthetic.http.request.statusCode:filter(and(or(eq(\"Status code\",SC_2xx)))):splitBy():sort(value(auto,descending)):limit(20)\n        total:\n          dynatrace:\n            metricSelector: builtin:synthetic.http.request.statusCode:splitBy():sort(value(auto,descending)):limit(20)\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Dynatrace SLO\n    indicator:\n      metricSource:\n        name: dynatrace\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          dynatrace:\n            metricSelector: builtin:synthetic.http.request.statusCode:filter(and(or(eq(\"Status code\",SC_2xx)))):splitBy():sort(value(auto,descending)):limit(20)\n        total:\n          dynatrace:\n            metricSelector: builtin:synthetic.http.request.statusCode:splitBy():sort(value(auto,descending)):limit(20)\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Dynatrace SLO\n    indicator:\n      metricSource:\n        name: dynatrace\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          dynatrace:\n            metricSelector: builtin:synthetic.http.request.statusCode:filter(and(or(eq(\"Status code\",SC_2xx)))):splitBy():sort(value(auto,descending)):limit(20)\n        total:\n          dynatrace:\n            metricSelector: builtin:synthetic.http.request.statusCode:splitBy():sort(value(auto,descending)):limit(20)\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Dynatrace SLO\n    indicator:\n      metricSource:\n        name: dynatrace\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          dynatrace:\n            metricSelector: builtin:synthetic.http.request.statusCode:filter(and(or(eq(\"Status code\",SC_2xx)))):splitBy():sort(value(auto,descending)):limit(20)\n        total:\n          dynatrace:\n            metricSelector: builtin:synthetic.http.request.statusCode:splitBy():sort(value(auto,descending)):limit(20)\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Dynatrace SLO\n    indicator:\n      metricSource:\n        name: dynatrace\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          dynatrace:\n            metricSelector: builtin:service.response.server:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityName.equals(~\"APIServer~\")\"))))):splitBy(\"dt.entity.service\"):sort(value(auto,descending)):limit(100)\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Dynatrace SLO\n    indicator:\n      metricSource:\n        name: dynatrace\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          dynatrace:\n            metricSelector: builtin:service.response.server:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityName.equals(~\"APIServer~\")\"))))):splitBy(\"dt.entity.service\"):sort(value(auto,descending)):limit(100)\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Dynatrace SLO\n    indicator:\n      metricSource:\n        name: dynatrace\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          dynatrace:\n            metricSelector: builtin:service.response.server:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityName.equals(~\"APIServer~\")\"))))):splitBy(\"dt.entity.service\"):sort(value(auto,descending)):limit(100)\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Dynatrace SLO\n    indicator:\n      metricSource:\n        name: dynatrace\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          dynatrace:\n            metricSelector: builtin:service.response.server:filter(and(or(in(\"dt.entity.service\",entitySelector(\"type(service),entityName.equals(~\"APIServer~\")\"))))):splitBy(\"dt.entity.service\"):sort(value(auto,descending)):limit(100)\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Elasticsearch SLO\n    indicator:\n      metricSource:\n        name: elasticsearch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          elasticsearch:\n            index: apm-7.13.3-transaction\n            query: |-\n              {\n                \"query\": {\n                  \"bool\": {\n                    \"must\": [\n                      {\n                        \"match\": {\n                          \"service.name\": \"api-server\"\n                        }\n                      }\n                    ],\n                    \"filter\": [\n                      {\n                        \"range\": {\n                          \"@timestamp\": {\n                            \"gte\": \"{{.BeginTime}}\",\n                            \"lte\": \"{{.EndTime}}\"\n                          }\n                        }\n                      },\n                      {\n                        \"match\": {\n                          \"transaction.result\": \"HTTP 2xx\"\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"size\": 0,\n                \"aggs\": {\n                  \"resolution\": {\n                    \"date_histogram\": {\n                      \"field\": \"@timestamp\",\n                      \"fixed_interval\": \"{{.Resolution}}\",\n                      \"min_doc_count\": 0,\n                      \"extended_bounds\": {\n                        \"min\": \"{{.BeginTime}}\",\n                        \"max\": \"{{.EndTime}}\"\n                        \"\n                      }\n                    },\n                    \"aggs\": {\n                      \"n9-val\": {\n                        \"value_count\": {\n                          \"field\": \"transaction.result\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n        total:\n          elasticsearch:\n            index: apm-7.13.3-transaction\n            query: |-\n              {\n                \"query\": {\n                  \"bool\": {\n                    \"must\": [\n                      {\n                        \"match\": {\n                          \"service.name\": \"api-server\"\n                        }\n                      }\n                    ],\n                    \"filter\": [\n                      {\n                        \"range\": {\n                          \"@timestamp\": {\n                            \"gte\": \"{{.BeginTime}}\",\n                            \"lte\": \"{{.EndTime}}\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"size\": 0,\n                \"aggs\": {\n                  \"resolution\": {\n                    \"date_histogram\": {\n                      \"field\": \"@timestamp\",\n                      \"fixed_interval\": \"{{.Resolution}}\"\n                      \"min_doc_count\": 0,\n                      \"extended_bounds\": {\n                        \"min\": \"{{.BeginTime}}\",\n                        \"max\": \"{{.EndTime}}\"\n                      }\n                    },\n                    \"aggs\": {\n                      \"n9-val\": {\n                        \"value_count\": {\n                          \"field\": \"transaction.result\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Elasticsearch SLO\n    indicator:\n      metricSource:\n        name: elasticsearch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          elasticsearch:\n            index: apm-7.13.3-transaction\n            query: |-\n              {\n                \"query\": {\n                  \"bool\": {\n                    \"must\": [\n                      {\n                        \"match\": {\n                          \"service.name\": \"api-server\"\n                        }\n                      }\n                    ],\n                    \"filter\": [\n                      {\n                        \"range\": {\n                          \"@timestamp\": {\n                            \"gte\": \"{{.BeginTime}}\",\n                            \"lte\": \"{{.EndTime}}\"\n                          }\n                        }\n                      },\n                      {\n                        \"match\": {\n                          \"transaction.result\": \"HTTP 2xx\"\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"size\": 0,\n                \"aggs\": {\n                  \"resolution\": {\n                    \"date_histogram\": {\n                      \"field\": \"@timestamp\",\n                      \"fixed_interval\": \"{{.Resolution}}\",\n                      \"min_doc_count\": 0,\n                      \"extended_bounds\": {\n                        \"min\": \"{{.BeginTime}}\",\n                        \"max\": \"{{.EndTime}}\"\n                        \"\n                      }\n                    },\n                    \"aggs\": {\n                      \"n9-val\": {\n                        \"value_count\": {\n                          \"field\": \"transaction.result\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n        total:\n          elasticsearch:\n            index: apm-7.13.3-transaction\n            query: |-\n              {\n                \"query\": {\n                  \"bool\": {\n                    \"must\": [\n                      {\n                        \"match\": {\n                          \"service.name\": \"api-server\"\n                        }\n                      }\n                    ],\n                    \"filter\": [\n                      {\n                        \"range\": {\n                          \"@timestamp\": {\n                            \"gte\": \"{{.BeginTime}}\",\n                            \"lte\": \"{{.EndTime}}\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"size\": 0,\n                \"aggs\": {\n                  \"resolution\": {\n                    \"date_histogram\": {\n                      \"field\": \"@timestamp\",\n                      \"fixed_interval\": \"{{.Resolution}}\"\n                      \"min_doc_count\": 0,\n                      \"extended_bounds\": {\n                        \"min\": \"{{.BeginTime}}\",\n                        \"max\": \"{{.EndTime}}\"\n                      }\n                    },\n                    \"aggs\": {\n                      \"n9-val\": {\n                        \"value_count\": {\n                          \"field\": \"transaction.result\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Elasticsearch SLO\n    indicator:\n      metricSource:\n        name: elasticsearch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          elasticsearch:\n            index: apm-7.13.3-transaction\n            query: |-\n              {\n                \"query\": {\n                  \"bool\": {\n                    \"must\": [\n                      {\n                        \"match\": {\n                          \"service.name\": \"api-server\"\n                        }\n                      }\n                    ],\n                    \"filter\": [\n                      {\n                        \"range\": {\n                          \"@timestamp\": {\n                            \"gte\": \"{{.BeginTime}}\",\n                            \"lte\": \"{{.EndTime}}\"\n                          }\n                        }\n                      },\n                      {\n                        \"match\": {\n                          \"transaction.result\": \"HTTP 2xx\"\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"size\": 0,\n                \"aggs\": {\n                  \"resolution\": {\n                    \"date_histogram\": {\n                      \"field\": \"@timestamp\",\n                      \"fixed_interval\": \"{{.Resolution}}\",\n                      \"min_doc_count\": 0,\n                      \"extended_bounds\": {\n                        \"min\": \"{{.BeginTime}}\",\n                        \"max\": \"{{.EndTime}}\"\n                        \"\n                      }\n                    },\n                    \"aggs\": {\n                      \"n9-val\": {\n                        \"value_count\": {\n                          \"field\": \"transaction.result\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n        total:\n          elasticsearch:\n            index: apm-7.13.3-transaction\n            query: |-\n              {\n                \"query\": {\n                  \"bool\": {\n                    \"must\": [\n                      {\n                        \"match\": {\n                          \"service.name\": \"api-server\"\n                        }\n                      }\n                    ],\n                    \"filter\": [\n                      {\n                        \"range\": {\n                          \"@timestamp\": {\n                            \"gte\": \"{{.BeginTime}}\",\n                            \"lte\": \"{{.EndTime}}\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"size\": 0,\n                \"aggs\": {\n                  \"resolution\": {\n                    \"date_histogram\": {\n                      \"field\": \"@timestamp\",\n                      \"fixed_interval\": \"{{.Resolution}}\"\n                      \"min_doc_count\": 0,\n                      \"extended_bounds\": {\n                        \"min\": \"{{.BeginTime}}\",\n                        \"max\": \"{{.EndTime}}\"\n                      }\n                    },\n                    \"aggs\": {\n                      \"n9-val\": {\n                        \"value_count\": {\n                          \"field\": \"transaction.result\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Elasticsearch SLO\n    indicator:\n      metricSource:\n        name: elasticsearch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          elasticsearch:\n            index: apm-7.13.3-transaction\n            query: |-\n              {\n                \"query\": {\n                  \"bool\": {\n                    \"must\": [\n                      {\n                        \"match\": {\n                          \"service.name\": \"api-server\"\n                        }\n                      }\n                    ],\n                    \"filter\": [\n                      {\n                        \"range\": {\n                          \"@timestamp\": {\n                            \"gte\": \"{{.BeginTime}}\",\n                            \"lte\": \"{{.EndTime}}\"\n                          }\n                        }\n                      },\n                      {\n                        \"match\": {\n                          \"transaction.result\": \"HTTP 2xx\"\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"size\": 0,\n                \"aggs\": {\n                  \"resolution\": {\n                    \"date_histogram\": {\n                      \"field\": \"@timestamp\",\n                      \"fixed_interval\": \"{{.Resolution}}\",\n                      \"min_doc_count\": 0,\n                      \"extended_bounds\": {\n                        \"min\": \"{{.BeginTime}}\",\n                        \"max\": \"{{.EndTime}}\"\n                        \"\n                      }\n                    },\n                    \"aggs\": {\n                      \"n9-val\": {\n                        \"value_count\": {\n                          \"field\": \"transaction.result\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n        total:\n          elasticsearch:\n            index: apm-7.13.3-transaction\n            query: |-\n              {\n                \"query\": {\n                  \"bool\": {\n                    \"must\": [\n                      {\n                        \"match\": {\n                          \"service.name\": \"api-server\"\n                        }\n                      }\n                    ],\n                    \"filter\": [\n                      {\n                        \"range\": {\n                          \"@timestamp\": {\n                            \"gte\": \"{{.BeginTime}}\",\n                            \"lte\": \"{{.EndTime}}\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"size\": 0,\n                \"aggs\": {\n                  \"resolution\": {\n                    \"date_histogram\": {\n                      \"field\": \"@timestamp\",\n                      \"fixed_interval\": \"{{.Resolution}}\"\n                      \"min_doc_count\": 0,\n                      \"extended_bounds\": {\n                        \"min\": \"{{.BeginTime}}\",\n                        \"max\": \"{{.EndTime}}\"\n                      }\n                    },\n                    \"aggs\": {\n                      \"n9-val\": {\n                        \"value_count\": {\n                          \"field\": \"transaction.result\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Elasticsearch SLO\n    indicator:\n      metricSource:\n        name: elasticsearch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          elasticsearch:\n            index: apm-7.13.3-transaction\n            query: |-\n              {\n                \"query\": {\n                  \"bool\": {\n                    \"must\": [\n                      {\n                        \"match\": {\n                          \"service.name\": \"api-server\"\n                        }\n                      },\n                      {\n                        \"match\": {\n                          \"transaction.result\": \"HTTP 2xx\"\n                        }\n                      }\n                    ],\n                    \"filter\": [\n                      {\n                        \"range\": {\n                          \"@timestamp\": {\n                            \"gte\": \"{{.BeginTime}}\",\n                            \"lte\": \"{{.EndTime}}\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"size\": 0,\n                \"aggs\": {\n                  \"resolution\": {\n                    \"date_histogram\": {\n                      \"field\": \"@timestamp\",\n                      \"fixed_interval\": \"{{.Resolution}}\",\n                      \"min_doc_count\": 0,\n                      \"extended_bounds\": {\n                        \"min\": \"{{.BeginTime}}\",\n                        \"max\": \"{{.EndTime}}\"\n                      }\n                    },\n                    \"aggs\": {\n                      \"n9-val\": {\n                        \"avg\": {\n                          \"field\": \"transaction.duration.us\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Elasticsearch SLO\n    indicator:\n      metricSource:\n        name: elasticsearch\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          elasticsearch:\n            index: apm-7.13.3-transaction\n            query: |-\n              {\n                \"query\": {\n                  \"bool\": {\n                    \"must\": [\n                      {\n                        \"match\": {\n                          \"service.name\": \"api-server\"\n                        }\n                      },\n                      {\n                        \"match\": {\n                          \"transaction.result\": \"HTTP 2xx\"\n                        }\n                      }\n                    ],\n                    \"filter\": [\n                      {\n                        \"range\": {\n                          \"@timestamp\": {\n                            \"gte\": \"{{.BeginTime}}\",\n                            \"lte\": \"{{.EndTime}}\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"size\": 0,\n                \"aggs\": {\n                  \"resolution\": {\n                    \"date_histogram\": {\n                      \"field\": \"@timestamp\",\n                      \"fixed_interval\": \"{{.Resolution}}\",\n                      \"min_doc_count\": 0,\n                      \"extended_bounds\": {\n                        \"min\": \"{{.BeginTime}}\",\n                        \"max\": \"{{.EndTime}}\"\n                      }\n                    },\n                    \"aggs\": {\n                      \"n9-val\": {\n                        \"avg\": {\n                          \"field\": \"transaction.duration.us\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Elasticsearch SLO\n    indicator:\n      metricSource:\n        name: elasticsearch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          elasticsearch:\n            index: apm-7.13.3-transaction\n            query: |-\n              {\n                \"query\": {\n                  \"bool\": {\n                    \"must\": [\n                      {\n                        \"match\": {\n                          \"service.name\": \"api-server\"\n                        }\n                      },\n                      {\n                        \"match\": {\n                          \"transaction.result\": \"HTTP 2xx\"\n                        }\n                      }\n                    ],\n                    \"filter\": [\n                      {\n                        \"range\": {\n                          \"@timestamp\": {\n                            \"gte\": \"{{.BeginTime}}\",\n                            \"lte\": \"{{.EndTime}}\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"size\": 0,\n                \"aggs\": {\n                  \"resolution\": {\n                    \"date_histogram\": {\n                      \"field\": \"@timestamp\",\n                      \"fixed_interval\": \"{{.Resolution}}\",\n                      \"min_doc_count\": 0,\n                      \"extended_bounds\": {\n                        \"min\": \"{{.BeginTime}}\",\n                        \"max\": \"{{.EndTime}}\"\n                      }\n                    },\n                    \"aggs\": {\n                      \"n9-val\": {\n                        \"avg\": {\n                          \"field\": \"transaction.duration.us\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Elasticsearch SLO\n    indicator:\n      metricSource:\n        name: elasticsearch\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          elasticsearch:\n            index: apm-7.13.3-transaction\n            query: |-\n              {\n                \"query\": {\n                  \"bool\": {\n                    \"must\": [\n                      {\n                        \"match\": {\n                          \"service.name\": \"api-server\"\n                        }\n                      },\n                      {\n                        \"match\": {\n                          \"transaction.result\": \"HTTP 2xx\"\n                        }\n                      }\n                    ],\n                    \"filter\": [\n                      {\n                        \"range\": {\n                          \"@timestamp\": {\n                            \"gte\": \"{{.BeginTime}}\",\n                            \"lte\": \"{{.EndTime}}\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                },\n                \"size\": 0,\n                \"aggs\": {\n                  \"resolution\": {\n                    \"date_histogram\": {\n                      \"field\": \"@timestamp\",\n                      \"fixed_interval\": \"{{.Resolution}}\",\n                      \"min_doc_count\": 0,\n                      \"extended_bounds\": {\n                        \"min\": \"{{.BeginTime}}\",\n                        \"max\": \"{{.EndTime}}\"\n                      }\n                    },\n                    \"aggs\": {\n                      \"n9-val\": {\n                        \"avg\": {\n                          \"field\": \"transaction.duration.us\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Generic SLO\n    indicator:\n      metricSource:\n        name: generic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          generic:\n            query: \"SINCE N9FROM UNTIL N9TO FROM a1: entities(aws:postgresql:123) FETCH a1.metrics(\\\"infra:database.requests.good\\\", \\\"aws-cloudwatch\\\"){timestamp, value} LIMITS metrics.granularityDuration(PT1M)\"\n        total:\n          generic:\n            query: \"SINCE N9FROM UNTIL N9TO FROM a1: entities(aws:postgresql:123) FETCH a1.metrics(\\\"infra:database.requests.total\\\", \\\"aws-cloudwatch\\\"){timestamp, value} LIMITS metrics.granularityDuration(PT1M)\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Generic SLO\n    indicator:\n      metricSource:\n        name: generic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          generic:\n            query: \"SINCE N9FROM UNTIL N9TO FROM a1: entities(aws:postgresql:123) FETCH a1.metrics(\\\"infra:database.requests.good\\\", \\\"aws-cloudwatch\\\"){timestamp, value} LIMITS metrics.granularityDuration(PT1M)\"\n        total:\n          generic:\n            query: \"SINCE N9FROM UNTIL N9TO FROM a1: entities(aws:postgresql:123) FETCH a1.metrics(\\\"infra:database.requests.total\\\", \\\"aws-cloudwatch\\\"){timestamp, value} LIMITS metrics.granularityDuration(PT1M)\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Generic SLO\n    indicator:\n      metricSource:\n        name: generic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          generic:\n            query: \"SINCE N9FROM UNTIL N9TO FROM a1: entities(aws:postgresql:123) FETCH a1.metrics(\\\"infra:database.requests.good\\\", \\\"aws-cloudwatch\\\"){timestamp, value} LIMITS metrics.granularityDuration(PT1M)\"\n        total:\n          generic:\n            query: \"SINCE N9FROM UNTIL N9TO FROM a1: entities(aws:postgresql:123) FETCH a1.metrics(\\\"infra:database.requests.total\\\", \\\"aws-cloudwatch\\\"){timestamp, value} LIMITS metrics.granularityDuration(PT1M)\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Generic SLO\n    indicator:\n      metricSource:\n        name: generic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          generic:\n            query: \"SINCE N9FROM UNTIL N9TO FROM a1: entities(aws:postgresql:123) FETCH a1.metrics(\\\"infra:database.requests.good\\\", \\\"aws-cloudwatch\\\"){timestamp, value} LIMITS metrics.granularityDuration(PT1M)\"\n        total:\n          generic:\n            query: \"SINCE N9FROM UNTIL N9TO FROM a1: entities(aws:postgresql:123) FETCH a1.metrics(\\\"infra:database.requests.total\\\", \\\"aws-cloudwatch\\\"){timestamp, value} LIMITS metrics.granularityDuration(PT1M)\"\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Generic SLO\n    indicator:\n      metricSource:\n        name: generic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          generic:\n            query: \"SINCE N9FROM UNTIL N9TO FROM a1: entities(aws:postgresql:123) FETCH a1.metrics(\\\"infra:database.cpu.utilization\\\", \\\"aws-cloudwatch\\\"){timestamp, value} LIMITS metrics.granularityDuration(PT1M)\"\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Generic SLO\n    indicator:\n      metricSource:\n        name: generic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          generic:\n            query: \"SINCE N9FROM UNTIL N9TO FROM a1: entities(aws:postgresql:123) FETCH a1.metrics(\\\"infra:database.cpu.utilization\\\", \\\"aws-cloudwatch\\\"){timestamp, value} LIMITS metrics.granularityDuration(PT1M)\"\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Generic SLO\n    indicator:\n      metricSource:\n        name: generic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          generic:\n            query: \"SINCE N9FROM UNTIL N9TO FROM a1: entities(aws:postgresql:123) FETCH a1.metrics(\\\"infra:database.cpu.utilization\\\", \\\"aws-cloudwatch\\\"){timestamp, value} LIMITS metrics.granularityDuration(PT1M)\"\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Generic SLO\n    indicator:\n      metricSource:\n        name: generic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          generic:\n            query: \"SINCE N9FROM UNTIL N9TO FROM a1: entities(aws:postgresql:123) FETCH a1.metrics(\\\"infra:database.cpu.utilization\\\", \\\"aws-cloudwatch\\\"){timestamp, value} LIMITS metrics.granularityDuration(PT1M)\"\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Google Cloud Monitoring SLO\n    indicator:\n      metricSource:\n        name: google-cloud-monitoring\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          gcm:\n            query: |-\n              fetch api-server\n              | metric 'serviceruntime.googleapis.com/api/request_count'\n              | filter\n                  (resource.service == 'monitoring.googleapis.com')\n                  \u0026\u0026 (metric.response_code == '200')\n              | align rate(1m)\n              | every 1m\n              | group_by [resource.service],\n                  [value_request_count_aggregate: aggregate(value.request_count)]\n            projectId: my-project-id\n        total:\n          gcm:\n            query: |-\n              fetch api-server\n              | metric 'serviceruntime.googleapis.com/api/request_count'\n              | filter\n                  (resource.service == 'monitoring.googleapis.com')\n              | align rate(1m)\n              | every 1m\n              | group_by [resource.service],\n                  [value_request_count_aggregate: aggregate(value.request_count)]\n            projectId: my-project-id\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Google Cloud Monitoring SLO\n    indicator:\n      metricSource:\n        name: google-cloud-monitoring\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          gcm:\n            query: |-\n              fetch api-server\n              | metric 'serviceruntime.googleapis.com/api/request_count'\n              | filter\n                  (resource.service == 'monitoring.googleapis.com')\n                  \u0026\u0026 (metric.response_code == '200')\n              | align rate(1m)\n              | every 1m\n              | group_by [resource.service],\n                  [value_request_count_aggregate: aggregate(value.request_count)]\n            projectId: my-project-id\n        total:\n          gcm:\n            query: |-\n              fetch api-server\n              | metric 'serviceruntime.googleapis.com/api/request_count'\n              | filter\n                  (resource.service == 'monitoring.googleapis.com')\n              | align rate(1m)\n              | every 1m\n              | group_by [resource.service],\n                  [value_request_count_aggregate: aggregate(value.request_count)]\n            projectId: my-project-id\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Google Cloud Monitoring SLO\n    indicator:\n      metricSource:\n        name: google-cloud-monitoring\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          gcm:\n            query: |-\n              fetch api-server\n              | metric 'serviceruntime.googleapis.com/api/request_count'\n              | filter\n                  (resource.service == 'monitoring.googleapis.com')\n                  \u0026\u0026 (metric.response_code == '200')\n              | align rate(1m)\n              | every 1m\n              | group_by [resource.service],\n                  [value_request_count_aggregate: aggregate(value.request_count)]\n            projectId: my-project-id\n        total:\n          gcm:\n            query: |-\n              fetch api-server\n              | metric 'serviceruntime.googleapis.com/api/request_count'\n              | filter\n                  (resource.service == 'monitoring.googleapis.com')\n              | align rate(1m)\n              | every 1m\n              | group_by [resource.service],\n                  [value_request_count_aggregate: aggregate(value.request_count)]\n            projectId: my-project-id\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Google Cloud Monitoring SLO\n    indicator:\n      metricSource:\n        name: google-cloud-monitoring\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          gcm:\n            query: |-\n              fetch api-server\n              | metric 'serviceruntime.googleapis.com/api/request_count'\n              | filter\n                  (resource.service == 'monitoring.googleapis.com')\n                  \u0026\u0026 (metric.response_code == '200')\n              | align rate(1m)\n              | every 1m\n              | group_by [resource.service],\n                  [value_request_count_aggregate: aggregate(value.request_count)]\n            projectId: my-project-id\n        total:\n          gcm:\n            query: |-\n              fetch api-server\n              | metric 'serviceruntime.googleapis.com/api/request_count'\n              | filter\n                  (resource.service == 'monitoring.googleapis.com')\n              | align rate(1m)\n              | every 1m\n              | group_by [resource.service],\n                  [value_request_count_aggregate: aggregate(value.request_count)]\n            projectId: my-project-id\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Google Cloud Monitoring SLO\n    indicator:\n      metricSource:\n        name: google-cloud-monitoring\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          gcm:\n            query: |-\n              fetch api-server\n              | metric 'serviceruntime.googleapis.com/api/request_latencies'\n              | filter (resource.service == 'monitoring.googleapis.com')\n              | align delta(1m)\n              | every 1m\n              | group_by [resource.service],\n                  [value_request_latencies_mean: mean(value.request_latencies)]\n            projectId: my-project-id\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Google Cloud Monitoring SLO\n    indicator:\n      metricSource:\n        name: google-cloud-monitoring\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          gcm:\n            query: |-\n              fetch api-server\n              | metric 'serviceruntime.googleapis.com/api/request_latencies'\n              | filter (resource.service == 'monitoring.googleapis.com')\n              | align delta(1m)\n              | every 1m\n              | group_by [resource.service],\n                  [value_request_latencies_mean: mean(value.request_latencies)]\n            projectId: my-project-id\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Google Cloud Monitoring SLO\n    indicator:\n      metricSource:\n        name: google-cloud-monitoring\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          gcm:\n            query: |-\n              fetch api-server\n              | metric 'serviceruntime.googleapis.com/api/request_latencies'\n              | filter (resource.service == 'monitoring.googleapis.com')\n              | align delta(1m)\n              | every 1m\n              | group_by [resource.service],\n                  [value_request_latencies_mean: mean(value.request_latencies)]\n            projectId: my-project-id\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Google Cloud Monitoring SLO\n    indicator:\n      metricSource:\n        name: google-cloud-monitoring\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          gcm:\n            query: |-\n              fetch api-server\n              | metric 'serviceruntime.googleapis.com/api/request_latencies'\n              | filter (resource.service == 'monitoring.googleapis.com')\n              | align delta(1m)\n              | every 1m\n              | group_by [resource.service],\n                  [value_request_latencies_mean: mean(value.request_latencies)]\n            projectId: my-project-id\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Grafana Loki SLO\n    indicator:\n      metricSource:\n        name: grafana-loki\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          grafanaLoki:\n            logql: count(count_over_time(({component=\"api-server\"} | json | line_format \"{{.log}}\" | json | http_status_code \u003e= 200 and http_status_code \u003c 300)[1m]))\n        total:\n          grafanaLoki:\n            logql: count(count_over_time(({component=\"api-server\"} | json | line_format \"{{.log}}\" | json | http_status_code \u003e 0)[1m]))\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Grafana Loki SLO\n    indicator:\n      metricSource:\n        name: grafana-loki\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          grafanaLoki:\n            logql: count(count_over_time(({component=\"api-server\"} | json | line_format \"{{.log}}\" | json | http_status_code \u003e= 200 and http_status_code \u003c 300)[1m]))\n        total:\n          grafanaLoki:\n            logql: count(count_over_time(({component=\"api-server\"} | json | line_format \"{{.log}}\" | json | http_status_code \u003e 0)[1m]))\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Grafana Loki SLO\n    indicator:\n      metricSource:\n        name: grafana-loki\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          grafanaLoki:\n            logql: count(count_over_time(({component=\"api-server\"} | json | line_format \"{{.log}}\" | json | http_status_code \u003e= 200 and http_status_code \u003c 300)[1m]))\n        total:\n          grafanaLoki:\n            logql: count(count_over_time(({component=\"api-server\"} | json | line_format \"{{.log}}\" | json | http_status_code \u003e 0)[1m]))\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Grafana Loki SLO\n    indicator:\n      metricSource:\n        name: grafana-loki\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          grafanaLoki:\n            logql: count(count_over_time(({component=\"api-server\"} | json | line_format \"{{.log}}\" | json | http_status_code \u003e= 200 and http_status_code \u003c 300)[1m]))\n        total:\n          grafanaLoki:\n            logql: count(count_over_time(({component=\"api-server\"} | json | line_format \"{{.log}}\" | json | http_status_code \u003e 0)[1m]))\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Grafana Loki SLO\n    indicator:\n      metricSource:\n        name: grafana-loki\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          grafanaLoki:\n            logql: sum(sum_over_time({topic=\"cdc\"} |= \"kafka_consumergroup_lag\" | logfmt | line_format \"{{.kafka_consumergroup_lag}}\" | unwrap kafka_consumergroup_lag [1m]))\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Grafana Loki SLO\n    indicator:\n      metricSource:\n        name: grafana-loki\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          grafanaLoki:\n            logql: sum(sum_over_time({topic=\"cdc\"} |= \"kafka_consumergroup_lag\" | logfmt | line_format \"{{.kafka_consumergroup_lag}}\" | unwrap kafka_consumergroup_lag [1m]))\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Grafana Loki SLO\n    indicator:\n      metricSource:\n        name: grafana-loki\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          grafanaLoki:\n            logql: sum(sum_over_time({topic=\"cdc\"} |= \"kafka_consumergroup_lag\" | logfmt | line_format \"{{.kafka_consumergroup_lag}}\" | unwrap kafka_consumergroup_lag [1m]))\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Grafana Loki SLO\n    indicator:\n      metricSource:\n        name: grafana-loki\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          grafanaLoki:\n            logql: sum(sum_over_time({topic=\"cdc\"} |= \"kafka_consumergroup_lag\" | logfmt | line_format \"{{.kafka_consumergroup_lag}}\" | unwrap kafka_consumergroup_lag [1m]))\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Graphite SLO\n    indicator:\n      metricSource:\n        name: graphite\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          graphite:\n            metricPath: stats_counts.response.200\n        total:\n          graphite:\n            metricPath: stats_counts.response.all\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Graphite SLO\n    indicator:\n      metricSource:\n        name: graphite\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          graphite:\n            metricPath: stats_counts.response.200\n        total:\n          graphite:\n            metricPath: stats_counts.response.all\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Graphite SLO\n    indicator:\n      metricSource:\n        name: graphite\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          graphite:\n            metricPath: stats_counts.response.200\n        total:\n          graphite:\n            metricPath: stats_counts.response.all\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Graphite SLO\n    indicator:\n      metricSource:\n        name: graphite\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          graphite:\n            metricPath: stats_counts.response.200\n        total:\n          graphite:\n            metricPath: stats_counts.response.all\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Graphite SLO\n    indicator:\n      metricSource:\n        name: graphite\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          graphite:\n            metricPath: carbon.agents.9b365cce.cpuUsage\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Graphite SLO\n    indicator:\n      metricSource:\n        name: graphite\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          graphite:\n            metricPath: carbon.agents.9b365cce.cpuUsage\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Graphite SLO\n    indicator:\n      metricSource:\n        name: graphite\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          graphite:\n            metricPath: carbon.agents.9b365cce.cpuUsage\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Graphite SLO\n    indicator:\n      metricSource:\n        name: graphite\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          graphite:\n            metricPath: carbon.agents.9b365cce.cpuUsage\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: bad over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          honeycomb:\n            calculation: SUM\n            attribute: counterBad\n        total:\n          honeycomb:\n            calculation: SUM\n            attribute: counterTotal\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          honeycomb:\n            calculation: SUM\n            attribute: counterBad\n        total:\n          honeycomb:\n            calculation: SUM\n            attribute: counterTotal\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          honeycomb:\n            calculation: SUM\n            attribute: counterBad\n        total:\n          honeycomb:\n            calculation: SUM\n            attribute: counterTotal\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          honeycomb:\n            calculation: SUM\n            attribute: counterBad\n        total:\n          honeycomb:\n            calculation: SUM\n            attribute: counterTotal\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          honeycomb:\n            calculation: SUM\n            attribute: counterGood\n        total:\n          honeycomb:\n            calculation: SUM\n            attribute: counterTotal\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          honeycomb:\n            calculation: SUM\n            attribute: counterGood\n        total:\n          honeycomb:\n            calculation: SUM\n            attribute: counterTotal\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          honeycomb:\n            calculation: SUM\n            attribute: counterGood\n        total:\n          honeycomb:\n            calculation: SUM\n            attribute: counterTotal\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          honeycomb:\n            calculation: SUM\n            attribute: counterGood\n        total:\n          honeycomb:\n            calculation: SUM\n            attribute: counterTotal\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: single query good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        goodTotal:\n          honeycomb:\n            attribute: dc.sli.some-service-availability\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: single query good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        goodTotal:\n          honeycomb:\n            attribute: dc.sli.some-service-availability\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: single query good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        goodTotal:\n          honeycomb:\n            attribute: dc.sli.some-service-availability\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: single query good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        goodTotal:\n          honeycomb:\n            attribute: dc.sli.some-service-availability\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          honeycomb:\n            calculation: AVG\n            attribute: requestsLatency\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          honeycomb:\n            calculation: AVG\n            attribute: requestsLatency\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          honeycomb:\n            calculation: AVG\n            attribute: requestsLatency\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Honeycomb SLO\n    indicator:\n      metricSource:\n        name: honeycomb\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          honeycomb:\n            calculation: AVG\n            attribute: requestsLatency\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example InfluxDB SLO\n    indicator:\n      metricSource:\n        name: influx-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          influxdb:\n            query: |-\n              from(bucket: \"integrations\")\n              |\u003e range(start: time(v: params.n9time_start), stop: time(v: params.n9time_stop))\n              |\u003e aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n              |\u003e filter(fn: (r) =\u003e r[\"_measurement\"] == \"internal_write\")\n              |\u003e filter(fn: (r) =\u003e r[\"_field\"] == \"write_time_ns\")\n        total:\n          influxdb:\n            query: |-\n              from(bucket: \"integrations\")\n              |\u003e range(start: time(v: params.n9time_start), stop: time(v: params.n9time_stop))\n              |\u003e aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n              |\u003e filter(fn: (r) =\u003e r[\"_measurement\"] == \"internal_write\")\n              |\u003e filter(fn: (r) =\u003e r[\"_field\"] == \"write_time_ns\")\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example InfluxDB SLO\n    indicator:\n      metricSource:\n        name: influx-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          influxdb:\n            query: |-\n              from(bucket: \"integrations\")\n              |\u003e range(start: time(v: params.n9time_start), stop: time(v: params.n9time_stop))\n              |\u003e aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n              |\u003e filter(fn: (r) =\u003e r[\"_measurement\"] == \"internal_write\")\n              |\u003e filter(fn: (r) =\u003e r[\"_field\"] == \"write_time_ns\")\n        total:\n          influxdb:\n            query: |-\n              from(bucket: \"integrations\")\n              |\u003e range(start: time(v: params.n9time_start), stop: time(v: params.n9time_stop))\n              |\u003e aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n              |\u003e filter(fn: (r) =\u003e r[\"_measurement\"] == \"internal_write\")\n              |\u003e filter(fn: (r) =\u003e r[\"_field\"] == \"write_time_ns\")\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example InfluxDB SLO\n    indicator:\n      metricSource:\n        name: influx-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          influxdb:\n            query: |-\n              from(bucket: \"integrations\")\n              |\u003e range(start: time(v: params.n9time_start), stop: time(v: params.n9time_stop))\n              |\u003e aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n              |\u003e filter(fn: (r) =\u003e r[\"_measurement\"] == \"internal_write\")\n              |\u003e filter(fn: (r) =\u003e r[\"_field\"] == \"write_time_ns\")\n        total:\n          influxdb:\n            query: |-\n              from(bucket: \"integrations\")\n              |\u003e range(start: time(v: params.n9time_start), stop: time(v: params.n9time_stop))\n              |\u003e aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n              |\u003e filter(fn: (r) =\u003e r[\"_measurement\"] == \"internal_write\")\n              |\u003e filter(fn: (r) =\u003e r[\"_field\"] == \"write_time_ns\")\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example InfluxDB SLO\n    indicator:\n      metricSource:\n        name: influx-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          influxdb:\n            query: |-\n              from(bucket: \"integrations\")\n              |\u003e range(start: time(v: params.n9time_start), stop: time(v: params.n9time_stop))\n              |\u003e aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n              |\u003e filter(fn: (r) =\u003e r[\"_measurement\"] == \"internal_write\")\n              |\u003e filter(fn: (r) =\u003e r[\"_field\"] == \"write_time_ns\")\n        total:\n          influxdb:\n            query: |-\n              from(bucket: \"integrations\")\n              |\u003e range(start: time(v: params.n9time_start), stop: time(v: params.n9time_stop))\n              |\u003e aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n              |\u003e filter(fn: (r) =\u003e r[\"_measurement\"] == \"internal_write\")\n              |\u003e filter(fn: (r) =\u003e r[\"_field\"] == \"write_time_ns\")\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example InfluxDB SLO\n    indicator:\n      metricSource:\n        name: influx-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          influxdb:\n            query: |-\n              from(bucket: \"integrations\")\n              |\u003e range(start: time(v: params.n9time_start), stop: time(v: params.n9time_stop))\n              |\u003e aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n              |\u003e filter(fn: (r) =\u003e r[\"_measurement\"] == \"internal_write\")\n              |\u003e filter(fn: (r) =\u003e r[\"_field\"] == \"write_time_ns\")\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example InfluxDB SLO\n    indicator:\n      metricSource:\n        name: influx-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          influxdb:\n            query: |-\n              from(bucket: \"integrations\")\n              |\u003e range(start: time(v: params.n9time_start), stop: time(v: params.n9time_stop))\n              |\u003e aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n              |\u003e filter(fn: (r) =\u003e r[\"_measurement\"] == \"internal_write\")\n              |\u003e filter(fn: (r) =\u003e r[\"_field\"] == \"write_time_ns\")\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example InfluxDB SLO\n    indicator:\n      metricSource:\n        name: influx-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          influxdb:\n            query: |-\n              from(bucket: \"integrations\")\n              |\u003e range(start: time(v: params.n9time_start), stop: time(v: params.n9time_stop))\n              |\u003e aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n              |\u003e filter(fn: (r) =\u003e r[\"_measurement\"] == \"internal_write\")\n              |\u003e filter(fn: (r) =\u003e r[\"_field\"] == \"write_time_ns\")\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example InfluxDB SLO\n    indicator:\n      metricSource:\n        name: influx-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          influxdb:\n            query: |-\n              from(bucket: \"integrations\")\n              |\u003e range(start: time(v: params.n9time_start), stop: time(v: params.n9time_stop))\n              |\u003e aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n              |\u003e filter(fn: (r) =\u003e r[\"_measurement\"] == \"internal_write\")\n              |\u003e filter(fn: (r) =\u003e r[\"_field\"] == \"write_time_ns\")\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Metric variant: infrastructure query\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: query\n              query: entity.selfType:zookeeper AND entity.label:replica.1\n              metricId: error_requests_count\n              pluginId: zooKeeper\n        total:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: query\n              query: entity.selfType:zookeeper AND entity.label:replica.1\n              metricId: total_requests_count\n              pluginId: zooKeeper\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: infrastructure query\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: query\n              query: entity.selfType:zookeeper AND entity.label:replica.1\n              metricId: error_requests_count\n              pluginId: zooKeeper\n        total:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: query\n              query: entity.selfType:zookeeper AND entity.label:replica.1\n              metricId: total_requests_count\n              pluginId: zooKeeper\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: infrastructure query\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: query\n              query: entity.selfType:zookeeper AND entity.label:replica.1\n              metricId: error_requests_count\n              pluginId: zooKeeper\n        total:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: query\n              query: entity.selfType:zookeeper AND entity.label:replica.1\n              metricId: total_requests_count\n              pluginId: zooKeeper\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: infrastructure query\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: query\n              query: entity.selfType:zookeeper AND entity.label:replica.1\n              metricId: error_requests_count\n              pluginId: zooKeeper\n        total:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: query\n              query: entity.selfType:zookeeper AND entity.label:replica.1\n              metricId: total_requests_count\n              pluginId: zooKeeper\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: infrastructure snapshot id\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: snapshot\n              snapshotId: 00u2y4e4atkzaYkXP4x8\n              metricId: error_requests_count\n              pluginId: zooKeeper\n        total:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: snapshot\n              snapshotId: 00u2y4e4atkzaYkXP4x8\n              metricId: total_requests_count\n              pluginId: zooKeeper\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: infrastructure snapshot id\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: snapshot\n              snapshotId: 00u2y4e4atkzaYkXP4x8\n              metricId: error_requests_count\n              pluginId: zooKeeper\n        total:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: snapshot\n              snapshotId: 00u2y4e4atkzaYkXP4x8\n              metricId: total_requests_count\n              pluginId: zooKeeper\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: infrastructure snapshot id\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: snapshot\n              snapshotId: 00u2y4e4atkzaYkXP4x8\n              metricId: error_requests_count\n              pluginId: zooKeeper\n        total:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: snapshot\n              snapshotId: 00u2y4e4atkzaYkXP4x8\n              metricId: total_requests_count\n              pluginId: zooKeeper\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: infrastructure snapshot id\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: snapshot\n              snapshotId: 00u2y4e4atkzaYkXP4x8\n              metricId: error_requests_count\n              pluginId: zooKeeper\n        total:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: snapshot\n              snapshotId: 00u2y4e4atkzaYkXP4x8\n              metricId: total_requests_count\n              pluginId: zooKeeper\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: application\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          instana:\n            metricType: application\n            application:\n              metricId: calls\n              aggregation: sum\n              groupBy:\n                tag: application.name\n                tagEntity: DESTINATION\n              apiQuery: |\n                {\n                  \"type\": \"EXPRESSION\",\n                  \"logicalOperator\": \"AND\",\n                  \"elements\": [\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"kubernetes.cluster.name\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"DESTINATION\",\n                      \"value\": \"n9-dev-tooling-cluster\"\n                    },\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"kubernetes.container.name\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"DESTINATION\",\n                      \"value\": \"data-node\"\n                    },\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"call.type\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"NOT_APPLICABLE\",\n                      \"value\": \"HTTP\"\n                    },\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"endpoint.name\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"DESTINATION\",\n                      \"value\": \"GET /\"\n                    }\n                  ]\n                }\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: application\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          instana:\n            metricType: application\n            application:\n              metricId: calls\n              aggregation: sum\n              groupBy:\n                tag: application.name\n                tagEntity: DESTINATION\n              apiQuery: |\n                {\n                  \"type\": \"EXPRESSION\",\n                  \"logicalOperator\": \"AND\",\n                  \"elements\": [\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"kubernetes.cluster.name\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"DESTINATION\",\n                      \"value\": \"n9-dev-tooling-cluster\"\n                    },\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"kubernetes.container.name\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"DESTINATION\",\n                      \"value\": \"data-node\"\n                    },\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"call.type\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"NOT_APPLICABLE\",\n                      \"value\": \"HTTP\"\n                    },\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"endpoint.name\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"DESTINATION\",\n                      \"value\": \"GET /\"\n                    }\n                  ]\n                }\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: application\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          instana:\n            metricType: application\n            application:\n              metricId: calls\n              aggregation: sum\n              groupBy:\n                tag: application.name\n                tagEntity: DESTINATION\n              apiQuery: |\n                {\n                  \"type\": \"EXPRESSION\",\n                  \"logicalOperator\": \"AND\",\n                  \"elements\": [\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"kubernetes.cluster.name\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"DESTINATION\",\n                      \"value\": \"n9-dev-tooling-cluster\"\n                    },\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"kubernetes.container.name\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"DESTINATION\",\n                      \"value\": \"data-node\"\n                    },\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"call.type\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"NOT_APPLICABLE\",\n                      \"value\": \"HTTP\"\n                    },\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"endpoint.name\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"DESTINATION\",\n                      \"value\": \"GET /\"\n                    }\n                  ]\n                }\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: application\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          instana:\n            metricType: application\n            application:\n              metricId: calls\n              aggregation: sum\n              groupBy:\n                tag: application.name\n                tagEntity: DESTINATION\n              apiQuery: |\n                {\n                  \"type\": \"EXPRESSION\",\n                  \"logicalOperator\": \"AND\",\n                  \"elements\": [\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"kubernetes.cluster.name\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"DESTINATION\",\n                      \"value\": \"n9-dev-tooling-cluster\"\n                    },\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"kubernetes.container.name\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"DESTINATION\",\n                      \"value\": \"data-node\"\n                    },\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"call.type\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"NOT_APPLICABLE\",\n                      \"value\": \"HTTP\"\n                    },\n                    {\n                      \"type\": \"TAG_FILTER\",\n                      \"name\": \"endpoint.name\",\n                      \"operator\": \"EQUALS\",\n                      \"entity\": \"DESTINATION\",\n                      \"value\": \"GET /\"\n                    }\n                  ]\n                }\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: infrastructure query\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: query\n              query: entity.selfType:zookeeper AND entity.label:replica.1\n              metricId: max_request_latency\n              pluginId: zooKeeper\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: infrastructure query\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: query\n              query: entity.selfType:zookeeper AND entity.label:replica.1\n              metricId: max_request_latency\n              pluginId: zooKeeper\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: infrastructure query\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: query\n              query: entity.selfType:zookeeper AND entity.label:replica.1\n              metricId: max_request_latency\n              pluginId: zooKeeper\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: infrastructure query\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: query\n              query: entity.selfType:zookeeper AND entity.label:replica.1\n              metricId: max_request_latency\n              pluginId: zooKeeper\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: infrastructure snapshot id\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: snapshot\n              snapshotId: 00u2y4e4atkzaYkXP4x8\n              metricId: max_request_latency\n              pluginId: zooKeeper\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: infrastructure snapshot id\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: snapshot\n              snapshotId: 00u2y4e4atkzaYkXP4x8\n              metricId: max_request_latency\n              pluginId: zooKeeper\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: infrastructure snapshot id\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: snapshot\n              snapshotId: 00u2y4e4atkzaYkXP4x8\n              metricId: max_request_latency\n              pluginId: zooKeeper\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: infrastructure snapshot id\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Instana SLO\n    indicator:\n      metricSource:\n        name: instana\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          instana:\n            metricType: infrastructure\n            infrastructure:\n              metricRetrievalMethod: snapshot\n              snapshotId: 00u2y4e4atkzaYkXP4x8\n              metricId: max_request_latency\n              pluginId: zooKeeper\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Metric variant: error\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: false\n        good:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: good\n        total:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: total\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: error\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: false\n        good:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: good\n        total:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: total\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: error\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: false\n        good:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: good\n        total:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: total\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: error\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: false\n        good:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: good\n        total:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: total\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: false\n        good:\n          lightstep:\n            typeOfData: metric\n            uql: metric cpu.utilization | rate | group_by [], mean\n        total:\n          lightstep:\n            typeOfData: metric\n            uql: metric cpu.utilization | rate | group_by [], max\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: false\n        good:\n          lightstep:\n            typeOfData: metric\n            uql: metric cpu.utilization | rate | group_by [], mean\n        total:\n          lightstep:\n            typeOfData: metric\n            uql: metric cpu.utilization | rate | group_by [], max\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: false\n        good:\n          lightstep:\n            typeOfData: metric\n            uql: metric cpu.utilization | rate | group_by [], mean\n        total:\n          lightstep:\n            typeOfData: metric\n            uql: metric cpu.utilization | rate | group_by [], max\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: false\n        good:\n          lightstep:\n            typeOfData: metric\n            uql: metric cpu.utilization | rate | group_by [], mean\n        total:\n          lightstep:\n            typeOfData: metric\n            uql: metric cpu.utilization | rate | group_by [], max\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: error\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: error_rate\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: error\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: error_rate\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: error\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: error_rate\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: error\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: error_rate\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: latency\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: latency\n            percentile: 95.0\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: latency\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: latency\n            percentile: 95.0\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: latency\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: latency\n            percentile: 95.0\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: latency\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          lightstep:\n            streamId: DzpxcSRh\n            typeOfData: latency\n            percentile: 95.0\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          lightstep:\n            typeOfData: metric\n            uql: metric cpu.utilization | rate | group_by [], mean\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          lightstep:\n            typeOfData: metric\n            uql: metric cpu.utilization | rate | group_by [], mean\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          lightstep:\n            typeOfData: metric\n            uql: metric cpu.utilization | rate | group_by [], mean\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Lightstep SLO\n    indicator:\n      metricSource:\n        name: lightstep\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          lightstep:\n            typeOfData: metric\n            uql: metric cpu.utilization | rate | group_by [], mean\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: bad over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example LogicMonitor SLO\n    indicator:\n      metricSource:\n        name: logic-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONFAILURES\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11437\n        total:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONSESTABLISHED\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11436\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example LogicMonitor SLO\n    indicator:\n      metricSource:\n        name: logic-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        bad:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONFAILURES\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11437\n        total:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONSESTABLISHED\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11436\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example LogicMonitor SLO\n    indicator:\n      metricSource:\n        name: logic-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONFAILURES\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11437\n        total:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONSESTABLISHED\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11436\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: bad over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example LogicMonitor SLO\n    indicator:\n      metricSource:\n        name: logic-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        bad:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONFAILURES\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11437\n        total:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONSESTABLISHED\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11436\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example LogicMonitor SLO\n    indicator:\n      metricSource:\n        name: logic-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONSUCCESSES\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11438\n        total:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONSESTABLISHED\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11436\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example LogicMonitor SLO\n    indicator:\n      metricSource:\n        name: logic-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONSUCCESSES\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11438\n        total:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONSESTABLISHED\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11436\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example LogicMonitor SLO\n    indicator:\n      metricSource:\n        name: logic-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONSUCCESSES\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11438\n        total:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONSESTABLISHED\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11436\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example LogicMonitor SLO\n    indicator:\n      metricSource:\n        name: logic-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONSUCCESSES\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11438\n        total:\n          logicMonitor:\n            queryType: device_metrics\n            line: CONNECTIONSESTABLISHED\n            deviceDataSourceInstanceId: 933147615\n            graphId: 11436\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example LogicMonitor SLO\n    indicator:\n      metricSource:\n        name: logic-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          logicMonitor:\n            queryType: website_metrics\n            line: MIN RTT\n            websiteId: \"1\"\n            checkpointId: \"1044712023\"\n            graphName: responseTime\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example LogicMonitor SLO\n    indicator:\n      metricSource:\n        name: logic-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          logicMonitor:\n            queryType: website_metrics\n            line: MIN RTT\n            websiteId: \"1\"\n            checkpointId: \"1044712023\"\n            graphName: responseTime\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example LogicMonitor SLO\n    indicator:\n      metricSource:\n        name: logic-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          logicMonitor:\n            queryType: website_metrics\n            line: MIN RTT\n            websiteId: \"1\"\n            checkpointId: \"1044712023\"\n            graphName: responseTime\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example LogicMonitor SLO\n    indicator:\n      metricSource:\n        name: logic-monitor\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          logicMonitor:\n            queryType: website_metrics\n            line: MIN RTT\n            websiteId: \"1\"\n            checkpointId: \"1044712023\"\n            graphName: responseTime\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example New Relic SLO\n    indicator:\n      metricSource:\n        name: new-relic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          newRelic:\n            nrql: SELECT count(*) FROM Transaction WHERE httpResponseCode IN ('200','301','302') TIMESERIES\n        total:\n          newRelic:\n            nrql: SELECT count(*) FROM Transaction TIMESERIES\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example New Relic SLO\n    indicator:\n      metricSource:\n        name: new-relic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          newRelic:\n            nrql: SELECT count(*) FROM Transaction WHERE httpResponseCode IN ('200','301','302') TIMESERIES\n        total:\n          newRelic:\n            nrql: SELECT count(*) FROM Transaction TIMESERIES\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example New Relic SLO\n    indicator:\n      metricSource:\n        name: new-relic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          newRelic:\n            nrql: SELECT count(*) FROM Transaction WHERE httpResponseCode IN ('200','301','302') TIMESERIES\n        total:\n          newRelic:\n            nrql: SELECT count(*) FROM Transaction TIMESERIES\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example New Relic SLO\n    indicator:\n      metricSource:\n        name: new-relic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          newRelic:\n            nrql: SELECT count(*) FROM Transaction WHERE httpResponseCode IN ('200','301','302') TIMESERIES\n        total:\n          newRelic:\n            nrql: SELECT count(*) FROM Transaction TIMESERIES\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example New Relic SLO\n    indicator:\n      metricSource:\n        name: new-relic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          newRelic:\n            nrql: select average(duration) from transaction timeseries\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example New Relic SLO\n    indicator:\n      metricSource:\n        name: new-relic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          newRelic:\n            nrql: select average(duration) from transaction timeseries\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example New Relic SLO\n    indicator:\n      metricSource:\n        name: new-relic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          newRelic:\n            nrql: select average(duration) from transaction timeseries\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example New Relic SLO\n    indicator:\n      metricSource:\n        name: new-relic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          newRelic:\n            nrql: select average(duration) from transaction timeseries\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example OpenTSDB SLO\n    indicator:\n      metricSource:\n        name: open-t-s-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          opentsdb:\n            query: start={{.BeginTime}}\u0026end={{.EndTime}}\u0026ms=true\u0026m=none:{{.Resolution}}-count-zero:http.code{code=2xx}\n        total:\n          opentsdb:\n            query: start={{.BeginTime}}\u0026end={{.EndTime}}\u0026ms=true\u0026m=none:{{.Resolution}}-count-zero:http.code{type=http.status_code}\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example OpenTSDB SLO\n    indicator:\n      metricSource:\n        name: open-t-s-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          opentsdb:\n            query: start={{.BeginTime}}\u0026end={{.EndTime}}\u0026ms=true\u0026m=none:{{.Resolution}}-count-zero:http.code{code=2xx}\n        total:\n          opentsdb:\n            query: start={{.BeginTime}}\u0026end={{.EndTime}}\u0026ms=true\u0026m=none:{{.Resolution}}-count-zero:http.code{type=http.status_code}\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example OpenTSDB SLO\n    indicator:\n      metricSource:\n        name: open-t-s-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          opentsdb:\n            query: start={{.BeginTime}}\u0026end={{.EndTime}}\u0026ms=true\u0026m=none:{{.Resolution}}-count-zero:http.code{code=2xx}\n        total:\n          opentsdb:\n            query: start={{.BeginTime}}\u0026end={{.EndTime}}\u0026ms=true\u0026m=none:{{.Resolution}}-count-zero:http.code{type=http.status_code}\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example OpenTSDB SLO\n    indicator:\n      metricSource:\n        name: open-t-s-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          opentsdb:\n            query: start={{.BeginTime}}\u0026end={{.EndTime}}\u0026ms=true\u0026m=none:{{.Resolution}}-count-zero:http.code{code=2xx}\n        total:\n          opentsdb:\n            query: start={{.BeginTime}}\u0026end={{.EndTime}}\u0026ms=true\u0026m=none:{{.Resolution}}-count-zero:http.code{type=http.status_code}\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example OpenTSDB SLO\n    indicator:\n      metricSource:\n        name: open-t-s-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          opentsdb:\n            query: start={{.BeginTime}}\u0026end={{.EndTime}}\u0026ms=true\u0026m=none:{{.Resolution}}-avg-zero:transaction.duration{host=host.01}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example OpenTSDB SLO\n    indicator:\n      metricSource:\n        name: open-t-s-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          opentsdb:\n            query: start={{.BeginTime}}\u0026end={{.EndTime}}\u0026ms=true\u0026m=none:{{.Resolution}}-avg-zero:transaction.duration{host=host.01}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example OpenTSDB SLO\n    indicator:\n      metricSource:\n        name: open-t-s-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          opentsdb:\n            query: start={{.BeginTime}}\u0026end={{.EndTime}}\u0026ms=true\u0026m=none:{{.Resolution}}-avg-zero:transaction.duration{host=host.01}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example OpenTSDB SLO\n    indicator:\n      metricSource:\n        name: open-t-s-d-b\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          opentsdb:\n            query: start={{.BeginTime}}\u0026end={{.EndTime}}\u0026ms=true\u0026m=none:{{.Resolution}}-avg-zero:transaction.duration{host=host.01}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Metric variant: transaction\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Pingdom SLO\n    indicator:\n      metricSource:\n        name: pingdom\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: transaction\n        total:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: transaction\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: transaction\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Pingdom SLO\n    indicator:\n      metricSource:\n        name: pingdom\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: transaction\n        total:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: transaction\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: transaction\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Pingdom SLO\n    indicator:\n      metricSource:\n        name: pingdom\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: transaction\n        total:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: transaction\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: transaction\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Pingdom SLO\n    indicator:\n      metricSource:\n        name: pingdom\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: transaction\n        total:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: transaction\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: uptime\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Pingdom SLO\n    indicator:\n      metricSource:\n        name: pingdom\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: uptime\n            status: up\n        total:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: uptime\n            status: up,down\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: uptime\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Pingdom SLO\n    indicator:\n      metricSource:\n        name: pingdom\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: uptime\n            status: up\n        total:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: uptime\n            status: up,down\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: uptime\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Pingdom SLO\n    indicator:\n      metricSource:\n        name: pingdom\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: uptime\n            status: up\n        total:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: uptime\n            status: up,down\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: uptime\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Pingdom SLO\n    indicator:\n      metricSource:\n        name: pingdom\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: uptime\n            status: up\n        total:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: uptime\n            status: up,down\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: uptime\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Pingdom SLO\n    indicator:\n      metricSource:\n        name: pingdom\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: uptime\n            status: up\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: uptime\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Pingdom SLO\n    indicator:\n      metricSource:\n        name: pingdom\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: uptime\n            status: up\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: uptime\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Pingdom SLO\n    indicator:\n      metricSource:\n        name: pingdom\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: uptime\n            status: up\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: uptime\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Pingdom SLO\n    indicator:\n      metricSource:\n        name: pingdom\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          pingdom:\n            checkId: \"1234567\"\n            checkType: uptime\n            status: up\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Prometheus SLO\n    indicator:\n      metricSource:\n        name: prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          prometheus:\n            promql: sum(http_request_duration_seconds_bucket{handler=\"/api/v1/slos\",le=\"2.5\"})\n        total:\n          prometheus:\n            promql: sum(http_request_duration_seconds_count{handler=\"/api/v1/slos\"})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Prometheus SLO\n    indicator:\n      metricSource:\n        name: prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          prometheus:\n            promql: sum(http_request_duration_seconds_bucket{handler=\"/api/v1/slos\",le=\"2.5\"})\n        total:\n          prometheus:\n            promql: sum(http_request_duration_seconds_count{handler=\"/api/v1/slos\"})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Prometheus SLO\n    indicator:\n      metricSource:\n        name: prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          prometheus:\n            promql: sum(http_request_duration_seconds_bucket{handler=\"/api/v1/slos\",le=\"2.5\"})\n        total:\n          prometheus:\n            promql: sum(http_request_duration_seconds_count{handler=\"/api/v1/slos\"})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Prometheus SLO\n    indicator:\n      metricSource:\n        name: prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          prometheus:\n            promql: sum(http_request_duration_seconds_bucket{handler=\"/api/v1/slos\",le=\"2.5\"})\n        total:\n          prometheus:\n            promql: sum(http_request_duration_seconds_count{handler=\"/api/v1/slos\"})\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Prometheus SLO\n    indicator:\n      metricSource:\n        name: prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          prometheus:\n            promql: api_server_requestMsec{host=\"*\",job=\"nginx\"}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Prometheus SLO\n    indicator:\n      metricSource:\n        name: prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          prometheus:\n            promql: api_server_requestMsec{host=\"*\",job=\"nginx\"}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Prometheus SLO\n    indicator:\n      metricSource:\n        name: prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          prometheus:\n            promql: api_server_requestMsec{host=\"*\",job=\"nginx\"}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Prometheus SLO\n    indicator:\n      metricSource:\n        name: prometheus\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          prometheus:\n            promql: api_server_requestMsec{host=\"*\",job=\"nginx\"}\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Redshift SLO\n    indicator:\n      metricSource:\n        name: redshift\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          redshift:\n            region: eu-central-1\n            clusterId: prod-cluster\n            databaseName: db\n            query: SELECT value as n9value, timestamp as n9date FROM http_status_codes WHERE value = '200' AND timestamp BETWEEN :n9date_from AND :n9date_to\n        total:\n          redshift:\n            region: eu-central-1\n            clusterId: prod-cluster\n            databaseName: db\n            query: SELECT value as n9value, timestamp as n9date FROM http_status_codes WHERE timestamp BETWEEN :n9date_from AND :n9date_to\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Redshift SLO\n    indicator:\n      metricSource:\n        name: redshift\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          redshift:\n            region: eu-central-1\n            clusterId: prod-cluster\n            databaseName: db\n            query: SELECT value as n9value, timestamp as n9date FROM http_status_codes WHERE value = '200' AND timestamp BETWEEN :n9date_from AND :n9date_to\n        total:\n          redshift:\n            region: eu-central-1\n            clusterId: prod-cluster\n            databaseName: db\n            query: SELECT value as n9value, timestamp as n9date FROM http_status_codes WHERE timestamp BETWEEN :n9date_from AND :n9date_to\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Redshift SLO\n    indicator:\n      metricSource:\n        name: redshift\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          redshift:\n            region: eu-central-1\n            clusterId: prod-cluster\n            databaseName: db\n            query: SELECT value as n9value, timestamp as n9date FROM http_status_codes WHERE value = '200' AND timestamp BETWEEN :n9date_from AND :n9date_to\n        total:\n          redshift:\n            region: eu-central-1\n            clusterId: prod-cluster\n            databaseName: db\n            query: SELECT value as n9value, timestamp as n9date FROM http_status_codes WHERE timestamp BETWEEN :n9date_from AND :n9date_to\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Redshift SLO\n    indicator:\n      metricSource:\n        name: redshift\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          redshift:\n            region: eu-central-1\n            clusterId: prod-cluster\n            databaseName: db\n            query: SELECT value as n9value, timestamp as n9date FROM http_status_codes WHERE value = '200' AND timestamp BETWEEN :n9date_from AND :n9date_to\n        total:\n          redshift:\n            region: eu-central-1\n            clusterId: prod-cluster\n            databaseName: db\n            query: SELECT value as n9value, timestamp as n9date FROM http_status_codes WHERE timestamp BETWEEN :n9date_from AND :n9date_to\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Redshift SLO\n    indicator:\n      metricSource:\n        name: redshift\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          redshift:\n            region: eu-central-1\n            clusterId: prod-cluster\n            databaseName: db\n            query: SELECT value as n9value, timestamp as n9date FROM sinusoid WHERE timestamp BETWEEN :n9date_from AND :n9date_to\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Redshift SLO\n    indicator:\n      metricSource:\n        name: redshift\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          redshift:\n            region: eu-central-1\n            clusterId: prod-cluster\n            databaseName: db\n            query: SELECT value as n9value, timestamp as n9date FROM sinusoid WHERE timestamp BETWEEN :n9date_from AND :n9date_to\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Redshift SLO\n    indicator:\n      metricSource:\n        name: redshift\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          redshift:\n            region: eu-central-1\n            clusterId: prod-cluster\n            databaseName: db\n            query: SELECT value as n9value, timestamp as n9date FROM sinusoid WHERE timestamp BETWEEN :n9date_from AND :n9date_to\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Redshift SLO\n    indicator:\n      metricSource:\n        name: redshift\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          redshift:\n            region: eu-central-1\n            clusterId: prod-cluster\n            databaseName: db\n            query: SELECT value as n9value, timestamp as n9date FROM sinusoid WHERE timestamp BETWEEN :n9date_from AND :n9date_to\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk Observability SLO\n    indicator:\n      metricSource:\n        name: splunk-observability\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          splunkObservability:\n            program: data('demo.trans.count', filter=filter('api_server'), rollup='rate').stddev().publish()\n        total:\n          splunkObservability:\n            program: data('demo.trans.count', filter=filter('api_server'), rollup='rate').mean().publish()\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk Observability SLO\n    indicator:\n      metricSource:\n        name: splunk-observability\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          splunkObservability:\n            program: data('demo.trans.count', filter=filter('api_server'), rollup='rate').stddev().publish()\n        total:\n          splunkObservability:\n            program: data('demo.trans.count', filter=filter('api_server'), rollup='rate').mean().publish()\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk Observability SLO\n    indicator:\n      metricSource:\n        name: splunk-observability\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          splunkObservability:\n            program: data('demo.trans.count', filter=filter('api_server'), rollup='rate').stddev().publish()\n        total:\n          splunkObservability:\n            program: data('demo.trans.count', filter=filter('api_server'), rollup='rate').mean().publish()\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk Observability SLO\n    indicator:\n      metricSource:\n        name: splunk-observability\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          splunkObservability:\n            program: data('demo.trans.count', filter=filter('api_server'), rollup='rate').stddev().publish()\n        total:\n          splunkObservability:\n            program: data('demo.trans.count', filter=filter('api_server'), rollup='rate').mean().publish()\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk Observability SLO\n    indicator:\n      metricSource:\n        name: splunk-observability\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          splunkObservability:\n            program: data('demo.trans.count', filter=filter('api_server'), rollup='rate').mean().publish()\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk Observability SLO\n    indicator:\n      metricSource:\n        name: splunk-observability\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          splunkObservability:\n            program: data('demo.trans.count', filter=filter('api_server'), rollup='rate').mean().publish()\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk Observability SLO\n    indicator:\n      metricSource:\n        name: splunk-observability\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          splunkObservability:\n            program: data('demo.trans.count', filter=filter('api_server'), rollup='rate').mean().publish()\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk Observability SLO\n    indicator:\n      metricSource:\n        name: splunk-observability\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          splunkObservability:\n            program: data('demo.trans.count', filter=filter('api_server'), rollup='rate').mean().publish()\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk SLO\n    indicator:\n      metricSource:\n        name: splunk\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          splunk:\n            query: index=* source=udp:5072 sourcetype=syslog status\u003c400 | bucket _time span=1m | stats count as n9value by _time | rename _time as n9time | fields n9time n9value\n        total:\n          splunk:\n            query: index=* source=udp:5072 sourcetype=syslog | bucket _time span=1m | stats count as n9value by _time | rename _time as n9time | fields n9time n9value\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk SLO\n    indicator:\n      metricSource:\n        name: splunk\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          splunk:\n            query: index=* source=udp:5072 sourcetype=syslog status\u003c400 | bucket _time span=1m | stats count as n9value by _time | rename _time as n9time | fields n9time n9value\n        total:\n          splunk:\n            query: index=* source=udp:5072 sourcetype=syslog | bucket _time span=1m | stats count as n9value by _time | rename _time as n9time | fields n9time n9value\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk SLO\n    indicator:\n      metricSource:\n        name: splunk\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          splunk:\n            query: index=* source=udp:5072 sourcetype=syslog status\u003c400 | bucket _time span=1m | stats count as n9value by _time | rename _time as n9time | fields n9time n9value\n        total:\n          splunk:\n            query: index=* source=udp:5072 sourcetype=syslog | bucket _time span=1m | stats count as n9value by _time | rename _time as n9time | fields n9time n9value\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk SLO\n    indicator:\n      metricSource:\n        name: splunk\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          splunk:\n            query: index=* source=udp:5072 sourcetype=syslog status\u003c400 | bucket _time span=1m | stats count as n9value by _time | rename _time as n9time | fields n9time n9value\n        total:\n          splunk:\n            query: index=* source=udp:5072 sourcetype=syslog | bucket _time span=1m | stats count as n9value by _time | rename _time as n9time | fields n9time n9value\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: single query good over total\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk SLO\n    indicator:\n      metricSource:\n        name: splunk\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        goodTotal:\n          splunk:\n            query: |-\n              | mstats avg(\"spl.intr.resource_usage.IOWait.data.avg_cpu_pct\") as n9good WHERE index=\"_metrics\" span=15s\n              | join type=left _time [\n              | mstats avg(\"spl.intr.resource_usage.IOWait.data.max_cpus_pct\") as n9total WHERE index=\"_metrics\" span=15s\n              ]\n              | rename _time as n9time\n              | fields n9time n9good n9total\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: single query good over total\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk SLO\n    indicator:\n      metricSource:\n        name: splunk\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        goodTotal:\n          splunk:\n            query: |-\n              | mstats avg(\"spl.intr.resource_usage.IOWait.data.avg_cpu_pct\") as n9good WHERE index=\"_metrics\" span=15s\n              | join type=left _time [\n              | mstats avg(\"spl.intr.resource_usage.IOWait.data.max_cpus_pct\") as n9total WHERE index=\"_metrics\" span=15s\n              ]\n              | rename _time as n9time\n              | fields n9time n9good n9total\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: single query good over total\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk SLO\n    indicator:\n      metricSource:\n        name: splunk\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        goodTotal:\n          splunk:\n            query: |-\n              | mstats avg(\"spl.intr.resource_usage.IOWait.data.avg_cpu_pct\") as n9good WHERE index=\"_metrics\" span=15s\n              | join type=left _time [\n              | mstats avg(\"spl.intr.resource_usage.IOWait.data.max_cpus_pct\") as n9total WHERE index=\"_metrics\" span=15s\n              ]\n              | rename _time as n9time\n              | fields n9time n9good n9total\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: single query good over total\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk SLO\n    indicator:\n      metricSource:\n        name: splunk\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        goodTotal:\n          splunk:\n            query: |-\n              | mstats avg(\"spl.intr.resource_usage.IOWait.data.avg_cpu_pct\") as n9good WHERE index=\"_metrics\" span=15s\n              | join type=left _time [\n              | mstats avg(\"spl.intr.resource_usage.IOWait.data.max_cpus_pct\") as n9total WHERE index=\"_metrics\" span=15s\n              ]\n              | rename _time as n9time\n              | fields n9time n9good n9total\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk SLO\n    indicator:\n      metricSource:\n        name: splunk\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          splunk:\n            query: index=* source=udp:5072 sourcetype=syslog status\u003c400 | bucket _time span=1m | stats avg(response_time) as n9value by _time | rename _time as n9time | fields n9time n9value\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk SLO\n    indicator:\n      metricSource:\n        name: splunk\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          splunk:\n            query: index=* source=udp:5072 sourcetype=syslog status\u003c400 | bucket _time span=1m | stats avg(response_time) as n9value by _time | rename _time as n9time | fields n9time n9value\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk SLO\n    indicator:\n      metricSource:\n        name: splunk\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          splunk:\n            query: index=* source=udp:5072 sourcetype=syslog status\u003c400 | bucket _time span=1m | stats avg(response_time) as n9value by _time | rename _time as n9time | fields n9time n9value\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Splunk SLO\n    indicator:\n      metricSource:\n        name: splunk\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          splunk:\n            query: index=* source=udp:5072 sourcetype=syslog status\u003c400 | bucket _time span=1m | stats avg(response_time) as n9value by _time | rename _time as n9time | fields n9time n9value\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: good over total\n# Metric variant: logs\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          sumoLogic:\n            type: logs\n            query: |-\n              _collector=\"app-cluster\" _source=\"logs\"\n              | json \"log\"\n              | timeslice 15s as n9_time\n              | parse \"level=* *\" as (log_level, tail)\n              | if (log_level matches \"error\" ,0,1) as log_level_not_error\n              | sum(log_level_not_error) as n9_value by n9_time\n              | sort by n9_time asc\n        total:\n          sumoLogic:\n            type: logs\n            query: |-\n              _collector=\"app-cluster\" _source=\"logs\"\n              | json \"log\"\n              | timeslice 15s as n9_time\n              | parse \"level=* *\" as (log_level, tail)\n              | count(*) as n9_value by n9_time\n              | sort by n9_time asc\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: logs\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          sumoLogic:\n            type: logs\n            query: |-\n              _collector=\"app-cluster\" _source=\"logs\"\n              | json \"log\"\n              | timeslice 15s as n9_time\n              | parse \"level=* *\" as (log_level, tail)\n              | if (log_level matches \"error\" ,0,1) as log_level_not_error\n              | sum(log_level_not_error) as n9_value by n9_time\n              | sort by n9_time asc\n        total:\n          sumoLogic:\n            type: logs\n            query: |-\n              _collector=\"app-cluster\" _source=\"logs\"\n              | json \"log\"\n              | timeslice 15s as n9_time\n              | parse \"level=* *\" as (log_level, tail)\n              | count(*) as n9_value by n9_time\n              | sort by n9_time asc\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: logs\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          sumoLogic:\n            type: logs\n            query: |-\n              _collector=\"app-cluster\" _source=\"logs\"\n              | json \"log\"\n              | timeslice 15s as n9_time\n              | parse \"level=* *\" as (log_level, tail)\n              | if (log_level matches \"error\" ,0,1) as log_level_not_error\n              | sum(log_level_not_error) as n9_value by n9_time\n              | sort by n9_time asc\n        total:\n          sumoLogic:\n            type: logs\n            query: |-\n              _collector=\"app-cluster\" _source=\"logs\"\n              | json \"log\"\n              | timeslice 15s as n9_time\n              | parse \"level=* *\" as (log_level, tail)\n              | count(*) as n9_value by n9_time\n              | sort by n9_time asc\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: logs\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          sumoLogic:\n            type: logs\n            query: |-\n              _collector=\"app-cluster\" _source=\"logs\"\n              | json \"log\"\n              | timeslice 15s as n9_time\n              | parse \"level=* *\" as (log_level, tail)\n              | if (log_level matches \"error\" ,0,1) as log_level_not_error\n              | sum(log_level_not_error) as n9_value by n9_time\n              | sort by n9_time asc\n        total:\n          sumoLogic:\n            type: logs\n            query: |-\n              _collector=\"app-cluster\" _source=\"logs\"\n              | json \"log\"\n              | timeslice 15s as n9_time\n              | parse \"level=* *\" as (log_level, tail)\n              | count(*) as n9_value by n9_time\n              | sort by n9_time asc\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          sumoLogic:\n            type: metrics\n            query: metric=Mem_Used\n            quantization: 15s\n            rollup: Avg\n        total:\n          sumoLogic:\n            type: metrics\n            query: metric=Mem_Total\n            quantization: 15s\n            rollup: Avg\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      countMetrics:\n        incremental: true\n        good:\n          sumoLogic:\n            type: metrics\n            query: metric=Mem_Used\n            quantization: 15s\n            rollup: Avg\n        total:\n          sumoLogic:\n            type: metrics\n            query: metric=Mem_Total\n            quantization: 15s\n            rollup: Avg\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          sumoLogic:\n            type: metrics\n            query: metric=Mem_Used\n            quantization: 15s\n            rollup: Avg\n        total:\n          sumoLogic:\n            type: metrics\n            query: metric=Mem_Total\n            quantization: 15s\n            rollup: Avg\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: good over total\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 1.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      countMetrics:\n        incremental: true\n        good:\n          sumoLogic:\n            type: metrics\n            query: metric=Mem_Used\n            quantization: 15s\n            rollup: Avg\n        total:\n          sumoLogic:\n            type: metrics\n            query: metric=Mem_Total\n            quantization: 15s\n            rollup: Avg\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: logs\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          sumoLogic:\n            type: logs\n            query: |-\n              _sourceCategory=uploads/nginx\n              | timeslice 1m as n9_time\n              | parse \"HTTP/1.1\" * * \" as (status_code, size, tail)\n              | if (status_code matches \"20\" or status_code matches \"30*\",1,0) as resp_ok\n              | sum(resp_ok) as n9_value by n9_time\n              | sort by n9_time asc\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: logs\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          sumoLogic:\n            type: logs\n            query: |-\n              _sourceCategory=uploads/nginx\n              | timeslice 1m as n9_time\n              | parse \"HTTP/1.1\" * * \" as (status_code, size, tail)\n              | if (status_code matches \"20\" or status_code matches \"30*\",1,0) as resp_ok\n              | sum(resp_ok) as n9_value by n9_time\n              | sort by n9_time asc\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: logs\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          sumoLogic:\n            type: logs\n            query: |-\n              _sourceCategory=uploads/nginx\n              | timeslice 1m as n9_time\n              | parse \"HTTP/1.1\" * * \" as (status_code, size, tail)\n              | if (status_code matches \"20\" or status_code matches \"30*\",1,0) as resp_ok\n              | sum(resp_ok) as n9_value by n9_time\n              | sort by n9_time asc\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: logs\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          sumoLogic:\n            type: logs\n            query: |-\n              _sourceCategory=uploads/nginx\n              | timeslice 1m as n9_time\n              | parse \"HTTP/1.1\" * * \" as (status_code, size, tail)\n              | if (status_code matches \"20\" or status_code matches \"30*\",1,0) as resp_ok\n              | sum(resp_ok) as n9_value by n9_time\n              | sort by n9_time asc\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          sumoLogic:\n            type: metrics\n            query: metric=CPU_Usage\n            quantization: 15s\n            rollup: Avg\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: metrics\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          sumoLogic:\n            type: metrics\n            query: metric=CPU_Usage\n            quantization: 15s\n            rollup: Avg\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          sumoLogic:\n            type: metrics\n            query: metric=CPU_Usage\n            quantization: 15s\n            rollup: Avg\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: metrics\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example Sumo Logic SLO\n    indicator:\n      metricSource:\n        name: sumo-logic\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          sumoLogic:\n            type: metrics\n            query: metric=CPU_Usage\n            quantization: 15s\n            rollup: Avg\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n","# Metric type: threshold\n# Metric variant: API transaction time\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: api-transaction-time\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: API transaction time\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: api-transaction-time\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: API transaction time\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: api-transaction-time\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: API transaction time\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: api-transaction-time\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: DOM load\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: web-dom-load\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: DOM load\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: web-dom-load\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: DOM load\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: web-dom-load\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: DOM load\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: web-dom-load\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: net latency\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: net-latency\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: net latency\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: net-latency\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: net latency\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: net-latency\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: net latency\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: net-latency\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: net loss\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: net-loss\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: net loss\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: net-loss\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: net loss\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: net-loss\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: net loss\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: net-loss\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: response time\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: http-response-time\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: response time\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: http-response-time\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: response time\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: http-response-time\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: response time\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: http-response-time\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: server availability\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: http-server-availability\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: server availability\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: http-server-availability\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: server availability\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: http-server-availability\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: server availability\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: http-server-availability\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: server throughput\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: http-server-throughput\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: server throughput\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: http-server-throughput\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: server throughput\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: http-server-throughput\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: server throughput\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: http-server-throughput\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: transaction time\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: web-transaction-time\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: transaction time\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: web-transaction-time\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: transaction time\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: web-transaction-time\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: transaction time\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: web-transaction-time\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: web page load\n# Budgeting method: Occurrences\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: web-page-load\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: web page load\n# Budgeting method: Occurrences\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Occurrences\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: web-page-load\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: web page load\n# Budgeting method: Timeslices\n# Time window type: Calendar\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: web-page-load\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Month\n      count: 1\n      isRolling: false\n      calendar:\n        startTime: \"2022-12-01 00:00:00\"\n        timeZone: UTC\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n# Metric type: threshold\n# Metric variant: web page load\n# Budgeting method: Timeslices\n# Time window type: Rolling\n- apiVersion: n9/v1alpha\n  kind: SLO\n  metadata:\n    name: api-server-slo\n    displayName: API Server SLO\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: Example ThousandEyes SLO\n    indicator:\n      metricSource:\n        name: thousand-eyes\n        project: default\n        kind: Agent\n    budgetingMethod: Timeslices\n    objectives:\n    - displayName: Good response (200)\n      value: 200.0\n      name: ok\n      target: 0.95\n      timeSliceTarget: 0.9\n      rawMetric:\n        query:\n          thousandEyes:\n            testID: 2280492\n            testType: web-page-load\n      op: lte\n      primary: true\n    service: api-server\n    timeWindows:\n    - unit: Hour\n      count: 1\n      isRolling: true\n    alertPolicies:\n    - fast-burn-5x-for-last-10m\n    attachments:\n    - url: https://docs.nobl9.com\n      displayName: Nobl9 Documentation\n    anomalyConfig:\n      noData:\n        alertMethods:\n        - name: slack-notification\n          project: default\n"]},{"Kind":"Direct","Version":"n9/v1alpha","Properties":[{"path":"$","type":"Direct","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"Direct struct which mapped one to one with kind: Direct yaml definition","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.status","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["Direct"],"rules":[{"description":"should be equal to 'Direct'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"","childrenPaths":["$.metadata.name","$.metadata.displayName","$.metadata.project"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.displayName","type":"string","Doc":"","isOptional":true,"rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.metadata.project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"Spec represents content of Spec typical for Direct Object","rules":[{"description":"","errorCode":"exactly_one_data_source_type"},{"description":""},{"description":"","errorCode":"query_delay_out_of_bounds"},{"description":"","errorCode":"unsupported_release_channel"}],"childrenPaths":["$.spec.description","$.spec.releaseChannel","$.spec.logCollectionEnabled","$.spec.datadog","$.spec.newRelic","$.spec.appDynamics","$.spec.splunkObservability","$.spec.thousandEyes","$.spec.bigQuery","$.spec.splunk","$.spec.cloudWatch","$.spec.pingdom","$.spec.redshift","$.spec.sumoLogic","$.spec.instana","$.spec.influxdb","$.spec.gcm","$.spec.lightstep","$.spec.dynatrace","$.spec.azureMonitor","$.spec.honeycomb","$.spec.logicMonitor","$.spec.azurePrometheus","$.spec.historicalDataRetrieval","$.spec.queryDelay","$.spec.interval","$.spec.timeout","$.spec.jitter"]},{"path":"$.spec.description","type":"string","Doc":"","rules":[{"description":"length must be between 0 and 1050","errorCode":"string_description"}]},{"path":"$.spec.releaseChannel","type":"int","Doc":"ReleaseChannel /*","isOptional":true,"values":["stable","beta","alpha"],"rules":[{"description":"must be one of: stable, beta, alpha","errorCode":"one_of"}]},{"path":"$.spec.logCollectionEnabled","type":"bool","Doc":""},{"path":"$.spec.datadog","type":"DatadogConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"DatadogConfig represents content of Datadog Configuration typical for Direct Object.","childrenPaths":["$.spec.datadog.site","$.spec.datadog.apiKey","$.spec.datadog.applicationKey"]},{"path":"$.spec.datadog.site","type":"string","Doc":"","values":["eu","com","datadoghq.com","us3.datadoghq.com","us5.datadoghq.com","datadoghq.eu","ddog-gov.com","ap1.datadoghq.com"],"rules":[{"description":"must be one of: eu, com, datadoghq.com, us3.datadoghq.com, us5.datadoghq.com, datadoghq.eu, ddog-gov.com, ap1.datadoghq.com","errorCode":"one_of"}]},{"path":"$.spec.datadog.apiKey","type":"string","Doc":""},{"path":"$.spec.datadog.applicationKey","type":"string","Doc":""},{"path":"$.spec.newRelic","type":"NewRelicConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"NewRelicConfig represents content of NewRelic Configuration typical for Direct Object.","childrenPaths":["$.spec.newRelic.accountId","$.spec.newRelic.insightsQueryKey"]},{"path":"$.spec.newRelic.accountId","type":"int","Doc":"","rules":[{"description":"should be greater than or equal to '1'","errorCode":"greater_than_or_equal_to"}]},{"path":"$.spec.newRelic.insightsQueryKey","type":"string","Doc":"","isSecret":true,"rules":[{"description":"string must start with 'NRIQ-' prefix","errorCode":"string_starts_with","conditions":["is empty or equal to '[hidden]'"]}]},{"path":"$.spec.appDynamics","type":"AppDynamicsConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"AppDynamicsConfig represents content of AppDynamics Configuration typical for Direct Object.","childrenPaths":["$.spec.appDynamics.url","$.spec.appDynamics.clientID","$.spec.appDynamics.clientName","$.spec.appDynamics.accountName","$.spec.appDynamics.clientSecret"]},{"path":"$.spec.appDynamics.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"url"},{"description":"","errorCode":"https_scheme_required"}]},{"path":"$.spec.appDynamics.clientID","type":"string","Doc":""},{"path":"$.spec.appDynamics.clientName","type":"string","Doc":""},{"path":"$.spec.appDynamics.accountName","type":"string","Doc":""},{"path":"$.spec.appDynamics.clientSecret","type":"string","Doc":""},{"path":"$.spec.splunkObservability","type":"SplunkObservabilityConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"SplunkObservabilityConfig represents content of SplunkObservability Configuration typical for Direct Object.","childrenPaths":["$.spec.splunkObservability.realm","$.spec.splunkObservability.accessToken"]},{"path":"$.spec.splunkObservability.realm","type":"string","Doc":""},{"path":"$.spec.splunkObservability.accessToken","type":"string","Doc":""},{"path":"$.spec.thousandEyes","type":"ThousandEyesConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"ThousandEyesConfig represents content of ThousandEyes Configuration typical for Direct Object.","childrenPaths":["$.spec.thousandEyes.oauthBearerToken"]},{"path":"$.spec.thousandEyes.oauthBearerToken","type":"string","Doc":""},{"path":"$.spec.bigQuery","type":"BigQueryConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"BigQueryConfig represents content of BigQuery configuration typical for Direct Object.","childrenPaths":["$.spec.bigQuery.serviceAccountKey"]},{"path":"$.spec.bigQuery.serviceAccountKey","type":"string","Doc":"","isSecret":true,"rules":[{"description":"string must be a valid JSON","errorCode":"string_json","conditions":["is empty or equal to '[hidden]'"]}]},{"path":"$.spec.splunk","type":"SplunkConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"SplunkConfig represents content of Splunk Configuration typical for Direct Object.","childrenPaths":["$.spec.splunk.url","$.spec.splunk.accessToken"]},{"path":"$.spec.splunk.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"url"},{"description":"","errorCode":"https_scheme_required"}]},{"path":"$.spec.splunk.accessToken","type":"string","Doc":""},{"path":"$.spec.cloudWatch","type":"CloudWatchConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"CloudWatchConfig represents content of CloudWatch Configuration typical for Direct Object.","childrenPaths":["$.spec.cloudWatch.accessKeyID","$.spec.cloudWatch.secretAccessKey","$.spec.cloudWatch.roleARN"]},{"path":"$.spec.cloudWatch.accessKeyID","type":"string","Doc":"Deprecated: Access Keys are no longer supported. Switch to Cross Account IAM Roles.","isDeprecated":true},{"path":"$.spec.cloudWatch.secretAccessKey","type":"string","Doc":"Deprecated: Access Keys are no longer supported. Switch to Cross Account IAM Roles.","isDeprecated":true},{"path":"$.spec.cloudWatch.roleARN","type":"string","Doc":""},{"path":"$.spec.pingdom","type":"PingdomConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"PingdomConfig represents content of Pingdom Configuration typical for Direct Object.","childrenPaths":["$.spec.pingdom.apiToken"]},{"path":"$.spec.pingdom.apiToken","type":"string","Doc":""},{"path":"$.spec.redshift","type":"RedshiftConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"RedshiftConfig represents content of Redshift configuration typical for Direct Object.","childrenPaths":["$.spec.redshift.accessKeyID","$.spec.redshift.secretAccessKey","$.spec.redshift.secretARN","$.spec.redshift.roleARN"]},{"path":"$.spec.redshift.accessKeyID","type":"string","Doc":"Deprecated: Access Keys are no longer supported. Switch to Cross Account IAM Roles.","isDeprecated":true},{"path":"$.spec.redshift.secretAccessKey","type":"string","Doc":"Deprecated: Access Keys are no longer supported. Switch to Cross Account IAM Roles.","isDeprecated":true},{"path":"$.spec.redshift.secretARN","type":"string","Doc":""},{"path":"$.spec.redshift.roleARN","type":"string","Doc":""},{"path":"$.spec.sumoLogic","type":"SumoLogicConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"SumoLogicConfig represents content of SumoLogic configuration typical for Direct Object.","childrenPaths":["$.spec.sumoLogic.accessID","$.spec.sumoLogic.accessKey","$.spec.sumoLogic.url"]},{"path":"$.spec.sumoLogic.accessID","type":"string","Doc":""},{"path":"$.spec.sumoLogic.accessKey","type":"string","Doc":""},{"path":"$.spec.sumoLogic.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"url"},{"description":"","errorCode":"https_scheme_required"}]},{"path":"$.spec.instana","type":"InstanaConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"InstanaConfig represents content of Instana configuration typical for Direct Object.","childrenPaths":["$.spec.instana.apiToken","$.spec.instana.url"]},{"path":"$.spec.instana.apiToken","type":"string","Doc":""},{"path":"$.spec.instana.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"url"},{"description":"","errorCode":"https_scheme_required"}]},{"path":"$.spec.influxdb","type":"InfluxDBConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"InfluxDBConfig represents content of InfluxDB configuration typical for Direct Object.","childrenPaths":["$.spec.influxdb.url","$.spec.influxdb.apiToken","$.spec.influxdb.organizationID"]},{"path":"$.spec.influxdb.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"url"},{"description":"","errorCode":"https_scheme_required"}]},{"path":"$.spec.influxdb.apiToken","type":"string","Doc":""},{"path":"$.spec.influxdb.organizationID","type":"string","Doc":""},{"path":"$.spec.gcm","type":"GCMConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"GCMConfig represents content of GCM configuration typical for Direct Object.","childrenPaths":["$.spec.gcm.serviceAccountKey"]},{"path":"$.spec.gcm.serviceAccountKey","type":"string","Doc":"","isSecret":true,"rules":[{"description":"string must be a valid JSON","errorCode":"string_json","conditions":["is empty or equal to '[hidden]'"]}]},{"path":"$.spec.lightstep","type":"LightstepConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"","childrenPaths":["$.spec.lightstep.organization","$.spec.lightstep.project","$.spec.lightstep.appToken","$.spec.lightstep.url"]},{"path":"$.spec.lightstep.organization","type":"string","Doc":""},{"path":"$.spec.lightstep.project","type":"string","Doc":""},{"path":"$.spec.lightstep.appToken","type":"string","Doc":""},{"path":"$.spec.lightstep.url","type":"string","Doc":"","isOptional":true,"rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"url"}]},{"path":"$.spec.dynatrace","type":"DynatraceConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"DynatraceConfig represents content of Dynatrace configuration typical for Direct Object.","childrenPaths":["$.spec.dynatrace.url","$.spec.dynatrace.dynatraceToken"]},{"path":"$.spec.dynatrace.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"url"},{"description":"","errorCode":"https_scheme_required"}]},{"path":"$.spec.dynatrace.dynatraceToken","type":"string","Doc":""},{"path":"$.spec.azureMonitor","type":"AzureMonitorConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"AzureMonitorConfig represents content of AzureMonitor Configuration typical for Direct Object.","childrenPaths":["$.spec.azureMonitor.tenantId","$.spec.azureMonitor.clientId","$.spec.azureMonitor.clientSecret"]},{"path":"$.spec.azureMonitor.tenantId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.azureMonitor.clientId","type":"string","Doc":""},{"path":"$.spec.azureMonitor.clientSecret","type":"string","Doc":""},{"path":"$.spec.honeycomb","type":"HoneycombConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"HoneycombConfig represents content of Honeycomb Configuration typical for Direct Object.","childrenPaths":["$.spec.honeycomb.apiKey"]},{"path":"$.spec.honeycomb.apiKey","type":"string","Doc":""},{"path":"$.spec.logicMonitor","type":"LogicMonitorConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"LogicMonitorConfig represents content of LogicMonitor Configuration typical for Direct Object.","childrenPaths":["$.spec.logicMonitor.account","$.spec.logicMonitor.accessId","$.spec.logicMonitor.accessKey"]},{"path":"$.spec.logicMonitor.account","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty"}]},{"path":"$.spec.logicMonitor.accessId","type":"string","Doc":""},{"path":"$.spec.logicMonitor.accessKey","type":"string","Doc":""},{"path":"$.spec.azurePrometheus","type":"AzurePrometheusConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"AzurePrometheusConfig represents content of Azure Monitor managed service for Prometheus typical for Direct Object.","childrenPaths":["$.spec.azurePrometheus.url","$.spec.azurePrometheus.tenantId","$.spec.azurePrometheus.clientId","$.spec.azurePrometheus.clientSecret"]},{"path":"$.spec.azurePrometheus.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"url"},{"description":"","errorCode":"https_scheme_required"}]},{"path":"$.spec.azurePrometheus.tenantId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.azurePrometheus.clientId","type":"string","Doc":""},{"path":"$.spec.azurePrometheus.clientSecret","type":"string","Doc":""},{"path":"$.spec.historicalDataRetrieval","type":"HistoricalDataRetrieval","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"HistoricalDataRetrieval represents optional parameters for agent to regard when configuring\nTimeMachine-related SLO properties","childrenPaths":["$.spec.historicalDataRetrieval.minimumAgentVersion","$.spec.historicalDataRetrieval.maxDuration","$.spec.historicalDataRetrieval.defaultDuration"]},{"path":"$.spec.historicalDataRetrieval.minimumAgentVersion","type":"string","Doc":""},{"path":"$.spec.historicalDataRetrieval.maxDuration","type":"HistoricalRetrievalDuration","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"HistoricalRetrievalDuration struct was previously called Duration. However, this name was too generic\nsince we also needed to introduce a Duration struct for QueryDelay, which allowed for different time units.\nTime travel is allowed for days/hours/minutes, and query delay can be set to minutes/seconds. Separating those two\nstructs allows for easier validation logic and avoidance of possible mismatches. Also, later on the database level\nwe have time travel duration unit related enum, that's specifically named for data retrieval purposes. Thus,\nit was easier to split those Durations into separate structures.","childrenPaths":["$.spec.historicalDataRetrieval.maxDuration.value","$.spec.historicalDataRetrieval.maxDuration.unit"]},{"path":"$.spec.historicalDataRetrieval.maxDuration.value","type":"int","Doc":"","rules":[{"description":"should be greater than or equal to '0'","errorCode":"greater_than_or_equal_to"},{"description":"should be less than or equal to '43200'","errorCode":"less_than_or_equal_to"}]},{"path":"$.spec.historicalDataRetrieval.maxDuration.unit","type":"string","Doc":"","values":["Day","Hour","Minute"],"rules":[{"description":"must be one of: Day, Hour, Minute","errorCode":"one_of"}]},{"path":"$.spec.historicalDataRetrieval.defaultDuration","type":"HistoricalRetrievalDuration","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"HistoricalRetrievalDuration struct was previously called Duration. However, this name was too generic\nsince we also needed to introduce a Duration struct for QueryDelay, which allowed for different time units.\nTime travel is allowed for days/hours/minutes, and query delay can be set to minutes/seconds. Separating those two\nstructs allows for easier validation logic and avoidance of possible mismatches. Also, later on the database level\nwe have time travel duration unit related enum, that's specifically named for data retrieval purposes. Thus,\nit was easier to split those Durations into separate structures.","childrenPaths":["$.spec.historicalDataRetrieval.defaultDuration.value","$.spec.historicalDataRetrieval.defaultDuration.unit"]},{"path":"$.spec.historicalDataRetrieval.defaultDuration.value","type":"int","Doc":"","rules":[{"description":"should be greater than or equal to '0'","errorCode":"greater_than_or_equal_to"},{"description":"should be less than or equal to '43200'","errorCode":"less_than_or_equal_to"}]},{"path":"$.spec.historicalDataRetrieval.defaultDuration.unit","type":"string","Doc":"","values":["Day","Hour","Minute"],"rules":[{"description":"must be one of: Day, Hour, Minute","errorCode":"one_of"}]},{"path":"$.spec.queryDelay","type":"QueryDelay","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"","childrenPaths":["$.spec.queryDelay.minimumAgentVersion","$.spec.queryDelay.value","$.spec.queryDelay.unit"]},{"path":"$.spec.queryDelay.minimumAgentVersion","type":"string","Doc":""},{"path":"$.spec.queryDelay.value","type":"int","Doc":""},{"path":"$.spec.queryDelay.unit","type":"string","Doc":"","values":["Minute","Second"],"rules":[{"description":"must be one of: Minute, Second","errorCode":"one_of"}]},{"path":"$.spec.interval","type":"Interval","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"Interval, Timeout and Jitter are readonly and cannot be set via API","childrenPaths":["$.spec.interval.value","$.spec.interval.unit"]},{"path":"$.spec.interval.value","type":"int","Doc":""},{"path":"$.spec.interval.unit","type":"string","Doc":""},{"path":"$.spec.timeout","type":"Timeout","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"","childrenPaths":["$.spec.timeout.value","$.spec.timeout.unit"]},{"path":"$.spec.timeout.value","type":"int","Doc":""},{"path":"$.spec.timeout.unit","type":"string","Doc":""},{"path":"$.spec.jitter","type":"Jitter","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"","childrenPaths":["$.spec.jitter.value","$.spec.jitter.unit"]},{"path":"$.spec.jitter.value","type":"int","Doc":""},{"path":"$.spec.jitter.unit","type":"string","Doc":""},{"path":"$.status","type":"Status","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/direct","Doc":"Status represents content of Status optional for Direct Object","childrenPaths":["$.status.directType"]},{"path":"$.status.directType","type":"string","Doc":""},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: app-dynamics\n  displayName: AppDynamics Direct\n  project: default\nspec:\n  description: Example AppDynamics Direct\n  releaseChannel: stable\n  appDynamics:\n    url: https://my-org.saas.appdynamics.com\n    clientID: \"\"\n    clientName: prod-direct\n    accountName: my-account\n    clientSecret: \"[secret]\"\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: azure-monitor\n  displayName: Azure Monitor Direct\n  project: default\nspec:\n  description: Example Azure Monitor Direct\n  releaseChannel: beta\n  azureMonitor:\n    tenantId: 5cdecca3-c2c5-4072-89dd-5555faf05202\n    clientId: 70747025-9367-41a5-98f1-59b18b5793c3\n    clientSecret: \"[secret]\"\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 6\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: azure-prometheus\n  displayName: Azure Prometheus Direct\n  project: default\nspec:\n  description: Example Azure Prometheus Direct\n  releaseChannel: beta\n  azurePrometheus:\n    url: https://prod-app.azuremonitor.com\n    tenantId: 5cdecca3-c2c5-4072-89dd-5555faf05202\n    clientId: 70747025-9367-41a5-98f1-59b18b5793c3\n    clientSecret: \"[secret]\"\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 1\n    unit: Second\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: big-query\n  displayName: BigQuery Direct\n  project: default\nspec:\n  description: Example BigQuery Direct\n  releaseChannel: stable\n  bigQuery:\n    serviceAccountKey: \"{\\n  \\\"type\\\": \\\"service_account\\\",\\n  \\\"project_id\\\": \\\"prod-app\\\",\\n  \\\"private_key_id\\\": \\\"669180ba44964eddba9e2f6623721381\\\",\\n  \\\"private_key\\\": \\\"-----BEGIN PRIVATE KEY-----\\\\nSECRET_KEY_GOES_HERE\\\\n-----END PRIVATE KEY-----\\\\n\\\",\\n  \\\"client_email\\\": \\\"nobl9@nobl9.iam.gserviceaccount.com\\\",\\n  \\\"client_id\\\": \\\"eddba9e2f66237213812\\\",\\n  \\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\n  \\\"token_uri\\\": \\\"https://oauth2.googleapis.com/token\\\",\\n  \\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\n  \\\"client_x509_cert_url\\\": \\\"https://www.googleapis.com/robot/v1/metadata/x509/nobl9%40nobl9.iam.gserviceaccount.com\\\"\\n}\"\n  queryDelay:\n    value: 1\n    unit: Second\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: cloud-watch\n  displayName: CloudWatch Direct\n  project: default\nspec:\n  description: Example CloudWatch Direct\n  releaseChannel: stable\n  cloudWatch:\n    roleARN: arn:aws:iam::123456578901:role/awsCrossAccountProdCloudwatch-prod-app\n  historicalDataRetrieval:\n    maxDuration:\n      value: 15\n      unit: Day\n    defaultDuration:\n      value: 7\n      unit: Day\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: datadog\n  displayName: Datadog Direct\n  project: default\nspec:\n  description: Example Datadog Direct\n  releaseChannel: stable\n  datadog:\n    site: com\n    apiKey: \"[secret]\"\n    applicationKey: \"[secret]\"\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: dynatrace\n  displayName: Dynatrace Direct\n  project: default\nspec:\n  description: Example Dynatrace Direct\n  releaseChannel: stable\n  dynatrace:\n    url: https://zvf10945.live.dynatrace.com/\n    dynatraceToken: \"[secret]\"\n  historicalDataRetrieval:\n    maxDuration:\n      value: 28\n      unit: Day\n    defaultDuration:\n      value: 14\n      unit: Day\n  queryDelay:\n    value: 3\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: google-cloud-monitoring\n  displayName: Google Cloud Monitoring Direct\n  project: default\nspec:\n  description: Example Google Cloud Monitoring Direct\n  releaseChannel: beta\n  gcm:\n    serviceAccountKey: \"{\\n  \\\"type\\\": \\\"service_account\\\",\\n  \\\"project_id\\\": \\\"prod-app\\\",\\n  \\\"private_key_id\\\": \\\"669180ba44964eddba9e2f6623721381\\\",\\n  \\\"private_key\\\": \\\"-----BEGIN PRIVATE KEY-----\\\\nSECRET_KEY_GOES_HERE\\\\n-----END PRIVATE KEY-----\\\\n\\\",\\n  \\\"client_email\\\": \\\"nobl9@nobl9.iam.gserviceaccount.com\\\",\\n  \\\"client_id\\\": \\\"eddba9e2f66237213812\\\",\\n  \\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\n  \\\"token_uri\\\": \\\"https://oauth2.googleapis.com/token\\\",\\n  \\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\n  \\\"client_x509_cert_url\\\": \\\"https://www.googleapis.com/robot/v1/metadata/x509/nobl9%40nobl9.iam.gserviceaccount.com\\\"\\n}\"\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 3\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: honeycomb\n  displayName: Honeycomb Direct\n  project: default\nspec:\n  description: Example Honeycomb Direct\n  releaseChannel: beta\n  honeycomb:\n    apiKey: \"[secret]\"\n  historicalDataRetrieval:\n    maxDuration:\n      value: 7\n      unit: Day\n    defaultDuration:\n      value: 3\n      unit: Day\n  queryDelay:\n    value: 6\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: influx-d-b\n  displayName: InfluxDB Direct\n  project: default\nspec:\n  description: Example InfluxDB Direct\n  releaseChannel: stable\n  influxdb:\n    url: https://us-west-2-2.aws.cloud2.influxdata.com\n    apiToken: \"[secret]\"\n    organizationID: my-org\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: instana\n  displayName: Instana Direct\n  project: default\nspec:\n  description: Example Instana Direct\n  releaseChannel: stable\n  instana:\n    apiToken: \"[secret]\"\n    url: https://orange-my-org12.instana.io\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: lightstep\n  displayName: Lightstep Direct\n  project: default\nspec:\n  description: Example Lightstep Direct\n  releaseChannel: stable\n  lightstep:\n    organization: MyOrg\n    project: prod-app\n    appToken: \"[secret]\"\n    url: https://api.lightstep.com\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 3\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: logic-monitor\n  displayName: LogicMonitor Direct\n  project: default\nspec:\n  description: Example LogicMonitor Direct\n  releaseChannel: beta\n  logicMonitor:\n    account: my-account-name\n    accessId: 9xA2BssShK21ld9LoOYu\n    accessKey: \"[secret]\"\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 3\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: new-relic\n  displayName: New Relic Direct\n  project: default\nspec:\n  description: Example New Relic Direct\n  releaseChannel: stable\n  newRelic:\n    accountId: 1234567\n    insightsQueryKey: NRIQ-2f66237213814496669180ba\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: pingdom\n  displayName: Pingdom Direct\n  project: default\nspec:\n  description: Example Pingdom Direct\n  releaseChannel: stable\n  pingdom:\n    apiToken: \"[secret]\"\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: redshift\n  displayName: Redshift Direct\n  project: default\nspec:\n  description: Example Redshift Direct\n  releaseChannel: stable\n  redshift:\n    secretARN: arn:aws:secretsmanager:eu-central-1:123456578901:secret:prod-redshift-db-user\n    roleARN: arn:aws:iam::123456578901:role/awsCrossAccountProdRedshift-prod-app\n  queryDelay:\n    value: 31\n    unit: Second\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: splunk-observability\n  displayName: Splunk Observability Direct\n  project: default\nspec:\n  description: Example Splunk Observability Direct\n  releaseChannel: alpha\n  splunkObservability:\n    realm: us1\n    accessToken: \"[secret]\"\n  queryDelay:\n    value: 6\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: splunk\n  displayName: Splunk Direct\n  project: default\nspec:\n  description: Example Splunk Direct\n  releaseChannel: stable\n  splunk:\n    url: https://splunk.my-org.com/services\n    accessToken: \"[secret]\"\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 6\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: sumo-logic\n  displayName: Sumo Logic Direct\n  project: default\nspec:\n  description: Example Sumo Logic Direct\n  releaseChannel: stable\n  sumoLogic:\n    accessID: wzeulXAULylic8\n    accessKey: \"[secret]\"\n    url: https://service.sumologic.com\n  queryDelay:\n    value: 5\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Direct\nmetadata:\n  name: thousand-eyes\n  displayName: ThousandEyes Direct\n  project: default\nspec:\n  description: Example ThousandEyes Direct\n  releaseChannel: stable\n  thousandEyes:\n    oauthBearerToken: \"[secret]\"\n  queryDelay:\n    value: 2\n    unit: Minute\n"]},{"Kind":"Agent","Version":"n9/v1alpha","Properties":[{"path":"$","type":"Agent","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"Agent struct which mapped one to one with kind: Agent yaml definition","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.status","$.organization","$.manifestSrc","$.oktaClientID"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["Agent"],"rules":[{"description":"should be equal to 'Agent'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"","childrenPaths":["$.metadata.name","$.metadata.displayName","$.metadata.project"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.displayName","type":"string","Doc":"","isOptional":true,"rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.metadata.project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"Spec represents content of Spec typical for Agent Object","rules":[{"description":"","errorCode":"exactly_one_data_source_type"},{"description":""},{"description":"","errorCode":"query_delay_out_of_bounds"}],"childrenPaths":["$.spec.description","$.spec.releaseChannel","$.spec.prometheus","$.spec.datadog","$.spec.newRelic","$.spec.appDynamics","$.spec.splunk","$.spec.lightstep","$.spec.splunkObservability","$.spec.dynatrace","$.spec.elasticsearch","$.spec.thousandEyes","$.spec.graphite","$.spec.bigQuery","$.spec.opentsdb","$.spec.grafanaLoki","$.spec.cloudWatch","$.spec.pingdom","$.spec.amazonPrometheus","$.spec.redshift","$.spec.sumoLogic","$.spec.instana","$.spec.influxdb","$.spec.azureMonitor","$.spec.gcm","$.spec.generic","$.spec.honeycomb","$.spec.logicMonitor","$.spec.azurePrometheus","$.spec.historicalDataRetrieval","$.spec.queryDelay","$.spec.interval","$.spec.timeout","$.spec.jitter"]},{"path":"$.spec.description","type":"string","Doc":"","rules":[{"description":"length must be between 0 and 1050","errorCode":"string_description"}]},{"path":"$.spec.releaseChannel","type":"int","Doc":"ReleaseChannel /*","isOptional":true,"values":["stable","beta","alpha"],"rules":[{"description":"must be one of: stable, beta, alpha","errorCode":"one_of"}]},{"path":"$.spec.prometheus","type":"PrometheusConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"PrometheusConfig represents content of Prometheus Configuration typical for Agent Object.","childrenPaths":["$.spec.prometheus.url"]},{"path":"$.spec.prometheus.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.datadog","type":"DatadogConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"DatadogConfig represents content of Datadog Configuration typical for Agent Object.","childrenPaths":["$.spec.datadog.site"]},{"path":"$.spec.datadog.site","type":"string","Doc":"","values":["eu","com","datadoghq.com","us3.datadoghq.com","us5.datadoghq.com","datadoghq.eu","ddog-gov.com","ap1.datadoghq.com"],"rules":[{"description":"must be one of: eu, com, datadoghq.com, us3.datadoghq.com, us5.datadoghq.com, datadoghq.eu, ddog-gov.com, ap1.datadoghq.com","errorCode":"one_of"}]},{"path":"$.spec.newRelic","type":"NewRelicConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"NewRelicConfig represents content of NewRelic Configuration typical for Agent Object.","childrenPaths":["$.spec.newRelic.accountId"]},{"path":"$.spec.newRelic.accountId","type":"int","Doc":"","rules":[{"description":"should be greater than or equal to '1'","errorCode":"greater_than_or_equal_to"}]},{"path":"$.spec.appDynamics","type":"AppDynamicsConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"AppDynamicsConfig represents content of AppDynamics Configuration typical for Agent Object.","childrenPaths":["$.spec.appDynamics.url"]},{"path":"$.spec.appDynamics.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.splunk","type":"SplunkConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"SplunkConfig represents content of Splunk Configuration typical for Agent Object.","childrenPaths":["$.spec.splunk.url"]},{"path":"$.spec.splunk.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.lightstep","type":"LightstepConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"LightstepConfig represents content of Lightstep Configuration typical for Agent Object.","childrenPaths":["$.spec.lightstep.organization","$.spec.lightstep.project","$.spec.lightstep.url"]},{"path":"$.spec.lightstep.organization","type":"string","Doc":""},{"path":"$.spec.lightstep.project","type":"string","Doc":""},{"path":"$.spec.lightstep.url","type":"string","Doc":"","isOptional":true,"rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"url"}]},{"path":"$.spec.splunkObservability","type":"SplunkObservabilityConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"SplunkObservabilityConfig represents content of SplunkObservability Configuration typical for Agent Object.","childrenPaths":["$.spec.splunkObservability.realm"]},{"path":"$.spec.splunkObservability.realm","type":"string","Doc":""},{"path":"$.spec.dynatrace","type":"DynatraceConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"DynatraceConfig represents content of Dynatrace Configuration typical for Agent Object.","childrenPaths":["$.spec.dynatrace.url"]},{"path":"$.spec.dynatrace.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"url"},{"description":""}]},{"path":"$.spec.elasticsearch","type":"ElasticsearchConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"ElasticsearchConfig represents content of Elasticsearch Configuration typical for Agent Object.","childrenPaths":["$.spec.elasticsearch.url"]},{"path":"$.spec.elasticsearch.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.thousandEyes","type":"ThousandEyesConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"ThousandEyesConfig represents content of ThousandEyes Configuration typical for Agent Object."},{"path":"$.spec.graphite","type":"GraphiteConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"GraphiteConfig represents content of Graphite Configuration typical for Agent Object.","childrenPaths":["$.spec.graphite.url"]},{"path":"$.spec.graphite.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.bigQuery","type":"BigQueryConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"BigQueryConfig represents content of BigQuery configuration."},{"path":"$.spec.opentsdb","type":"OpenTSDBConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"OpenTSDBConfig represents content of OpenTSDBConfig Configuration typical for Agent Object.","childrenPaths":["$.spec.opentsdb.url"]},{"path":"$.spec.opentsdb.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.grafanaLoki","type":"GrafanaLokiConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"GrafanaLokiConfig represents content of GrafanaLoki Configuration typical for Agent Object.","childrenPaths":["$.spec.grafanaLoki.url"]},{"path":"$.spec.grafanaLoki.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.cloudWatch","type":"CloudWatchConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"CloudWatchConfig represents content of CloudWatch Configuration typical for Agent Object."},{"path":"$.spec.pingdom","type":"PingdomConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"PingdomConfig represents content of Pingdom Configuration typical for Agent Object."},{"path":"$.spec.amazonPrometheus","type":"AmazonPrometheusConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"AmazonPrometheusConfig represents content of Amazon Managed Service Configuration typical for Agent Object.","childrenPaths":["$.spec.amazonPrometheus.url","$.spec.amazonPrometheus.region"]},{"path":"$.spec.amazonPrometheus.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.amazonPrometheus.region","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 255","errorCode":"string_max_length"}]},{"path":"$.spec.redshift","type":"RedshiftConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"RedshiftConfig represents content of Redshift configuration typical for Agent Object"},{"path":"$.spec.sumoLogic","type":"SumoLogicConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"SumoLogicConfig represents content of Sumo Logic configuration typical for Agent Object.","childrenPaths":["$.spec.sumoLogic.url"]},{"path":"$.spec.sumoLogic.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.instana","type":"InstanaConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"InstanaConfig represents content of Instana configuration typical for Agent Object","childrenPaths":["$.spec.instana.url"]},{"path":"$.spec.instana.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.influxdb","type":"InfluxDBConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"InfluxDBConfig represents content of InfluxDB configuration typical fo Agent Object","childrenPaths":["$.spec.influxdb.url"]},{"path":"$.spec.influxdb.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.azureMonitor","type":"AzureMonitorConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"AzureMonitorConfig represents content of AzureMonitor Configuration typical for Agent Object.","childrenPaths":["$.spec.azureMonitor.tenantId"]},{"path":"$.spec.azureMonitor.tenantId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.gcm","type":"GCMConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"GCMConfig represents content of GCM configuration."},{"path":"$.spec.generic","type":"GenericConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"GenericConfig represents content of Generic Configuration typical for Agent Object."},{"path":"$.spec.honeycomb","type":"HoneycombConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"HoneycombConfig represents content of Honeycomb Configuration typical for Agent Object."},{"path":"$.spec.logicMonitor","type":"LogicMonitorConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"","childrenPaths":["$.spec.logicMonitor.account"]},{"path":"$.spec.logicMonitor.account","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty"}]},{"path":"$.spec.azurePrometheus","type":"AzurePrometheusConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"AzurePrometheusConfig represents content of Azure Monitor managed service for Prometheus typical for Agent Object.","childrenPaths":["$.spec.azurePrometheus.url","$.spec.azurePrometheus.tenantId"]},{"path":"$.spec.azurePrometheus.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url"}]},{"path":"$.spec.azurePrometheus.tenantId","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'","details":"expected RFC-4122 compliant UUID string","errorCode":"string_uuid","examples":["00000000-0000-0000-0000-000000000000","e190c630-8873-11ee-b9d1-0242ac120002","79258D24-01A7-47E5-ACBB-7E762DE52298"]}]},{"path":"$.spec.historicalDataRetrieval","type":"HistoricalDataRetrieval","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"HistoricalDataRetrieval represents optional parameters for agent to regard when configuring\nTimeMachine-related SLO properties","childrenPaths":["$.spec.historicalDataRetrieval.minimumAgentVersion","$.spec.historicalDataRetrieval.maxDuration","$.spec.historicalDataRetrieval.defaultDuration"]},{"path":"$.spec.historicalDataRetrieval.minimumAgentVersion","type":"string","Doc":""},{"path":"$.spec.historicalDataRetrieval.maxDuration","type":"HistoricalRetrievalDuration","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"HistoricalRetrievalDuration struct was previously called Duration. However, this name was too generic\nsince we also needed to introduce a Duration struct for QueryDelay, which allowed for different time units.\nTime travel is allowed for days/hours/minutes, and query delay can be set to minutes/seconds. Separating those two\nstructs allows for easier validation logic and avoidance of possible mismatches. Also, later on the database level\nwe have time travel duration unit related enum, that's specifically named for data retrieval purposes. Thus,\nit was easier to split those Durations into separate structures.","childrenPaths":["$.spec.historicalDataRetrieval.maxDuration.value","$.spec.historicalDataRetrieval.maxDuration.unit"]},{"path":"$.spec.historicalDataRetrieval.maxDuration.value","type":"int","Doc":"","rules":[{"description":"should be greater than or equal to '0'","errorCode":"greater_than_or_equal_to"},{"description":"should be less than or equal to '43200'","errorCode":"less_than_or_equal_to"}]},{"path":"$.spec.historicalDataRetrieval.maxDuration.unit","type":"string","Doc":"","values":["Day","Hour","Minute"],"rules":[{"description":"must be one of: Day, Hour, Minute","errorCode":"one_of"}]},{"path":"$.spec.historicalDataRetrieval.defaultDuration","type":"HistoricalRetrievalDuration","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"HistoricalRetrievalDuration struct was previously called Duration. However, this name was too generic\nsince we also needed to introduce a Duration struct for QueryDelay, which allowed for different time units.\nTime travel is allowed for days/hours/minutes, and query delay can be set to minutes/seconds. Separating those two\nstructs allows for easier validation logic and avoidance of possible mismatches. Also, later on the database level\nwe have time travel duration unit related enum, that's specifically named for data retrieval purposes. Thus,\nit was easier to split those Durations into separate structures.","childrenPaths":["$.spec.historicalDataRetrieval.defaultDuration.value","$.spec.historicalDataRetrieval.defaultDuration.unit"]},{"path":"$.spec.historicalDataRetrieval.defaultDuration.value","type":"int","Doc":"","rules":[{"description":"should be greater than or equal to '0'","errorCode":"greater_than_or_equal_to"},{"description":"should be less than or equal to '43200'","errorCode":"less_than_or_equal_to"}]},{"path":"$.spec.historicalDataRetrieval.defaultDuration.unit","type":"string","Doc":"","values":["Day","Hour","Minute"],"rules":[{"description":"must be one of: Day, Hour, Minute","errorCode":"one_of"}]},{"path":"$.spec.queryDelay","type":"QueryDelay","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"","childrenPaths":["$.spec.queryDelay.minimumAgentVersion","$.spec.queryDelay.value","$.spec.queryDelay.unit"]},{"path":"$.spec.queryDelay.minimumAgentVersion","type":"string","Doc":""},{"path":"$.spec.queryDelay.value","type":"int","Doc":""},{"path":"$.spec.queryDelay.unit","type":"string","Doc":"","values":["Minute","Second"],"rules":[{"description":"must be one of: Minute, Second","errorCode":"one_of"}]},{"path":"$.spec.interval","type":"Interval","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"Interval, Timeout and Jitter are readonly and cannot be set via API","childrenPaths":["$.spec.interval.value","$.spec.interval.unit"]},{"path":"$.spec.interval.value","type":"int","Doc":""},{"path":"$.spec.interval.unit","type":"string","Doc":""},{"path":"$.spec.timeout","type":"Timeout","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"","childrenPaths":["$.spec.timeout.value","$.spec.timeout.unit"]},{"path":"$.spec.timeout.value","type":"int","Doc":""},{"path":"$.spec.timeout.unit","type":"string","Doc":""},{"path":"$.spec.jitter","type":"Jitter","package":"github.com/nobl9/nobl9-go/manifest/v1alpha","Doc":"","childrenPaths":["$.spec.jitter.value","$.spec.jitter.unit"]},{"path":"$.spec.jitter.value","type":"int","Doc":""},{"path":"$.spec.jitter.unit","type":"string","Doc":""},{"path":"$.status","type":"Status","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/agent","Doc":"Status holds dynamic content which is not part of the static Agent definition.","childrenPaths":["$.status.agentType","$.status.agentVersion","$.status.lastConnection","$.status.newestStableAgentVersion","$.status.newestBetaAgentVersion"]},{"path":"$.status.agentType","type":"string","Doc":""},{"path":"$.status.agentVersion","type":"string","Doc":""},{"path":"$.status.lastConnection","type":"string","Doc":""},{"path":"$.status.newestStableAgentVersion","type":"string","Doc":""},{"path":"$.status.newestBetaAgentVersion","type":"string","Doc":""},{"path":"$.manifestSrc","type":"string","Doc":""},{"path":"$.oktaClientID","type":"string","Doc":""}],"Examples":["apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: amazon-prometheus\n  displayName: Amazon Prometheus Agent\n  project: default\nspec:\n  description: Example Amazon Prometheus Agent\n  releaseChannel: stable\n  amazonPrometheus:\n    url: https://aps-workspaces.us-east-1.amazonaws.com/workspaces/ws-f49ecf99-6dfa-4b00-9f94-a50b10a3010b\n    region: us-east-1\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 1\n    unit: Second\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: app-dynamics\n  displayName: AppDynamics Agent\n  project: default\nspec:\n  description: Example AppDynamics Agent\n  releaseChannel: stable\n  appDynamics:\n    url: https://my-org.saas.appdynamics.com\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: azure-monitor\n  displayName: Azure Monitor Agent\n  project: default\nspec:\n  description: Example Azure Monitor Agent\n  releaseChannel: beta\n  azureMonitor:\n    tenantId: 5cdecca3-c2c5-4072-89dd-5555faf05202\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 6\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: azure-prometheus\n  displayName: Azure Prometheus Agent\n  project: default\nspec:\n  description: Example Azure Prometheus Agent\n  releaseChannel: beta\n  azurePrometheus:\n    url: https://defaultazuremonitorworkspace-westus2-szxw.westus2.prometheus.monitor.azure.com\n    tenantId: 41372654-f4b6-4bd1-a3fe-75629c024df1\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 1\n    unit: Second\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: big-query\n  displayName: BigQuery Agent\n  project: default\nspec:\n  description: Example BigQuery Agent\n  releaseChannel: stable\n  bigQuery: {}\n  queryDelay:\n    value: 1\n    unit: Second\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: cloud-watch\n  displayName: CloudWatch Agent\n  project: default\nspec:\n  description: Example CloudWatch Agent\n  releaseChannel: beta\n  cloudWatch: {}\n  historicalDataRetrieval:\n    maxDuration:\n      value: 15\n      unit: Day\n    defaultDuration:\n      value: 7\n      unit: Day\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: datadog\n  displayName: Datadog Agent\n  project: default\nspec:\n  description: Example Datadog Agent\n  releaseChannel: stable\n  datadog:\n    site: com\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: dynatrace\n  displayName: Dynatrace Agent\n  project: default\nspec:\n  description: Example Dynatrace Agent\n  releaseChannel: stable\n  dynatrace:\n    url: https://zvf10945.live.dynatrace.com/\n  historicalDataRetrieval:\n    maxDuration:\n      value: 28\n      unit: Day\n    defaultDuration:\n      value: 14\n      unit: Day\n  queryDelay:\n    value: 3\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: elasticsearch\n  displayName: Elasticsearch Agent\n  project: default\nspec:\n  description: Example Elasticsearch Agent\n  releaseChannel: beta\n  elasticsearch:\n    url: http://elasticsearch-main.elasticsearch:9200\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: generic\n  displayName: Generic Agent\n  project: default\nspec:\n  description: Example Generic Agent\n  releaseChannel: stable\n  generic: {}\n  queryDelay:\n    value: 1\n    unit: Second\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: google-cloud-monitoring\n  displayName: Google Cloud Monitoring Agent\n  project: default\nspec:\n  description: Example Google Cloud Monitoring Agent\n  releaseChannel: beta\n  gcm: {}\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 3\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: grafana-loki\n  displayName: Grafana Loki Agent\n  project: default\nspec:\n  description: Example Grafana Loki Agent\n  releaseChannel: stable\n  grafanaLoki:\n    url: http://grafana-loki.loki:3100\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: graphite\n  displayName: Graphite Agent\n  project: default\nspec:\n  description: Example Graphite Agent\n  releaseChannel: stable\n  graphite:\n    url: http://graphite.graphite:8080/render\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: honeycomb\n  displayName: Honeycomb Agent\n  project: default\nspec:\n  description: Example Honeycomb Agent\n  releaseChannel: beta\n  honeycomb: {}\n  historicalDataRetrieval:\n    maxDuration:\n      value: 7\n      unit: Day\n    defaultDuration:\n      value: 3\n      unit: Day\n  queryDelay:\n    value: 6\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: influx-d-b\n  displayName: InfluxDB Agent\n  project: default\nspec:\n  description: Example InfluxDB Agent\n  releaseChannel: stable\n  influxdb:\n    url: https://us-west-2-2.aws.cloud2.influxdata.com\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: instana\n  displayName: Instana Agent\n  project: default\nspec:\n  description: Example Instana Agent\n  releaseChannel: stable\n  instana:\n    url: https://orange-my-org12.instana.io\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: lightstep\n  displayName: Lightstep Agent\n  project: default\nspec:\n  description: Example Lightstep Agent\n  releaseChannel: stable\n  lightstep:\n    organization: MyOrg\n    project: prod-app\n    url: https://api.lightstep.com\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 3\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: logic-monitor\n  displayName: LogicMonitor Agent\n  project: default\nspec:\n  description: Example LogicMonitor Agent\n  releaseChannel: beta\n  logicMonitor:\n    account: my-account-name\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 3\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: new-relic\n  displayName: New Relic Agent\n  project: default\nspec:\n  description: Example New Relic Agent\n  releaseChannel: stable\n  newRelic:\n    accountId: 1234567\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: open-t-s-d-b\n  displayName: OpenTSDB Agent\n  project: default\nspec:\n  description: Example OpenTSDB Agent\n  releaseChannel: stable\n  opentsdb:\n    url: http://opentsdb.opentsdb:4242\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: pingdom\n  displayName: Pingdom Agent\n  project: default\nspec:\n  description: Example Pingdom Agent\n  releaseChannel: stable\n  pingdom: {}\n  queryDelay:\n    value: 2\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: prometheus\n  displayName: Prometheus Agent\n  project: default\nspec:\n  description: Example Prometheus Agent\n  releaseChannel: stable\n  prometheus:\n    url: http://prometheus.prometheus:9090\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 1\n    unit: Second\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: redshift\n  displayName: Redshift Agent\n  project: default\nspec:\n  description: Example Redshift Agent\n  releaseChannel: stable\n  redshift: {}\n  queryDelay:\n    value: 31\n    unit: Second\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: splunk-observability\n  displayName: Splunk Observability Agent\n  project: default\nspec:\n  description: Example Splunk Observability Agent\n  releaseChannel: stable\n  splunkObservability:\n    realm: us1\n  queryDelay:\n    value: 6\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: splunk\n  displayName: Splunk Agent\n  project: default\nspec:\n  description: Example Splunk Agent\n  releaseChannel: stable\n  splunk:\n    url: https://splunk.my-org.com/services\n  historicalDataRetrieval:\n    maxDuration:\n      value: 30\n      unit: Day\n    defaultDuration:\n      value: 15\n      unit: Day\n  queryDelay:\n    value: 6\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: sumo-logic\n  displayName: Sumo Logic Agent\n  project: default\nspec:\n  description: Example Sumo Logic Agent\n  releaseChannel: stable\n  sumoLogic:\n    url: https://service.sumologic.com\n  queryDelay:\n    value: 5\n    unit: Minute\n","apiVersion: n9/v1alpha\nkind: Agent\nmetadata:\n  name: thousand-eyes\n  displayName: ThousandEyes Agent\n  project: default\nspec:\n  description: Example ThousandEyes Agent\n  releaseChannel: stable\n  thousandEyes: {}\n  queryDelay:\n    value: 2\n    unit: Minute\n"]},{"Kind":"AlertMethod","Version":"n9/v1alpha","Properties":[{"path":"$","type":"AlertMethod","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"AlertMethod represents the configuration required to send a notification to an external service\nwhen an alert is triggered.","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["AlertMethod"],"rules":[{"description":"should be equal to 'AlertMethod'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"Metadata provides identity information for AlertMethod.","childrenPaths":["$.metadata.name","$.metadata.displayName","$.metadata.project"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.displayName","type":"string","Doc":"","isOptional":true,"rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.metadata.project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"Spec holds detailed information specific to AlertMethod.","childrenPaths":["$.spec.description","$.spec.webhook","$.spec.pagerduty","$.spec.slack","$.spec.discord","$.spec.opsgenie","$.spec.servicenow","$.spec.jira","$.spec.msteams","$.spec.email"]},{"path":"$.spec.description","type":"string","Doc":"","rules":[{"description":"length must be between 0 and 1050","errorCode":"string_length"}]},{"path":"$.spec.webhook","type":"WebhookAlertMethod","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"","childrenPaths":["$.spec.webhook.url","$.spec.webhook.template","$.spec.webhook.templateFields","$.spec.webhook.templateFields[*]","$.spec.webhook.headers","$.spec.webhook.headers[*]"]},{"path":"$.spec.webhook.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url","conditions":["is empty or equal to '[hidden]'"]}]},{"path":"$.spec.webhook.template","type":"string","Doc":"","isOptional":true},{"path":"$.spec.webhook.templateFields","type":"[]string","Doc":"","isOptional":true},{"path":"$.spec.webhook.templateFields[*]","type":"string","Doc":""},{"path":"$.spec.webhook.headers","type":"[]WebhookHeader","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"","rules":[{"description":"length must be less than or equal to 10","errorCode":"slice_max_length"}]},{"path":"$.spec.webhook.headers[*]","type":"WebhookHeader","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"","childrenPaths":["$.spec.webhook.headers[*].name","$.spec.webhook.headers[*].value","$.spec.webhook.headers[*].isSecret"]},{"path":"$.spec.webhook.headers[*].name","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty"},{"description":"string must match regular expression: '^([a-zA-Z0-9]+[_-]?)+$'","details":"must be a valid header name","errorCode":"string_match_regexp"}]},{"path":"$.spec.webhook.headers[*].value","type":"string","Doc":"","rules":[{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["isSecret is false"]},{"description":"string cannot be empty","errorCode":"string_not_empty","conditions":["isSecret is true"]}]},{"path":"$.spec.webhook.headers[*].isSecret","type":"bool","Doc":""},{"path":"$.spec.pagerduty","type":"PagerDutyAlertMethod","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"PagerDutyAlertMethod represents a set of properties required to open an Incident in PagerDuty.","childrenPaths":["$.spec.pagerduty.integrationKey","$.spec.pagerduty.sendResolution"]},{"path":"$.spec.pagerduty.integrationKey","type":"string","Doc":"","isSecret":true,"rules":[{"description":"length must be less than or equal to 32","errorCode":"string_max_length","conditions":["is empty or equal to '[hidden]'"]}]},{"path":"$.spec.pagerduty.sendResolution","type":"SendResolution","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"SendResolution If user set SendResolution, then “Send a notification after the cooldown period is over\"","childrenPaths":["$.spec.pagerduty.sendResolution.message"]},{"path":"$.spec.pagerduty.sendResolution.message","type":"string","Doc":""},{"path":"$.spec.slack","type":"SlackAlertMethod","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"SlackAlertMethod represents a set of properties required to send message to Slack.","childrenPaths":["$.spec.slack.url"]},{"path":"$.spec.slack.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url","conditions":["is empty or equal to '[hidden]'"]},{"description":"string must start with 'https://hooks.slack.com/services/' prefix","errorCode":"string_starts_with","conditions":["is empty or equal to '[hidden]'"]}]},{"path":"$.spec.discord","type":"DiscordAlertMethod","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"DiscordAlertMethod represents a set of properties required to send message to Discord.","childrenPaths":["$.spec.discord.url"]},{"path":"$.spec.discord.url","type":"string","Doc":"","isSecret":true,"rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url","conditions":["is empty or equal to '[hidden]'"]}]},{"path":"$.spec.opsgenie","type":"OpsgenieAlertMethod","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"OpsgenieAlertMethod represents a set of properties required to send message to Opsgenie.","childrenPaths":["$.spec.opsgenie.auth","$.spec.opsgenie.url"]},{"path":"$.spec.opsgenie.auth","type":"string","Doc":"","isSecret":true,"rules":[{"description":"","conditions":["is empty or equal to '[hidden]'"]}]},{"path":"$.spec.opsgenie.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"string_url","conditions":["is empty or equal to '[hidden]'"]},{"description":"string must start with one of the following prefixes: 'https://api.opsgenie.com', 'https://api.eu.opsgenie.com'","errorCode":"string_starts_with","conditions":["is empty or equal to '[hidden]'"]}]},{"path":"$.spec.servicenow","type":"ServiceNowAlertMethod","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"ServiceNowAlertMethod represents a set of properties required to send message to ServiceNow.","childrenPaths":["$.spec.servicenow.username","$.spec.servicenow.password","$.spec.servicenow.instanceName"]},{"path":"$.spec.servicenow.username","type":"string","Doc":""},{"path":"$.spec.servicenow.password","type":"string","Doc":""},{"path":"$.spec.servicenow.instanceName","type":"string","Doc":""},{"path":"$.spec.jira","type":"JiraAlertMethod","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"JiraAlertMethod represents a set of properties required create tickets in Jira.","childrenPaths":["$.spec.jira.url","$.spec.jira.username","$.spec.jira.apiToken","$.spec.jira.projectKey"]},{"path":"$.spec.jira.url","type":"string","Doc":"","rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"url"},{"description":""}]},{"path":"$.spec.jira.username","type":"string","Doc":""},{"path":"$.spec.jira.apiToken","type":"string","Doc":""},{"path":"$.spec.jira.projectKey","type":"string","Doc":""},{"path":"$.spec.msteams","type":"TeamsAlertMethod","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"TeamsAlertMethod represents a set of properties required create Microsoft Teams notifications.","childrenPaths":["$.spec.msteams.url"]},{"path":"$.spec.msteams.url","type":"string","Doc":"","isSecret":true,"rules":[{"description":"valid URL must have a scheme (e.g. https://) and contain either host, fragment or opaque data","errorCode":"url","conditions":["is empty or equal to '[hidden]'"]},{"description":"","conditions":["is empty or equal to '[hidden]'"]}]},{"path":"$.spec.email","type":"EmailAlertMethod","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertmethod","Doc":"EmailAlertMethod represents a set of properties required to send an email.","childrenPaths":["$.spec.email.to","$.spec.email.to[*]","$.spec.email.cc","$.spec.email.cc[*]","$.spec.email.bcc","$.spec.email.bcc[*]"]},{"path":"$.spec.email.to","type":"[]string","Doc":"","rules":[{"description":"length must be less than or equal to 10","errorCode":"slice_max_length"}]},{"path":"$.spec.email.to[*]","type":"string","Doc":""},{"path":"$.spec.email.cc","type":"[]string","Doc":"","rules":[{"description":"length must be less than or equal to 10","errorCode":"slice_max_length"}]},{"path":"$.spec.email.cc[*]","type":"string","Doc":""},{"path":"$.spec.email.bcc","type":"[]string","Doc":"","rules":[{"description":"length must be less than or equal to 10","errorCode":"slice_max_length"}]},{"path":"$.spec.email.bcc[*]","type":"string","Doc":""},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["apiVersion: n9/v1alpha\nkind: AlertMethod\nmetadata:\n  name: discord\n  displayName: Discord Alert Method\n  project: default\nspec:\n  description: Example Discord Alert Method\n  discord:\n    url: https://discord.com/api/webhooks/123/secret\n","apiVersion: n9/v1alpha\nkind: AlertMethod\nmetadata:\n  name: email\n  displayName: Email Alert Method\n  project: default\nspec:\n  description: Example Email Alert Method\n  email:\n    to:\n    - alerts-tests@nobl9.com\n    cc:\n    - alerts-tests+cc@nobl9.com\n    bcc:\n    - alerts-tests+bcc@nobl9.com\n","apiVersion: n9/v1alpha\nkind: AlertMethod\nmetadata:\n  name: jira\n  displayName: Jira Alert Method\n  project: default\nspec:\n  description: Example Jira Alert Method\n  jira:\n    url: https://nobl9.atlassian.net/\n    username: jira-alerts@nobl9.com\n    apiToken: \"123456789\"\n    projectKey: AL\n","apiVersion: n9/v1alpha\nkind: AlertMethod\nmetadata:\n  name: opsgenie\n  displayName: Opsgenie Alert Method\n  project: default\nspec:\n  description: Example Opsgenie Alert Method\n  opsgenie:\n    auth: GenieKey 123\n    url: https://api.opsgenie.com\n","apiVersion: n9/v1alpha\nkind: AlertMethod\nmetadata:\n  name: pagerduty\n  displayName: PagerDuty Alert Method\n  project: default\nspec:\n  description: Example PagerDuty Alert Method\n  pagerduty:\n    integrationKey: \"123456789\"\n    sendResolution:\n      message: Alert is now resolved\n","apiVersion: n9/v1alpha\nkind: AlertMethod\nmetadata:\n  name: servicenow\n  displayName: ServiceNow Alert Method\n  project: default\nspec:\n  description: Example ServiceNow Alert Method\n  servicenow:\n    username: user\n    password: super-strong-password\n    instanceName: vm123\n","apiVersion: n9/v1alpha\nkind: AlertMethod\nmetadata:\n  name: slack\n  displayName: Slack Alert Method\n  project: default\nspec:\n  description: Example Slack Alert Method\n  slack:\n    url: https://hooks.slack.com/services/321/123/secret\n","apiVersion: n9/v1alpha\nkind: AlertMethod\nmetadata:\n  name: teams\n  displayName: Teams Alert Method\n  project: default\nspec:\n  description: Example Teams Alert Method\n  msteams:\n    url: https://meshmark.webhook.office.com/webhookb2/123@321/IncomingWebhook/123/321\n","# Webhook Alert Method with template\n- apiVersion: n9/v1alpha\n  kind: AlertMethod\n  metadata:\n    name: webhook\n    displayName: Webhook Alert Method\n    project: default\n  spec:\n    description: Example Webhook Alert Method\n    webhook:\n      url: https://123.execute-api.eu-central-1.amazonaws.com/default/putReq2S3\n      template: |-\n        {\n          \"message\": \"Your SLO $slo_name needs attention!\",\n          \"timestamp\": \"$timestamp\",\n          \"severity\": \"$severity\",\n          \"slo\": \"$slo_name\",\n          \"project\": \"$project_name\",\n          \"organization\": \"$organization\",\n          \"alert_policy\": \"$alert_policy_name\",\n          \"alerting_conditions\": $alert_policy_conditions[],\n          \"service\": \"$service_name\",\n          \"labels\": {\n            \"slo\": \"$slo_labels_text\",\n            \"service\": \"$service_labels_text\",\n            \"alert_policy\": \"$alert_policy_labels_text\"\n          }\n        }\n      headers:\n      - name: Authorization\n        value: very-secret\n        isSecret: true\n      - name: X-User-Data\n        value: \"{\\\"data\\\":\\\"is here\\\"}\"\n        isSecret: false\n# Webhook Alert Method with templateFields\n- apiVersion: n9/v1alpha\n  kind: AlertMethod\n  metadata:\n    name: webhook\n    displayName: Webhook Alert Method\n    project: default\n  spec:\n    description: Example Webhook Alert Method\n    webhook:\n      url: https://123.execute-api.eu-central-1.amazonaws.com/default/putReq2S3\n      templateFields:\n      - project_name\n      - service_name\n      - organization\n      - alert_policy_name\n      - alert_policy_description\n      - alert_policy_conditions[]\n      - alert_policy_conditions_text\n      - severity\n      - slo_name\n      - objective_name\n      - timestamp\n      headers:\n      - name: Authorization\n        value: very-secret\n        isSecret: true\n      - name: X-User-Data\n        value: \"{\\\"data\\\":\\\"is here\\\"}\"\n        isSecret: false\n"]},{"Kind":"AlertPolicy","Version":"n9/v1alpha","Properties":[{"path":"$","type":"AlertPolicy","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertpolicy","Doc":"AlertPolicy represents a set of conditions that can trigger an alert.","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["AlertPolicy"],"rules":[{"description":"should be equal to 'AlertPolicy'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertpolicy","Doc":"","childrenPaths":["$.metadata.name","$.metadata.displayName","$.metadata.project","$.metadata.labels","$.metadata.annotations"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.displayName","type":"string","Doc":"","isOptional":true,"rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.metadata.project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.labels","type":"map[string][]string","Doc":"Labels are key-value pairs that can be attached to certain objects.\nLabels are used to select and filter these objects.","examples":["area:\n- latency\n- slow-check\nenv:\n- prod\n- dev\nregion:\n- us\n- eu\nteam:\n- green\n- sales\n"],"childrenPaths":["$.metadata.labels.~","$.metadata.labels.*","$.metadata.labels.*[*]"]},{"path":"$.metadata.labels.~","type":"string","Doc":"","rules":[{"description":"length must be between 1 and 63","errorCode":"string_length"},{"description":"string must match regular expression: '^\\p{Ll}([_\\-0-9\\p{Ll}]*[0-9\\p{Ll}])?$'","errorCode":"string_match_regexp"}]},{"path":"$.metadata.labels.*","type":"[]string","Doc":"","rules":[{"description":"elements must be unique","errorCode":"slice_unique"}]},{"path":"$.metadata.labels.*[*]","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 200","errorCode":"string_max_length"}]},{"path":"$.metadata.annotations","type":"map[string]string","Doc":"MetadataAnnotations are non-identifiable key-value pairs that can be attached to\nSLOs, services, projects, and alert policies.\nMetadata annotations are used for descriptive purposes only.","examples":["area: latency\nenv: prod\nregion: us\nteam: sales\n"],"childrenPaths":["$.metadata.annotations.~","$.metadata.annotations.*"]},{"path":"$.metadata.annotations.~","type":"string","Doc":"","rules":[{"description":"length must be between 1 and 63","errorCode":"string_length"},{"description":"string must match regular expression: '^\\p{Ll}([_\\-0-9\\p{Ll}]*[0-9\\p{Ll}])?$'","errorCode":"string_match_regexp"}]},{"path":"$.metadata.annotations.*","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 1050","errorCode":"string_max_length"}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertpolicy","Doc":"Spec represents content of AlertPolicy's Spec.","childrenPaths":["$.spec.description","$.spec.severity","$.spec.coolDown","$.spec.conditions","$.spec.conditions[*]","$.spec.alertMethods","$.spec.alertMethods[*]"]},{"path":"$.spec.description","type":"string","Doc":"","rules":[{"description":"length must be between 0 and 1050","errorCode":"string_description"}]},{"path":"$.spec.severity","type":"string","Doc":"","values":["Low","Medium","High"],"rules":[{"description":"must be one of: Low, Medium, High","errorCode":"one_of"}]},{"path":"$.spec.coolDown","type":"string","Doc":"","isOptional":true,"rules":[{"description":"should be greater than or equal to '5m0s'","errorCode":"greater_than_or_equal_to"}]},{"path":"$.spec.conditions","type":"[]AlertCondition","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertpolicy","Doc":"","rules":[{"description":"length must be greater than or equal to 1","errorCode":"slice_min_length"}]},{"path":"$.spec.conditions[*]","type":"AlertCondition","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertpolicy","Doc":"AlertCondition represents a condition to meet to trigger an alert.","rules":[{"description":"properties are mutually exclusive: alertingWindow, lastsFor","errorCode":"mutually_exclusive"},{"description":""},{"description":""},{"description":""}],"childrenPaths":["$.spec.conditions[*].measurement","$.spec.conditions[*].value","$.spec.conditions[*].alertingWindow","$.spec.conditions[*].lastsFor","$.spec.conditions[*].op"]},{"path":"$.spec.conditions[*].measurement","type":"string","Doc":"","values":["burnedBudget","averageBurnRate","timeToBurnBudget","timeToBurnEntireBudget","budgetDrop"],"rules":[{"description":"must be one of: burnedBudget, averageBurnRate, timeToBurnBudget, timeToBurnEntireBudget, budgetDrop","errorCode":"one_of"}]},{"path":"$.spec.conditions[*].value","type":"interface","Doc":"","rules":[{"description":"should be greater than '0s'","errorCode":"greater_than","conditions":["measurement is is either 'timeToBurnBudget' or 'timeToBurnEntireBudget'"]},{"description":"","conditions":["measurement is is either 'burnedBudget', 'averageBurnRate' or 'budgetDrop'"]}]},{"path":"$.spec.conditions[*].alertingWindow","type":"string","Doc":"","isOptional":true,"rules":[{"description":"duration must be defined with \u003cno value\u003e precision","errorCode":"duration_precision"},{"description":"should be greater than or equal to '5m0s'","errorCode":"greater_than_or_equal_to"},{"description":"should be less than or equal to '168h0m0s'","errorCode":"less_than_or_equal_to"}]},{"path":"$.spec.conditions[*].lastsFor","type":"string","Doc":"","isOptional":true,"rules":[{"description":"should be greater than or equal to '0s'","errorCode":"greater_than_or_equal_to"}]},{"path":"$.spec.conditions[*].op","type":"string","Doc":"","isOptional":true},{"path":"$.spec.alertMethods","type":"[]AlertMethodRef","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertpolicy","Doc":""},{"path":"$.spec.alertMethods[*]","type":"AlertMethodRef","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertpolicy","Doc":"","childrenPaths":["$.spec.alertMethods[*].metadata"]},{"path":"$.spec.alertMethods[*].metadata","type":"AlertMethodRefMetadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertpolicy","Doc":"","childrenPaths":["$.spec.alertMethods[*].metadata.name","$.spec.alertMethods[*].metadata.project"]},{"path":"$.spec.alertMethods[*].metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.alertMethods[*].metadata.project","type":"string","Doc":"","isOptional":true,"rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["apiVersion: n9/v1alpha\nkind: AlertPolicy\nmetadata:\n  name: budget-almost-exhausted\n  displayName: Budget almost exhausted (20%)\n  project: default\n  labels:\n    area:\n    - latency\n    - slow-check\n    env:\n    - prod\n    - dev\n    region:\n    - us\n    - eu\n    team:\n    - green\n    - sales\n  annotations:\n    area: latency\n    env: prod\n    region: us\n    team: sales\nspec:\n  description: The error budget is nearly exhausted (20%)\n  severity: Medium\n  coolDown: 5m\n  conditions:\n  - measurement: burnedBudget\n    value: 0.8\n    op: gte\n  alertMethods:\n  - metadata:\n      name: slack\n      project: default\n","# fast\n- apiVersion: n9/v1alpha\n  kind: AlertPolicy\n  metadata:\n    name: fast-budget-drop\n    displayName: Fast budget drop (10% over 15 min)\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: The budget dropped by 10% over the last 15 minutes and is not recovering\n    severity: High\n    coolDown: 5m\n    conditions:\n    - measurement: budgetDrop\n      value: 0.1\n      alertingWindow: 15m\n      op: gte\n    alertMethods:\n    - metadata:\n        name: pagerduty\n        project: default\n# slow\n- apiVersion: n9/v1alpha\n  kind: AlertPolicy\n  metadata:\n    name: slow-budget-drop\n    displayName: Slow budget drop (5% over 1h)\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: The budget dropped by 5% over the last 1 hour and is not recovering\n    severity: Low\n    coolDown: 5m\n    conditions:\n    - measurement: budgetDrop\n      value: 0.05\n      alertingWindow: 1h\n      op: gte\n    alertMethods:\n    - metadata:\n        name: email\n        project: default\n","apiVersion: n9/v1alpha\nkind: AlertPolicy\nmetadata:\n  name: fast-burn\n  displayName: Fast burn (20x5min)\n  project: default\n  labels:\n    area:\n    - latency\n    - slow-check\n    env:\n    - prod\n    - dev\n    region:\n    - us\n    - eu\n    team:\n    - green\n    - sales\n  annotations:\n    area: latency\n    env: prod\n    region: us\n    team: sales\nspec:\n  description: There’s been a significant spike in burn rate over a brief period\n  severity: High\n  coolDown: 5m\n  conditions:\n  - measurement: averageBurnRate\n    value: 20.0\n    alertingWindow: 5m\n    op: gte\n  alertMethods:\n  - metadata:\n      name: pagerduty\n      project: default\n","# above budget\n- apiVersion: n9/v1alpha\n  kind: AlertPolicy\n  metadata:\n    name: fast-exhaustion-above-budget\n    displayName: Fast exhaustion above budget\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: The error budget is exhausting significantly and there's still some budget remaining\n    severity: Medium\n    coolDown: 5m\n    conditions:\n    - measurement: timeToBurnBudget\n      value: 72h\n      alertingWindow: 10m\n      op: lt\n    - measurement: burnedBudget\n      value: 1.0\n      lastsFor: 0m\n      op: lt\n    alertMethods:\n    - metadata:\n        name: slack\n        project: default\n# below budget\n- apiVersion: n9/v1alpha\n  kind: AlertPolicy\n  metadata:\n    name: fast-exhaustion-below-budget\n    displayName: Fast exhaustion below budget\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: The error budget is exhausting significantly and there's no remaining budget left\n    severity: Medium\n    coolDown: 5m\n    conditions:\n    - measurement: timeToBurnEntireBudget\n      value: 72h\n      alertingWindow: 10m\n      op: lte\n    - measurement: burnedBudget\n      value: 1.0\n      lastsFor: 0m\n      op: gte\n    alertMethods:\n    - metadata:\n        name: slack\n        project: default\n","# long windows\n- apiVersion: n9/v1alpha\n  kind: AlertPolicy\n  metadata:\n    name: slow-burn\n    displayName: Slow burn (1x2d and 2x15min)\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: The budget is slowly being exhausted and not recovering\n    severity: Medium\n    coolDown: 5m\n    conditions:\n    - measurement: averageBurnRate\n      value: 1.0\n      alertingWindow: 48h\n      op: gte\n    - measurement: averageBurnRate\n      value: 2.0\n      alertingWindow: 15m\n      op: gte\n    alertMethods:\n    - metadata:\n        name: slack\n        project: default\n# short windows\n- apiVersion: n9/v1alpha\n  kind: AlertPolicy\n  metadata:\n    name: slow-burn\n    displayName: Slow burn (1x12h and 2x15min)\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: The budget is slowly being exhausted and not recovering\n    severity: Medium\n    coolDown: 5m\n    conditions:\n    - measurement: averageBurnRate\n      value: 1.0\n      alertingWindow: 12h\n      op: gte\n    - measurement: averageBurnRate\n      value: 2.0\n      alertingWindow: 15m\n      op: gte\n    alertMethods:\n    - metadata:\n        name: slack\n        project: default\n","# long window\n- apiVersion: n9/v1alpha\n  kind: AlertPolicy\n  metadata:\n    name: slow-exhaustion-long-window\n    displayName: Slow exhaustion for long window SLOs\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: The error budget is exhausting slowly and not recovering\n    severity: Low\n    coolDown: 5m\n    conditions:\n    - measurement: timeToBurnBudget\n      value: 480h\n      alertingWindow: 48h\n      op: lt\n    - measurement: timeToBurnBudget\n      value: 480h\n      alertingWindow: 15m\n      op: lt\n    - measurement: burnedBudget\n      value: 1.0\n      lastsFor: 0m\n      op: lt\n    alertMethods:\n    - metadata:\n        name: email\n        project: default\n# short window\n- apiVersion: n9/v1alpha\n  kind: AlertPolicy\n  metadata:\n    name: slow-exhaustion-short-window\n    displayName: Slow exhaustion for short window SLOs\n    project: default\n    labels:\n      area:\n      - latency\n      - slow-check\n      env:\n      - prod\n      - dev\n      region:\n      - us\n      - eu\n      team:\n      - green\n      - sales\n    annotations:\n      area: latency\n      env: prod\n      region: us\n      team: sales\n  spec:\n    description: The error budget is exhausting slowly and not recovering\n    severity: Low\n    coolDown: 5m\n    conditions:\n    - measurement: timeToBurnBudget\n      value: 120h\n      alertingWindow: 12h\n      op: lt\n    - measurement: timeToBurnBudget\n      value: 120h\n      alertingWindow: 15m\n      op: lt\n    - measurement: burnedBudget\n      value: 1.0\n      lastsFor: 0m\n      op: lt\n    alertMethods:\n    - metadata:\n        name: email\n        project: default\n"]},{"Kind":"AlertSilence","Version":"n9/v1alpha","Properties":[{"path":"$","type":"AlertSilence","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertsilence","Doc":"AlertSilence represents alerts silencing configuration for given SLO and AlertPolicy.","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.status","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["AlertSilence"],"rules":[{"description":"should be equal to 'AlertSilence'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertsilence","Doc":"Metadata defines only basic metadata fields - name and project which uniquely identifies\nobject on project level.","childrenPaths":["$.metadata.name","$.metadata.project"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertsilence","Doc":"Spec represents content of AlertSilence's Spec.","childrenPaths":["$.spec.description","$.spec.slo","$.spec.alertPolicy","$.spec.period"]},{"path":"$.spec.description","type":"string","Doc":"","rules":[{"description":"length must be between 0 and 1050","errorCode":"string_description"}]},{"path":"$.spec.slo","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.alertPolicy","type":"AlertPolicySource","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertsilence","Doc":"AlertPolicySource represents AlertPolicy attached to the SLO.","childrenPaths":["$.spec.alertPolicy.name","$.spec.alertPolicy.project"]},{"path":"$.spec.alertPolicy.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.alertPolicy.project","type":"string","Doc":"","isOptional":true,"rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.period","type":"Period","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertsilence","Doc":"Period represents time range configuration for AlertSilence.","rules":[{"description":"properties are mutually exclusive: duration, endTime","errorCode":"mutually_exclusive"},{"description":"","conditions":[""]}],"childrenPaths":["$.spec.period.startTime","$.spec.period.endTime","$.spec.period.duration"]},{"path":"$.spec.period.startTime","type":"Time","package":"time","Doc":""},{"path":"$.spec.period.endTime","type":"Time","package":"time","Doc":""},{"path":"$.spec.period.duration","type":"string","Doc":"","rules":[{"description":"should be greater than '0s'","errorCode":"greater_than","conditions":[""]}]},{"path":"$.status","type":"Status","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alertsilence","Doc":"Status represents content of Status optional for AlertSilence object.","childrenPaths":["$.status.from","$.status.to","$.status.createdAt","$.status.updatedAt"]},{"path":"$.status.from","type":"string","Doc":""},{"path":"$.status.to","type":"string","Doc":""},{"path":"$.status.createdAt","type":"string","Doc":""},{"path":"$.status.updatedAt","type":"string","Doc":""},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["# duration\n- apiVersion: n9/v1alpha\n  kind: AlertSilence\n  metadata:\n    name: incident-70\n    project: default\n  spec:\n    description: Alerts silenced for the duration of the active incident 70\n    slo: api-server-latency\n    alertPolicy:\n      name: fast-burn\n      project: default\n    period:\n      duration: 4h\n# end time\n- apiVersion: n9/v1alpha\n  kind: AlertSilence\n  metadata:\n    name: incident-71\n    project: default\n  spec:\n    description: Alerts silenced until incident 71 is resolved\n    slo: api-server-latency\n    alertPolicy:\n      name: fast-burn\n      project: default\n    period:\n      endTime: 2024-05-01T20:00:00Z\n# start and end time\n- apiVersion: n9/v1alpha\n  kind: AlertSilence\n  metadata:\n    name: scheduled-maintenance-2024-05-01\n    project: default\n  spec:\n    description: Scheduled maintenance alerts silence\n    slo: api-server-latency\n    alertPolicy:\n      name: fast-burn\n      project: default\n    period:\n      startTime: 2024-05-01T12:00:00Z\n      endTime: 2024-05-01T14:00:00Z\n# start time and duration\n- apiVersion: n9/v1alpha\n  kind: AlertSilence\n  metadata:\n    name: scheduled-maintenance-2024-05-02\n    project: default\n  spec:\n    description: Scheduled maintenance alerts silence\n    slo: api-server-latency\n    alertPolicy:\n      name: fast-burn\n      project: default\n    period:\n      startTime: 2024-05-02T12:00:00Z\n      duration: 2h\n"]},{"Kind":"Alert","Version":"n9/v1alpha","Properties":[{"path":"$","type":"Alert","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alert","Doc":"Alert represents triggered alert","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["Alert"],"rules":[{"description":"should be equal to 'Alert'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alert","Doc":"","childrenPaths":["$.metadata.name","$.metadata.project"]},{"path":"$.metadata.name","type":"string","Doc":""},{"path":"$.metadata.project","type":"string","Doc":""},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alert","Doc":"Spec represents content of Alert's Spec","childrenPaths":["$.spec.alertPolicy","$.spec.slo","$.spec.service","$.spec.objective","$.spec.severity","$.spec.status","$.spec.triggeredMetricTime","$.spec.triggeredClockTime","$.spec.resolvedClockTime","$.spec.resolvedMetricTime","$.spec.coolDown","$.spec.conditions","$.spec.conditions[*]","$.spec.coolDownStartedAtMetricTime","$.spec.resolutionReason"]},{"path":"$.spec.alertPolicy","type":"ObjectMetadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alert","Doc":"","childrenPaths":["$.spec.alertPolicy.name","$.spec.alertPolicy.displayName","$.spec.alertPolicy.project","$.spec.alertPolicy.labels"]},{"path":"$.spec.alertPolicy.name","type":"string","Doc":""},{"path":"$.spec.alertPolicy.displayName","type":"string","Doc":""},{"path":"$.spec.alertPolicy.project","type":"string","Doc":""},{"path":"$.spec.alertPolicy.labels","type":"map[string][]string","Doc":"Labels are key-value pairs that can be attached to certain objects.\nLabels are used to select and filter these objects.","childrenPaths":["$.spec.alertPolicy.labels.~","$.spec.alertPolicy.labels.*","$.spec.alertPolicy.labels.*[*]"]},{"path":"$.spec.alertPolicy.labels.~","type":"string","Doc":""},{"path":"$.spec.alertPolicy.labels.*","type":"[]string","Doc":""},{"path":"$.spec.alertPolicy.labels.*[*]","type":"string","Doc":""},{"path":"$.spec.slo","type":"ObjectMetadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alert","Doc":"","childrenPaths":["$.spec.slo.name","$.spec.slo.displayName","$.spec.slo.project","$.spec.slo.labels"]},{"path":"$.spec.slo.name","type":"string","Doc":""},{"path":"$.spec.slo.displayName","type":"string","Doc":""},{"path":"$.spec.slo.project","type":"string","Doc":""},{"path":"$.spec.slo.labels","type":"map[string][]string","Doc":"Labels are key-value pairs that can be attached to certain objects.\nLabels are used to select and filter these objects.","childrenPaths":["$.spec.slo.labels.~","$.spec.slo.labels.*","$.spec.slo.labels.*[*]"]},{"path":"$.spec.slo.labels.~","type":"string","Doc":""},{"path":"$.spec.slo.labels.*","type":"[]string","Doc":""},{"path":"$.spec.slo.labels.*[*]","type":"string","Doc":""},{"path":"$.spec.service","type":"ObjectMetadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alert","Doc":"","childrenPaths":["$.spec.service.name","$.spec.service.displayName","$.spec.service.project","$.spec.service.labels"]},{"path":"$.spec.service.name","type":"string","Doc":""},{"path":"$.spec.service.displayName","type":"string","Doc":""},{"path":"$.spec.service.project","type":"string","Doc":""},{"path":"$.spec.service.labels","type":"map[string][]string","Doc":"Labels are key-value pairs that can be attached to certain objects.\nLabels are used to select and filter these objects.","childrenPaths":["$.spec.service.labels.~","$.spec.service.labels.*","$.spec.service.labels.*[*]"]},{"path":"$.spec.service.labels.~","type":"string","Doc":""},{"path":"$.spec.service.labels.*","type":"[]string","Doc":""},{"path":"$.spec.service.labels.*[*]","type":"string","Doc":""},{"path":"$.spec.objective","type":"Objective","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alert","Doc":"","childrenPaths":["$.spec.objective.value","$.spec.objective.name","$.spec.objective.displayName"]},{"path":"$.spec.objective.value","type":"float64","Doc":""},{"path":"$.spec.objective.name","type":"string","Doc":""},{"path":"$.spec.objective.displayName","type":"string","Doc":""},{"path":"$.spec.severity","type":"string","Doc":""},{"path":"$.spec.status","type":"string","Doc":""},{"path":"$.spec.triggeredMetricTime","type":"string","Doc":""},{"path":"$.spec.triggeredClockTime","type":"string","Doc":""},{"path":"$.spec.resolvedClockTime","type":"string","Doc":""},{"path":"$.spec.resolvedMetricTime","type":"string","Doc":""},{"path":"$.spec.coolDown","type":"string","Doc":""},{"path":"$.spec.conditions","type":"[]Condition","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alert","Doc":""},{"path":"$.spec.conditions[*]","type":"Condition","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alert","Doc":"","childrenPaths":["$.spec.conditions[*].measurement","$.spec.conditions[*].value","$.spec.conditions[*].alertingWindow","$.spec.conditions[*].lastsFor","$.spec.conditions[*].op","$.spec.conditions[*].status"]},{"path":"$.spec.conditions[*].measurement","type":"string","Doc":""},{"path":"$.spec.conditions[*].value","type":"interface","Doc":""},{"path":"$.spec.conditions[*].alertingWindow","type":"string","Doc":""},{"path":"$.spec.conditions[*].lastsFor","type":"string","Doc":""},{"path":"$.spec.conditions[*].op","type":"string","Doc":""},{"path":"$.spec.conditions[*].status","type":"ConditionStatus","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/alert","Doc":"","childrenPaths":["$.spec.conditions[*].status.firstMetMetricTime","$.spec.conditions[*].status.lastMetMetricTime","$.spec.conditions[*].status.lastsForMetMetricTime"]},{"path":"$.spec.conditions[*].status.firstMetMetricTime","type":"string","Doc":""},{"path":"$.spec.conditions[*].status.lastMetMetricTime","type":"string","Doc":""},{"path":"$.spec.conditions[*].status.lastsForMetMetricTime","type":"string","Doc":""},{"path":"$.spec.coolDownStartedAtMetricTime","type":"string","Doc":""},{"path":"$.spec.resolutionReason","type":"string","Doc":""},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["apiVersion: n9/v1alpha\nkind: Alert\nmetadata:\n  name: a706583a-153a-4d3f-8a12-2741cc09da9b\n  project: azure-monitor-direct\nspec:\n  alertPolicy:\n    displayName: Fast Burn\n    name: fast-burn\n    project: azure-monitor-direct\n  conditions:\n    - alertingWindow: 15m0s\n      measurement: averageBurnRate\n      op: gte\n      status:\n        firstMetMetricTime: \"2024-04-16T16:45:00Z\"\n        lastMetMetricTime: \"2024-04-23T16:29:00Z\"\n      value: 2\n    - alertingWindow: 24h0m0s\n      measurement: averageBurnRate\n      op: gte\n      status:\n        firstMetMetricTime: \"2024-04-17T16:30:00Z\"\n        lastMetMetricTime: \"2024-04-23T16:29:00Z\"\n      value: 3\n    - alertingWindow: 72h0m0s\n      measurement: averageBurnRate\n      op: gte\n      status:\n        firstMetMetricTime: \"2024-04-19T16:30:00Z\"\n        lastMetMetricTime: \"2024-04-23T16:29:00Z\"\n      value: 3\n  coolDown: 5m0s\n  coolDownStartedAtMetricTime: \"2024-04-23T16:29:00Z\"\n  objective:\n    displayName: \"\"\n    name: objective-1\n    value: 1\n  resolutionReason: AlertCanceledNewCalendarAlignedTimeWindow\n  resolvedClockTime: \"2024-04-23T16:36:10Z\"\n  resolvedMetricTime: \"2024-04-23T16:30:00Z\"\n  service:\n    name: n9-web-app-direct\n    project: azure-monitor-direct\n  severity: Medium\n  slo:\n    name: azure-n9-web-app-availability-calendar-week-ts\n    project: azure-monitor-direct\n  status: Canceled\n  triggeredClockTime: \"2024-04-19T16:36:08Z\"\n  triggeredMetricTime: \"2024-04-19T16:30:00Z\"\n"]},{"Kind":"Annotation","Version":"n9/v1alpha","Properties":[{"path":"$","type":"Annotation","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/annotation","Doc":"","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.status","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["Annotation"],"rules":[{"description":"should be equal to 'Annotation'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/annotation","Doc":"","childrenPaths":["$.metadata.name","$.metadata.project"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.project","type":"string","Doc":"","isOptional":true,"rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/annotation","Doc":"","rules":[{"description":""}],"childrenPaths":["$.spec.slo","$.spec.objectiveName","$.spec.description","$.spec.startTime","$.spec.endTime","$.spec.category","$.spec.createdBy"]},{"path":"$.spec.slo","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.objectiveName","type":"string","Doc":"","isOptional":true,"rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.description","type":"string","Doc":"","rules":[{"description":"length must be between 0 and 1000","errorCode":"string_length"}]},{"path":"$.spec.startTime","type":"Time","package":"time","Doc":""},{"path":"$.spec.endTime","type":"Time","package":"time","Doc":""},{"path":"$.spec.category","type":"string","Doc":""},{"path":"$.spec.createdBy","type":"string","Doc":""},{"path":"$.status","type":"Status","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/annotation","Doc":"Status represents content of Status optional for Annotation Object","childrenPaths":["$.status.updatedAt","$.status.isSystem"]},{"path":"$.status.updatedAt","type":"string","Doc":""},{"path":"$.status.isSystem","type":"bool","Doc":""},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["- apiVersion: n9/v1alpha\n  kind: Annotation\n  metadata:\n    name: good-objective-data-gap\n    project: default\n  spec:\n    slo: api-server-latency\n    objectiveName: good\n    description: Data gap occurred\n    startTime: 2024-05-01T12:00:00Z\n    endTime: 2024-05-04T10:00:00Z\n- apiVersion: n9/v1alpha\n  kind: Annotation\n  metadata:\n    name: deployment-2021-01-01\n    project: default\n  spec:\n    slo: api-server-latency\n    description: Deployment was performed here\n    startTime: 2024-05-16T14:00:00+01:00\n    endTime: 2024-05-16T15:00:00+01:00\n"]},{"Kind":"BudgetAdjustment","Version":"n9/v1alpha","Properties":[{"path":"$","type":"BudgetAdjustment","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/budgetadjustment","Doc":"BudgetAdjustment represents a object for manipulating budget adjustments.","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["BudgetAdjustment"],"rules":[{"description":"should be equal to 'BudgetAdjustment'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/budgetadjustment","Doc":"","childrenPaths":["$.metadata.name","$.metadata.displayName"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.displayName","type":"string","Doc":"","isOptional":true,"rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/budgetadjustment","Doc":"Spec represents content of BudgetAdjustment's Spec.","childrenPaths":["$.spec.description","$.spec.firstEventStart","$.spec.duration","$.spec.rrule","$.spec.filters"]},{"path":"$.spec.description","type":"string","Doc":"","rules":[{"description":"length must be between 0 and 1050","errorCode":"string_description"}]},{"path":"$.spec.firstEventStart","type":"Time","package":"time","Doc":""},{"path":"$.spec.duration","type":"string","Doc":""},{"path":"$.spec.rrule","type":"string","Doc":""},{"path":"$.spec.filters","type":"Filters","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/budgetadjustment","Doc":"","childrenPaths":["$.spec.filters.slos","$.spec.filters.slos[*]"]},{"path":"$.spec.filters.slos","type":"[]SLORef","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/budgetadjustment","Doc":"","rules":[{"description":"length must be greater than or equal to 1","errorCode":"slice_min_length"},{"description":"elements must be unique according to the following constraints: SLOs must be unique","errorCode":"slice_unique"}]},{"path":"$.spec.filters.slos[*]","type":"SLORef","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/budgetadjustment","Doc":"","childrenPaths":["$.spec.filters.slos[*].name","$.spec.filters.slos[*].project"]},{"path":"$.spec.filters.slos[*].name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.filters.slos[*].project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["apiVersion: n9/v1alpha\nkind: BudgetAdjustment\nmetadata:\n  name: monthly-deployment-adjustment\n  displayName: Monthly deployment adjustment\nspec:\n  description: Adjustment for deployment happening monthly on the first Tuesday of each month for 1 hour\n  firstEventStart: 2024-01-01T12:00:00Z\n  duration: 1h\n  rrule: FREQ=MONTHLY;INTERVAL=1;BYDAY=1TU\n  filters:\n    slos:\n    - name: api-server-latency\n      project: default\n    - name: api-server-uptime\n      project: default\n    - name: proxy-throughput\n      project: proxy\n"]},{"Kind":"DataExport","Version":"n9/v1alpha","Properties":[{"path":"$","type":"DataExport","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/dataexport","Doc":"DataExport struct which mapped one to one with kind: DataExport yaml definition","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.status","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["DataExport"],"rules":[{"description":"should be equal to 'DataExport'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/dataexport","Doc":"","childrenPaths":["$.metadata.name","$.metadata.displayName","$.metadata.project"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.displayName","type":"string","Doc":"","isOptional":true,"rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.metadata.project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/dataexport","Doc":"Spec represents content of DataExport's Spec","childrenPaths":["$.spec.exportType","$.spec.spec"]},{"path":"$.spec.exportType","type":"string","Doc":"","values":["S3","Snowflake","GCS"],"rules":[{"description":"must be one of: S3, Snowflake, GCS","errorCode":"one_of"}]},{"path":"$.spec.spec","type":"interface","Doc":""},{"path":"$.status","type":"Status","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/dataexport","Doc":"Status represents content of Status optional for DataExport Object","childrenPaths":["$.status.exportJob","$.status.awsExternalID"]},{"path":"$.status.exportJob","type":"ExportJobStatus","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/dataexport","Doc":"ExportJobStatus represents content of ExportJob status","childrenPaths":["$.status.exportJob.timestamp","$.status.exportJob.state"]},{"path":"$.status.exportJob.timestamp","type":"string","Doc":""},{"path":"$.status.exportJob.state","type":"string","Doc":""},{"path":"$.status.awsExternalID","type":"string","Doc":""},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["# gcs\n- apiVersion: n9/v1alpha\n  kind: DataExport\n  metadata:\n    name: gcs-export\n    displayName: Data export to Google Cloud Storage bucket\n    project: default\n  spec:\n    exportType: GCS\n    spec:\n      bucketName: prod-data-export-bucket\n  status: null\n# s3\n- apiVersion: n9/v1alpha\n  kind: DataExport\n  metadata:\n    name: s3-export\n    displayName: Data export to AWS S3 bucket\n    project: default\n  spec:\n    exportType: S3\n    spec:\n      bucketName: data-export-bucket\n      roleArn: arn:aws:iam::123456578901:role/nobl9-access\n  status: null\n"]},{"Kind":"UserGroup","Version":"n9/v1alpha","Properties":[{"path":"$","type":"UserGroup","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/usergroup","Doc":"UserGroup represents a UserGroup object.","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["UserGroup"],"rules":[{"description":"should be equal to 'UserGroup'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/usergroup","Doc":"","childrenPaths":["$.metadata.name"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/usergroup","Doc":"Spec represents content of UserGroup's Spec","childrenPaths":["$.spec.displayName","$.spec.members","$.spec.members[*]"]},{"path":"$.spec.displayName","type":"string","Doc":"","rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.spec.members","type":"[]Member","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/usergroup","Doc":""},{"path":"$.spec.members[*]","type":"Member","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/usergroup","Doc":"","childrenPaths":["$.spec.members[*].id"]},{"path":"$.spec.members[*].id","type":"string","Doc":""},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["apiVersion: n9/v1alpha\nkind: UserGroup\nmetadata:\n  name: my-group\nspec:\n  displayName: My Group\n  members:\n  - id: some-id"]},{"Kind":"RoleBinding","Version":"n9/v1alpha","Properties":[{"path":"$","type":"RoleBinding","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/rolebinding","Doc":"RoleBinding represents relation between user and role.","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["RoleBinding"],"rules":[{"description":"should be equal to 'RoleBinding'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/rolebinding","Doc":"","childrenPaths":["$.metadata.name"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/rolebinding","Doc":"","rules":[{"description":"properties are mutually exclusive: groupRef, user","errorCode":"mutually_exclusive"}],"childrenPaths":["$.spec.user","$.spec.groupRef","$.spec.roleRef","$.spec.projectRef"]},{"path":"$.spec.user","type":"string","Doc":""},{"path":"$.spec.groupRef","type":"string","Doc":""},{"path":"$.spec.roleRef","type":"string","Doc":""},{"path":"$.spec.projectRef","type":"string","Doc":"","isOptional":true,"rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["# organization binding\n- apiVersion: n9/v1alpha\n  kind: RoleBinding\n  metadata:\n    name: organization-binding-john-admin\n  spec:\n    user: 00u2y4e4atkzaYkXP4x8\n    roleRef: organization-admin\n# organization group binding\n- apiVersion: n9/v1alpha\n  kind: RoleBinding\n  metadata:\n    name: group-binding-admin\n  spec:\n    groupRef: group-Q72HorLyjjCc\n    roleRef: organization-admin\n# project binding\n- apiVersion: n9/v1alpha\n  kind: RoleBinding\n  metadata:\n    name: default-project-binding\n  spec:\n    user: 00u2y4e4atkzaYkXP4x8\n    roleRef: project-viewer\n    projectRef: default\n# project group binding\n- apiVersion: n9/v1alpha\n  kind: RoleBinding\n  metadata:\n    name: default-group-project-binding\n  spec:\n    groupRef: group-Q72HorLyjjCc\n    roleRef: project-viewer\n    projectRef: default\n"]},{"Kind":"Report","Version":"n9/v1alpha","Properties":[{"path":"$","type":"Report","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.apiVersion","$.kind","$.metadata","$.spec","$.organization","$.manifestSrc"]},{"path":"$.apiVersion","type":"string","Doc":"Version represents the specific version of the manifest.","values":["n9/v1alpha"],"rules":[{"description":"should be equal to 'n9/v1alpha'","errorCode":"equal_to"}]},{"path":"$.kind","type":"string","Doc":"Kind represents all the [Object] kinds available in the API to perform operations on.","values":["Report"],"rules":[{"description":"should be equal to 'Report'","errorCode":"equal_to"}]},{"path":"$.metadata","type":"Metadata","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.metadata.name","$.metadata.displayName"]},{"path":"$.metadata.name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.metadata.displayName","type":"string","Doc":"","isOptional":true,"rules":[{"description":"length must be between 0 and 63","errorCode":"string_length"}]},{"path":"$.spec","type":"Spec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.spec.createdAt","$.spec.updatedAt","$.spec.shared","$.spec.createdBy","$.spec.filters","$.spec.systemHealthReview","$.spec.sloHistory","$.spec.errorBudgetStatus"]},{"path":"$.spec.createdAt","type":"string","Doc":""},{"path":"$.spec.updatedAt","type":"string","Doc":""},{"path":"$.spec.shared","type":"bool","Doc":""},{"path":"$.spec.createdBy","type":"string","Doc":""},{"path":"$.spec.filters","type":"Filters","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.spec.filters.projects","$.spec.filters.projects[*]","$.spec.filters.services","$.spec.filters.services[*]","$.spec.filters.slos","$.spec.filters.slos[*]","$.spec.filters.labels"]},{"path":"$.spec.filters.projects","type":"[]string","Doc":""},{"path":"$.spec.filters.projects[*]","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.filters.services","type":"[]Service","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":""},{"path":"$.spec.filters.services[*]","type":"Service","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.spec.filters.services[*].name","$.spec.filters.services[*].project"]},{"path":"$.spec.filters.services[*].name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.filters.services[*].project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.filters.slos","type":"[]SLO","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":""},{"path":"$.spec.filters.slos[*]","type":"SLO","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.spec.filters.slos[*].name","$.spec.filters.slos[*].project"]},{"path":"$.spec.filters.slos[*].name","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.filters.slos[*].project","type":"string","Doc":"","rules":[{"description":"string must match regular expression: '^[a-z0-9]([-a-z0-9]{0,61}[a-z0-9])?$'","details":"an RFC-1123 compliant label name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character","errorCode":"string_dns_label","examples":["my-name","123-abc"]}]},{"path":"$.spec.filters.labels","type":"map[string][]string","Doc":"","childrenPaths":["$.spec.filters.labels.~","$.spec.filters.labels.*","$.spec.filters.labels.*[*]"]},{"path":"$.spec.filters.labels.~","type":"string","Doc":""},{"path":"$.spec.filters.labels.*","type":"[]string","Doc":""},{"path":"$.spec.filters.labels.*[*]","type":"string","Doc":""},{"path":"$.spec.systemHealthReview","type":"SystemHealthReviewConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.spec.systemHealthReview.timeFrame","$.spec.systemHealthReview.rowGroupBy","$.spec.systemHealthReview.columns","$.spec.systemHealthReview.columns[*]","$.spec.systemHealthReview.thresholds"]},{"path":"$.spec.systemHealthReview.timeFrame","type":"SystemHealthReviewTimeFrame","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.spec.systemHealthReview.timeFrame.snapshot","$.spec.systemHealthReview.timeFrame.timeZone"]},{"path":"$.spec.systemHealthReview.timeFrame.snapshot","type":"SnapshotTimeFrame","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.spec.systemHealthReview.timeFrame.snapshot.point","$.spec.systemHealthReview.timeFrame.snapshot.dateTime","$.spec.systemHealthReview.timeFrame.snapshot.rrule"]},{"path":"$.spec.systemHealthReview.timeFrame.snapshot.point","type":"int","Doc":"SnapshotPoint /*","values":["past","latest"],"rules":[{"description":"must be one of: past, latest","errorCode":"one_of"}]},{"path":"$.spec.systemHealthReview.timeFrame.snapshot.dateTime","type":"Time","package":"time","Doc":"","rules":[{"description":"","conditions":["past snapshot point"]},{"description":"property is forbidden","details":"dateTime is forbidden for latest snapshot point","errorCode":"forbidden","conditions":["latest snapshot point"]}]},{"path":"$.spec.systemHealthReview.timeFrame.snapshot.rrule","type":"string","Doc":"","rules":[{"description":"","conditions":["past snapshot point"]},{"description":"property is forbidden","details":"rrule is forbidden for latest snapshot point","errorCode":"forbidden","conditions":["latest snapshot point"]}]},{"path":"$.spec.systemHealthReview.timeFrame.timeZone","type":"string","Doc":""},{"path":"$.spec.systemHealthReview.rowGroupBy","type":"int","Doc":"RowGroupBy /*","values":["project","service"],"rules":[{"description":"must be one of: project, service","errorCode":"one_of"}]},{"path":"$.spec.systemHealthReview.columns","type":"[]ColumnSpec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","rules":[{"description":"length must be greater than or equal to 1","errorCode":"slice_min_length"},{"description":"length must be less than or equal to 30","errorCode":"slice_max_length"}]},{"path":"$.spec.systemHealthReview.columns[*]","type":"ColumnSpec","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.spec.systemHealthReview.columns[*].displayName","$.spec.systemHealthReview.columns[*].labels"]},{"path":"$.spec.systemHealthReview.columns[*].displayName","type":"string","Doc":"","rules":[{"description":"length must be less than or equal to 63","errorCode":"string_max_length"}]},{"path":"$.spec.systemHealthReview.columns[*].labels","type":"map[string][]string","Doc":"","rules":[{"description":"length must be greater than or equal to 1","errorCode":"map_min_length"}],"childrenPaths":["$.spec.systemHealthReview.columns[*].labels.~","$.spec.systemHealthReview.columns[*].labels.*","$.spec.systemHealthReview.columns[*].labels.*[*]"]},{"path":"$.spec.systemHealthReview.columns[*].labels.~","type":"string","Doc":""},{"path":"$.spec.systemHealthReview.columns[*].labels.*","type":"[]string","Doc":""},{"path":"$.spec.systemHealthReview.columns[*].labels.*[*]","type":"string","Doc":""},{"path":"$.spec.systemHealthReview.thresholds","type":"Thresholds","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.spec.systemHealthReview.thresholds.redLte","$.spec.systemHealthReview.thresholds.greenGt","$.spec.systemHealthReview.thresholds.showNoData"]},{"path":"$.spec.systemHealthReview.thresholds.redLte","type":"float64","Doc":"","rules":[{"description":"should be less than '1'","errorCode":"less_than"}]},{"path":"$.spec.systemHealthReview.thresholds.greenGt","type":"float64","Doc":"Yellow is calculated as the difference between Red and Green\nthresholds. If Red and Green are the same, Yellow is not used on the report.","rules":[{"description":"should be less than '1'","errorCode":"less_than"}]},{"path":"$.spec.systemHealthReview.thresholds.showNoData","type":"bool","Doc":"ShowNoData customizes the report to either show or hide rows with no data."},{"path":"$.spec.sloHistory","type":"SLOHistoryConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.spec.sloHistory.timeFrame"]},{"path":"$.spec.sloHistory.timeFrame","type":"SLOHistoryTimeFrame","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","rules":[{"description":"properties are mutually exclusive: calendar, rolling","errorCode":"mutually_exclusive"}],"childrenPaths":["$.spec.sloHistory.timeFrame.rolling","$.spec.sloHistory.timeFrame.calendar","$.spec.sloHistory.timeFrame.timeZone"]},{"path":"$.spec.sloHistory.timeFrame.rolling","type":"RollingTimeFrame","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","childrenPaths":["$.spec.sloHistory.timeFrame.rolling.unit","$.spec.sloHistory.timeFrame.rolling.count"]},{"path":"$.spec.sloHistory.timeFrame.rolling.unit","type":"string","Doc":"","values":["Week","Month","Quarter","Year"],"rules":[{"description":"must be one of: Week, Month, Quarter, Year","errorCode":"one_of"}]},{"path":"$.spec.sloHistory.timeFrame.rolling.count","type":"int","Doc":""},{"path":"$.spec.sloHistory.timeFrame.calendar","type":"CalendarTimeFrame","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":"","rules":[{"description":""},{"description":""}],"childrenPaths":["$.spec.sloHistory.timeFrame.calendar.from","$.spec.sloHistory.timeFrame.calendar.to","$.spec.sloHistory.timeFrame.calendar.unit","$.spec.sloHistory.timeFrame.calendar.count"]},{"path":"$.spec.sloHistory.timeFrame.calendar.from","type":"string","Doc":""},{"path":"$.spec.sloHistory.timeFrame.calendar.to","type":"string","Doc":""},{"path":"$.spec.sloHistory.timeFrame.calendar.unit","type":"string","Doc":"","isOptional":true,"values":["Week","Month","Quarter","Year"],"rules":[{"description":"must be one of: Week, Month, Quarter, Year","errorCode":"one_of"}]},{"path":"$.spec.sloHistory.timeFrame.calendar.count","type":"int","Doc":""},{"path":"$.spec.sloHistory.timeFrame.timeZone","type":"string","Doc":""},{"path":"$.spec.errorBudgetStatus","type":"ErrorBudgetStatusConfig","package":"github.com/nobl9/nobl9-go/manifest/v1alpha/report","Doc":""},{"path":"$.manifestSrc","type":"string","Doc":""}],"Examples":["- apiVersion: n9/v1alpha\n  kind: Report\n  metadata:\n    name: shr-report\n    displayName: System Health Review\n  spec:\n    shared: true\n    filters:\n      projects:\n      - project-1\n      - project-2\n    systemHealthReview:\n      timeFrame:\n        snapshot:\n          point: past\n          dateTime: 2024-07-01T10:00:00Z\n          rrule: FREQ=WEEKLY\n        timeZone: Europe/Warsaw\n      rowGroupBy: project\n      columns:\n      - displayName: Column 1\n        labels:\n          key1:\n          - value1\n          key2:\n          - value2\n          - value3\n      thresholds:\n        redLte: 0.8\n        greenGt: 0.95\n        showNoData: false\n- apiVersion: n9/v1alpha\n  kind: Report\n  metadata:\n    name: slo-history-report\n    displayName: SLO History\n  spec:\n    shared: true\n    filters:\n      projects:\n      - project-1\n      - project-2\n      services:\n      - name: service-1\n        project: project-1\n      - name: service-2\n        project: project-1\n      slos:\n      - name: slo-1\n        project: project-1\n      - name: slo-2\n        project: project-1\n    sloHistory:\n      timeFrame:\n        rolling:\n          unit: Week\n          count: 2\n        timeZone: Europe/Warsaw\n- apiVersion: n9/v1alpha\n  kind: Report\n  metadata:\n    name: ebs-report\n    displayName: Error Budget Status\n  spec:\n    shared: true\n    filters:\n      projects:\n      - project-1\n      - project-2\n    errorBudgetStatus: {}\n"]}]
